#!amber

SET ENGINE_DATA fence_timeout_ms 60000

SHADER vertex texgen_vert PASSTHROUGH

SHADER fragment texgen_frag GLSL
#version 430
precision highp float;

layout(location = 0) out vec4 _GLF_color;

void main()
{
 _GLF_color = vec4(
 gl_FragCoord.x * (1.0 / 256.0),
 (int(gl_FragCoord.x) ^ int(gl_FragCoord.y)) * (1.0 / 256.0),
 gl_FragCoord.y * (1.0 / 256.0),
 1.0);
}
END
BUFFER default_texture FORMAT B8G8R8A8_UNORM

PIPELINE graphics texgen_pipeline
  ATTACH texgen_vert
  ATTACH texgen_frag
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER default_texture AS color LOCATION 0
END

CLEAR_COLOR texgen_pipeline 0 0 0 255
CLEAR texgen_pipeline
RUN texgen_pipeline DRAW_RECT POS 0 0  SIZE 256 256

SHADER vertex reference_vertex_shader PASSTHROUGH

# reference_fragment_shader is derived from the following GLSL:
# #version 320 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# void main()
# {
#  int i = 0;
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  vec4 texel = texture(tex, coord);
#  while(texel.x + texel.y + texel.z > 1.0 && i < 16)
#   {
#    coord = texel.xz + texel.yy;
#    coord = floor(coord * 256.0) / 256.0;
#    texel = texture(tex, coord);
#    i ++;
#   }
#  _GLF_color = texel;
# }
SHADER fragment reference_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 75
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %16 %73
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "i"
               OpName %13 "coord"
               OpName %16 "gl_FragCoord"
               OpName %22 "texel"
               OpName %26 "tex"
               OpName %73 "_GLF_color"
               OpDecorate %8 RelaxedPrecision
               OpDecorate %16 BuiltIn FragCoord
               OpDecorate %26 RelaxedPrecision
               OpDecorate %26 DescriptorSet 0
               OpDecorate %26 Binding 0
               OpDecorate %27 RelaxedPrecision
               OpDecorate %29 RelaxedPrecision
               OpDecorate %51 RelaxedPrecision
               OpDecorate %66 RelaxedPrecision
               OpDecorate %68 RelaxedPrecision
               OpDecorate %69 RelaxedPrecision
               OpDecorate %71 RelaxedPrecision
               OpDecorate %73 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpConstant %6 0
         %10 = OpTypeFloat 32
         %11 = OpTypeVector %10 2
         %12 = OpTypePointer Function %11
         %14 = OpTypeVector %10 4
         %15 = OpTypePointer Input %14
         %16 = OpVariable %15 Input
         %19 = OpConstant %10 0.00390625
         %21 = OpTypePointer Function %14
         %23 = OpTypeImage %10 2D 0 0 0 1 Unknown
         %24 = OpTypeSampledImage %23
         %25 = OpTypePointer UniformConstant %24
         %26 = OpVariable %25 UniformConstant
         %35 = OpTypeInt 32 0
         %36 = OpConstant %35 0
         %37 = OpTypePointer Function %10
         %40 = OpConstant %35 1
         %44 = OpConstant %35 2
         %48 = OpConstant %10 1
         %49 = OpTypeBool
         %52 = OpConstant %6 16
         %61 = OpConstant %10 256
         %70 = OpConstant %6 1
         %72 = OpTypePointer Output %14
         %73 = OpVariable %72 Output
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %13 = OpVariable %12 Function
         %22 = OpVariable %21 Function
               OpStore %8 %9
         %17 = OpLoad %14 %16
         %18 = OpVectorShuffle %11 %17 %17 0 1
         %20 = OpVectorTimesScalar %11 %18 %19
               OpStore %13 %20
         %27 = OpLoad %24 %26
         %28 = OpLoad %11 %13
         %29 = OpImageSampleImplicitLod %14 %27 %28
               OpStore %22 %29
               OpBranch %30
         %30 = OpLabel
               OpLoopMerge %32 %33 None
               OpBranch %34
         %34 = OpLabel
         %38 = OpAccessChain %37 %22 %36
         %39 = OpLoad %10 %38
         %41 = OpAccessChain %37 %22 %40
         %42 = OpLoad %10 %41
         %43 = OpFAdd %10 %39 %42
         %45 = OpAccessChain %37 %22 %44
         %46 = OpLoad %10 %45
         %47 = OpFAdd %10 %43 %46
         %50 = OpFOrdGreaterThan %49 %47 %48
         %51 = OpLoad %6 %8
         %53 = OpSLessThan %49 %51 %52
         %54 = OpLogicalAnd %49 %50 %53
               OpBranchConditional %54 %31 %32
         %31 = OpLabel
         %55 = OpLoad %14 %22
         %56 = OpVectorShuffle %11 %55 %55 0 2
         %57 = OpLoad %14 %22
         %58 = OpVectorShuffle %11 %57 %57 1 1
         %59 = OpFAdd %11 %56 %58
               OpStore %13 %59
         %60 = OpLoad %11 %13
         %62 = OpVectorTimesScalar %11 %60 %61
         %63 = OpExtInst %11 %1 Floor %62
         %64 = OpCompositeConstruct %11 %61 %61
         %65 = OpFDiv %11 %63 %64
               OpStore %13 %65
         %66 = OpLoad %24 %26
         %67 = OpLoad %11 %13
         %68 = OpImageSampleImplicitLod %14 %66 %67
               OpStore %22 %68
         %69 = OpLoad %6 %8
         %71 = OpIAdd %6 %69 %70
               OpStore %8 %71
               OpBranch %33
         %33 = OpLabel
               OpBranch %30
         %32 = OpLabel
         %74 = OpLoad %14 %22
               OpStore %73 %74
               OpReturn
               OpFunctionEnd
END

# uniforms for reference

# tex
SAMPLER reference_tex


BUFFER reference_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics reference_pipeline
  ATTACH reference_vertex_shader
  ATTACH reference_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER reference_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER reference_tex DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR reference_pipeline 0 0 0 255

CLEAR reference_pipeline
RUN reference_pipeline DRAW_RECT POS 0 0 SIZE 256 256


SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
#
# #ifndef REDUCER
# #define _GLF_ZERO(X, Y)                   (Y)
# #define _GLF_ONE(X, Y)                    (Y)
# #define _GLF_FALSE(X, Y)                  (Y)
# #define _GLF_TRUE(X, Y)                   (Y)
# #define _GLF_IDENTITY(X, Y)               (Y)
# #define _GLF_DEAD(X)                      (X)
# #define _GLF_FUZZED(X)                    (X)
# #define _GLF_WRAPPED_LOOP(X)              X
# #define _GLF_WRAPPED_IF_TRUE(X)           X
# #define _GLF_WRAPPED_IF_FALSE(X)          X
# #define _GLF_SWITCH(X)                    X
# #define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
# #define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
# #endif
#
# // END OF GENERATED HEADER
# precision highp float;
#
# precision highp int;
#
# layout(set = 0, binding = 0) uniform buf0 {
#  highp vec2 injectionSwitch;
# };
# mediump vec4 GLF_live20gl_FragCoord = _GLF_FUZZED(vec4(8.7, -8.0, 1.4, 2.3));
#
# const int GLF_live20N = 10;
#
# int GLF_live20data[10] = _GLF_FUZZED(int[10](35246, 69528, (GLF_live20N + 10650), (GLF_live20N + GLF_live20N), 14940, 4936, GLF_live20N, int(false), GLF_live20N, 14940)), GLF_live20temp[10] = _GLF_FUZZED(int[10]((int(123805u) | GLF_live20N), 82478, GLF_live20N, 57824, ((4292u != 85419u) ? (GLF_live20N << -55017) : GLF_live20N), GLF_live20N, (GLF_live20N / ivec4(-58777, -53889, 18545, -87337)).b, 97094, int((mat4x3(-7677.8806, 32.84, -1042.4749, 5.7, -60.99, -1303.2421, 26.86, 6.7, 2.3, -5272.5221, 6.1, -9.8) == mat4x3(-7.8, -8.3, -57.01, -75.99, -491.128, 7179.3387, 88.85, -6.6, -2069.2878, -562.541, -8420.8856, -58.81))), 48346));
#
# void GLF_live20merge(int GLF_live20from, int GLF_live20mid, int GLF_live20to)
# {
#  int GLF_live20k = GLF_live20from, GLF_live20i = GLF_live20from, GLF_live20j = GLF_live20mid + 1;
#  {
#   int GLF_live20_looplimiter0 = 0;
#   while(GLF_live20i <= GLF_live20mid && GLF_live20j <= GLF_live20to)
#    {
#     if(GLF_live20_looplimiter0 >= 7)
#      {
#       break;
#      }
#     GLF_live20_looplimiter0 ++;
#     if(GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] < GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)])
#      {
#       GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#      }
#     else
#      {
#       GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j ++, 10)];
#      }
#    }
#  }
#  {
#   int GLF_live20_looplimiter1 = 0;
#   while(GLF_live20i < GLF_live20N && GLF_live20i <= GLF_live20mid)
#    {
#     if(GLF_live20_looplimiter1 >= 7)
#      {
#       break;
#      }
#     GLF_live20_looplimiter1 ++;
#     GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#    }
#  }
#  {
#   int GLF_live20_looplimiter2 = 0;
#   for(int GLF_live20i = GLF_live20from; GLF_live20i <= GLF_live20to; GLF_live20i ++)
#    {
#     if(GLF_live20_looplimiter2 >= 7)
#      {
#       break;
#      }
#     GLF_live20_looplimiter2 ++;
#     GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)];
#    }
#  }
# }
# precision highp float;
#
# precision highp int;
#
# precision highp int;
#
# precision highp float;
#
# mediump vec4 GLF_live17gl_FragCoord = _GLF_FUZZED(vec4(-0.1, -381.527, -2.6, -43.37));
#
# vec4 GLF_live17_GLF_color = _GLF_FUZZED((vec4(6.3, -6760.4065, -6.1, 70.04) / vec4(-47.68, 3.7, -0.6, 4191.2215)));
#
# precision highp float;
#
# mediump vec4 GLF_live16gl_FragCoord = _GLF_FUZZED(vec4(-623.758, 3107.2579, -5.1, 4057.0510));
#
# vec4 GLF_live16_GLF_color = _GLF_FUZZED((vec4(542.122, -6.6, -570.764, 361.765) * vec4(2594.2740, 2.3, -331.184, -9.8)));
#
# layout(set = 0, binding = 1) uniform sampler2D GLF_live16tex;
#
# precision highp float;
#
# mediump vec4 GLF_live18gl_FragCoord = _GLF_FUZZED(vec4(8470.7309, -11.76, -28.91, 2.4));
#
# vec4 GLF_live18_GLF_color = _GLF_FUZZED(vec4(vec3(-9.5, -6.8, -1.3), -9447.8271));
#
# layout(set = 0, binding = 2) uniform sampler2D GLF_live18tex;
#
# precision highp float;
#
# precision highp int;
#
# const int GLF_live15dp[256] = int[256](115, 133, 150, 164, 176, 184, 190, 192, 191, 187, _GLF_IDENTITY(181, (_GLF_IDENTITY(181, clamp(_GLF_IDENTITY(181, clamp(181, 181, 181)), 181, _GLF_IDENTITY(181, (181) - 0)))) - 0), 172, 163, 153, 143, _GLF_IDENTITY(134, (134) << 0), 126, _GLF_IDENTITY(120, 0 ^ (120)), 116, 114, 114, 117, 121, 127, 134, 141, 148, 154, 159, 162, 163, 161, 157, 151, 143, 134, 124, 113, 103, 94, 87, 82, 79, 80, 84, 91, 101, 114, 130, 146, 164, 182, 199, 215, 229, 240, 249, 254, 256, 254, 250, 243, 233, 223, 212, 200, 190, 180, 172, 166, 163, 161, 162, 164, 169, 174, 179, 185, 190, 193, 195, 195, 192, 188, 180, 171, 161, 149, 137, 125, 114, 105, 97, 93, 91, 93, 98, 106, 117, 130, 145, _GLF_IDENTITY(161, clamp(161, 161, 161)), 177, 193, 208, 221, 231, 239, 243, 244, _GLF_IDENTITY(242, (242) | 0), 236, 228, 218, 207, 194, 181, 169, 158, 148, 141, 135, 132, 131, 132, 135, 138, _GLF_IDENTITY(143, (_GLF_IDENTITY(143, (false ? _GLF_FUZZED(-77204) : 143))) ^ 0), 147, 151, 154, 155, 155, 152, 146, 139, 129, 118, 106, 93, 80, 68, 58, 49, _GLF_IDENTITY(43, (43) | (43)), 40, 41, 44, 51, 61, 73, 87, 103, 119, 134, 149, 162, 173, 181, 186, 188, 186, 181, 174, 164, 153, 141, 128, 116, 104, 94, 86, 81, 77, 76, 77, 80, 84, 89, 94, 98, 102, 104, 104, 102, 98, 92, 83, 73, 62, 50, 38, 26, 16, 8, 2, 0, 0, 4, 11, 21, 33, 48, 64, 81, 98, 114, 129, 141, 151, 158, 161, 161, 158, 152, 144, 134, 123, 112, 100, 90, 81, 73, 68, 65, 65, 67, 70, 75, 81, 87, 92, 97, 101, 103, 102, 100, 95, 88, 79, _GLF_IDENTITY(69, max(_GLF_IDENTITY(69, 0 ^ (69)), 69)), 58, 47, 36, 26, 18, 13, 11, 11, 15, 22, 32, 45, 60, 77, 94);
#
# precision highp float;
#
# layout(set = 0, binding = 3) uniform sampler2D GLF_live13tex;
#
# precision highp float;
#
# mediump vec4 GLF_live14gl_FragCoord = _GLF_FUZZED(vec4(1.3, 0.1, -947.028, _GLF_IDENTITY(-344.101, mix(float(_GLF_IDENTITY(-344.101, float(_GLF_IDENTITY(mat3(-344.101, 0.0, 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0), (_GLF_IDENTITY(false ? _GLF_FUZZED(mat3(-614.493, 74.85, 48.30, 32.41, 5141.7168, 6.9, 9798.5552, _GLF_IDENTITY(-35.87, clamp(_GLF_IDENTITY(-35.87, (-35.87) + 0.0), -35.87, -35.87)), 6.6)) : mat3(-344.101, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), float(_GLF_IDENTITY(mat3(sqrt(0.0), exp(0.0), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0), (mat3(sqrt(0.0), exp(0.0), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0), (true ? false ? _GLF_FUZZED(mat3(-614.493, 74.85, 48.30, 32.41, 5141.7168, 6.9, 9798.5552, _GLF_IDENTITY(-35.87, clamp(_GLF_IDENTITY(-35.87, (-35.87) + 0.0), -35.87, -35.87)), 6.6)) : mat3(-344.101, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(sqrt(0.0), min(sqrt(0.0), _GLF_IDENTITY(sqrt(0.0), float(_GLF_IDENTITY(mat3(sqrt(0.0), exp(0.0), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0), (mat3(sqrt(0.0), exp(0.0), 0.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 1.0)) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))))), 1.0, 0.0) : _GLF_FUZZED(mat3(-9.1, -4.2, -1109.2055, 4.5, 5.0, -21.82, -652.967, 5427.5225, 81.35))))))))), float(_GLF_FUZZED(vec3(9572.4296, 77.41, _GLF_IDENTITY(-496.418, max(-496.418, _GLF_IDENTITY(-496.418, float(mat4x2(-496.418, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))).z)), bool(false)))));
#
# vec4 GLF_live14_GLF_color = _GLF_FUZZED(vec4(vec2(-7.0, -7.1), 5940.0201, 1683.7836));
#
# layout(set = 0, binding = 4) uniform sampler2D GLF_live14tex;
#
# float GLF_live14ReallyApproxNormalizedAtan2(vec2 GLF_live14v)
# {
#  {
#   {
#    GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#   }
#  }
#  float GLF_live14pi2 = 1.0 / (355.0 / _GLF_IDENTITY(113.0, max(_GLF_IDENTITY(113.0, min(113.0, 113.0)), _GLF_IDENTITY(113.0, mix(float(_GLF_FUZZED(110.038)), float(113.0), bool(true))))));
#  if(length(GLF_live14v) < 0.001)
#   {
#    return 0.0;
#   }
#  vec2 GLF_live14a = abs(GLF_live14v);
#  float GLF_live14z = _GLF_FUZZED(min(-22.61, GLF_live14a[0]));
#  if(GLF_live14a.y > GLF_live14a.x)
#   {
#    GLF_live14z = GLF_live14a.x / GLF_live14a.y;
#   }
#  else
#   {
#    {
#     int GLF_live20_looplimiter3 = 0;
#     int GLF_live20high = _GLF_FUZZED(-17374);
#     int GLF_live20m = _GLF_FUZZED(-23390);
#     int GLF_live20i = _GLF_FUZZED(-5018);
#     {
#      if(GLF_live20_looplimiter3 >= 7)
#       {
#        1;
#       }
#      GLF_live20_looplimiter3 ++;
#      int GLF_live20from = GLF_live20i;
#      int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#      int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#      GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#     }
#    }
#    GLF_live14z = GLF_live14a.y / GLF_live14a.x;
#   }
#  float GLF_live14th = (0.97 - 0.19 * GLF_live14z * GLF_live14z) * GLF_live14z * GLF_live14pi2;
#  if(GLF_live14a.y < GLF_live14a.x)
#   {
#    _GLF_IDENTITY(GLF_live14th = 0.5 - GLF_live14th, (GLF_live14th = 0.5 - GLF_live14th) + 0.0);
#   }
#  if(_GLF_IDENTITY(GLF_live14v.x, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(GLF_live14v, (_GLF_IDENTITY(GLF_live14v, (false ? _GLF_FUZZED(injectionSwitch) : GLF_live14v))) / vec2(1.0, 1.0)).x, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(1.0, 1.0)), mix(float(_GLF_FUZZED(-9.4)), float(dot(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(1.0, 1.0))), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), false || (bool(true)))) && true)))), 1.0, 0.0, 1.0), mat4x2(mat4x2(mat4x2(GLF_live14v.x, log(1.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), min(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), vec2(1.0, 1.0)), mix(float(_GLF_FUZZED(-9.4)), float(dot(vec2(0.0, length(vec4(0.0, 0.0, 0.0, 0.0))), vec2(1.0, 1.0))), bool(true)))), 1.0, 0.0, 1.0)))))) < 0.0)
#   {
#    GLF_live14th = 1.0 - GLF_live14th;
#    {
#     float GLF_live20grey = _GLF_FUZZED(-2.0);
#     if(int(GLF_live20gl_FragCoord[1]) < 270)
#      {
#       GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#      }
#     else
#      {
#       1;
#      }
#    }
#   }
#  if(GLF_live14v.y < 0.0)
#   {
#    _GLF_IDENTITY(GLF_live14th = - GLF_live14th, 0.0 + (GLF_live14th = - GLF_live14th));
#    {
#     {
#      GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#     }
#    }
#   }
#  {
#   vec2 GLF_live17coord = _GLF_FUZZED(vec2(-8170.2559, -864.375));
#   if(GLF_live17coord.y < 0.6)
#    {
#     uvec2 GLF_live17icoord = uvec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(distance(vec3(6295.5248, 8.4, -3806.2699), vec3(-310.848, -8.7, 7.1))))) / 0.6)) * 256.0);
#     uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#     uint GLF_live17res2 = uint(_GLF_IDENTITY(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu, 0u + (_GLF_IDENTITY(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu, (((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu) / 1u))));
#     float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u, 1u)), (uint(uvec4(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u, 1u))) >> 0u))));
#     GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#    }
#   else
#    {
#     ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, _GLF_IDENTITY(0.6, clamp(0.6, 0.6, 0.6)))) * vec2(1.0 / 0.4, _GLF_IDENTITY(1.0 / 0.4, float(vec2(1.0 / 0.4, 1.0))))) * 256.0);
#     int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#     int GLF_live17res2 = (GLF_live17icoord.y * GLF_live17icoord.y >> 10) & 1;
#     int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#     GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#    }
#  }
#  return GLF_live14th;
#  {
#   {
#    vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#    vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#    _GLF_IDENTITY(GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0, (true ? _GLF_IDENTITY(GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0, (GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0) * vec2(1.0, 1.0)) : _GLF_FUZZED(GLF_live18reuse)));
#    GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#   }
#  }
# }
# vec2 GLF_live14polarize(vec2 GLF_live14coord)
# {
#  {
#   vec2 GLF_live17coord = _GLF_FUZZED(vec2(397.520, 3.8));
#   {
#    if(GLF_live17coord.y < 0.6)
#     {
#      uvec2 GLF_live17icoord = uvec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0);
#      uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#      uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#      float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#      GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#     }
#    else
#     {
#      {
#       float GLF_live20grey = _GLF_FUZZED((-3463.1537));
#       if(int(GLF_live20gl_FragCoord[1]) < 210)
#        {
#         GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#        }
#       else
#        {
#         if(int(GLF_live20gl_FragCoord[1]) < 240)
#          {
#           GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#          }
#         else
#          {
#           if(int(GLF_live20gl_FragCoord[1]) < 270)
#            {
#             GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#            }
#           else
#            {
#             1;
#            }
#          }
#        }
#      }
#      ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.6)) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#      int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#      int GLF_live17res2 = (GLF_live17icoord.y * GLF_live17icoord.y >> 10) & 1;
#      {
#       int GLF_live20_looplimiter3 = 0;
#       if(GLF_live20_looplimiter3 >= 7)
#        {
#         1;
#        }
#      }
#      int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#      GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#     }
#   }
#  }
#  float GLF_live14pi = (355.0 / 113.0);
#  vec2 GLF_live14center = GLF_live14coord - vec2(0.5);
#  float GLF_live14dist = length(GLF_live14center);
#  {
#   vec2 GLF_live17coord = _GLF_FUZZED(vec2(-0.8, -1.3));
#   {
#    uvec2 GLF_live17icoord = uvec2(((GLF_live17coord - vec2(0.4, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(float(-46451)))))) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0);
#    {
#     int GLF_live20_looplimiter6 = 0;
#     for(int GLF_live20j = 0; GLF_live20j < 10; GLF_live20j ++)
#      {
#       if(GLF_live20_looplimiter6 >= 7)
#        {
#         break;
#        }
#       GLF_live20_looplimiter6 ++;
#       GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)];
#      }
#    }
#    uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#    uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#    float GLF_live17res = float((_GLF_IDENTITY((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u, max(_GLF_IDENTITY((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u, ((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) - 0u), (GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u))) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#    {
#     int GLF_live20_looplimiter3 = 0;
#     int GLF_live20low = _GLF_FUZZED(-87319);
#     int GLF_live20high = _GLF_FUZZED((-92639 / 30754));
#     int GLF_live20m = _GLF_FUZZED(63213);
#     for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#      {
#       if(GLF_live20_looplimiter3 >= 7)
#        {
#         break;
#        }
#       GLF_live20_looplimiter3 ++;
#       int GLF_live20from = GLF_live20i;
#       int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#       int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#       GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#      }
#    }
#    GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#   }
#  }
#  float GLF_live14angle = GLF_live14ReallyApproxNormalizedAtan2(GLF_live14center);
#  {
#   vec2 GLF_live17coord = _GLF_FUZZED((mat3x2(2.7, 3449.4802, _GLF_IDENTITY(7.2, mix(float(7.2), float(_GLF_FUZZED(4.4)), bool(false))), -6.0, -2133.4034, -9.7) * vec3(-2189.7630, -6202.5917, -5055.4201)));
#   if(GLF_live17coord.y < 0.6)
#    {
#     {
#      int GLF_live20_looplimiter6 = 0;
#      for(int GLF_live20j = 0; GLF_live20j < 10; GLF_live20j ++)
#       {
#        if(GLF_live20_looplimiter6 >= 7)
#         {
#          break;
#         }
#        GLF_live20_looplimiter6 ++;
#        GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)];
#       }
#     }
#     uvec2 GLF_live17icoord = uvec2(_GLF_IDENTITY(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0, (((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))));
#     uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#     uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#     float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#     GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#    }
#   else
#    {
#     ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.6)) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#     int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#     int GLF_live17res2 = (_GLF_IDENTITY(GLF_live17icoord.y * GLF_live17icoord.y >> 10, (GLF_live17icoord.y * GLF_live17icoord.y >> 10) >> (0 | 0))) & 1;
#     int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#     GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#    }
#  }
#  return vec2(_GLF_IDENTITY(GLF_live14dist, clamp(_GLF_IDENTITY(GLF_live14dist, min(GLF_live14dist, GLF_live14dist)), GLF_live14dist, GLF_live14dist)), GLF_live14angle);
# }
# precision highp float;
#
# precision highp int;
#
# mediump vec4 GLF_live12gl_FragCoord = _GLF_FUZZED((vec4(7.8, 6151.2913, 4.3, -58.34) * 9.1));
#
# vec4 GLF_live12_GLF_color = _GLF_FUZZED(vec4(-28.83, 78.47, -1.9, -3.0));
#
# layout(set = 0, binding = 5) uniform buf5 {
#  vec2 GLF_live12resolution;
# };
# float GLF_live12cross2d(vec2 GLF_live12a, vec2 GLF_live12b)
# {
#  return ((GLF_live12a.x) * (GLF_live12b.y) - (GLF_live12b.x) * (GLF_live12a.y));
# }
# int GLF_live12pointInTriangle(vec2 GLF_live12p, vec2 GLF_live12a, vec2 GLF_live12b, vec2 GLF_live12c)
# {
#  float GLF_live12pab = GLF_live12cross2d(vec2(GLF_live12p.x - _GLF_IDENTITY(GLF_live12a, (_GLF_FALSE(false, (gl_FragCoord.x < 0.0)) ? _GLF_FUZZED(mat2(-477.076, 23.35, -1695.4793, -314.105)[1]) : GLF_live12a)).x, GLF_live12p.y - GLF_live12a.y), vec2(_GLF_IDENTITY(GLF_live12b.x - GLF_live12a.x, mix(float(_GLF_FUZZED(9142.7783)), float(_GLF_IDENTITY(GLF_live12b.x - GLF_live12a.x, clamp(GLF_live12b.x - GLF_live12a.x, GLF_live12b.x - GLF_live12a.x, GLF_live12b.x - GLF_live12a.x))), bool(true))), GLF_live12b.y - GLF_live12a.y));
#  float GLF_live12pbc = GLF_live12cross2d(vec2(GLF_live12p.x - GLF_live12b.x, GLF_live12p.y - GLF_live12b.y), vec2(GLF_live12c.x - GLF_live12b.x, GLF_live12c.y - GLF_live12b.y));
#  if(! ((GLF_live12pab < 0.0 && GLF_live12pbc < 0.0) || (GLF_live12pab >= 0.0 && GLF_live12pbc >= 0.0)))
#   {
#    return 0;
#   }
#  float GLF_live12pca = GLF_live12cross2d(vec2(GLF_live12p.x - _GLF_IDENTITY(GLF_live12c, min(_GLF_IDENTITY(GLF_live12c, _GLF_IDENTITY(vec2(mat3(GLF_live12c, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), clamp(vec2(mat3(GLF_live12c, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat3(GLF_live12c, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), vec2(mat3(GLF_live12c, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), GLF_live12c)).x, GLF_live12p.y - GLF_live12c.y), vec2(GLF_live12a.x - GLF_live12c.x, GLF_live12a.y - GLF_live12c.y));
#  if(! ((GLF_live12pab < 0.0 && GLF_live12pca < 0.0) || (GLF_live12pab >= 0.0 && GLF_live12pca >= 0.0)))
#   {
#    return 0;
#   }
#  return 1;
# }
# precision highp float;
#
# precision highp int;
#
# struct GLF_live10BST {
#  int data;
#  int leftIndex;
#  int rightIndex;
# } ;
#
# GLF_live10BST GLF_live10tree[10] = _GLF_FUZZED(GLF_live10BST[10](GLF_live10BST(-67566, -87435, 27390), GLF_live10BST(87526, -80682, 28087), GLF_live10BST(-84492, 64881, -60382), GLF_live10BST(-46105, 45280, -80019), GLF_live10BST(-6636, 44406, 78953), GLF_live10BST(-76334, 5352, -36549), GLF_live10BST((- -83579), 49788, -26814), GLF_live10BST(6354, -51910, _GLF_IDENTITY(35431, int(ivec2(_GLF_IDENTITY(35431, max(35431, 35431)), 1)))), GLF_live10BST((_GLF_IDENTITY(-61363, ~ (~ (-61363))) % -66443), 10400, 69890), GLF_live10BST(43485, -77403, -6348)));
#
# precision highp float;
#
# precision highp int;
#
# vec4 GLF_live8_GLF_color = _GLF_FUZZED(vec4(21.04, 908.034, -940.801, -7.6));
#
# int GLF_live8map[256] = _GLF_FUZZED(int[256](77871, 40700, (80220 % 36463), -35328, 7205, 28267, 23369, ((-78832 * -5919) * 85978), (-93100), -31135, 72705, -21718, 43639, (33973 + -14155), 25173, 60180, 35678, -62984, -79149, 20269, 35678, (-93100), 77871, 40700, 25173, _GLF_IDENTITY((33973 + -14155), 1 * ((33973 + -14155))), (80220 % 36463), -21718, 23369, _GLF_IDENTITY(20269, clamp(20269, 20269, 20269)), ((-78832 * -5919) * 85978), 60180, -79149, -62984, 43639, 72705, 7205, 28267, -35328, -31135, -35328, (33973 + -14155), ((-78832 * -5919) * 85978), -21718, -31135, -79149, -62984, 35678, 43639, _GLF_IDENTITY(7205, (7205) / 1), 40700, 28267, 23369, (_GLF_IDENTITY(-93100, 0 + (-93100))), 72705, 20269, 60180, (80220 % 36463), 25173, 77871, 40700, 28267, 20269, -35328, 25173, 35678, (33973 + -14155), (80220 % 36463), 43639, (-93100), _GLF_IDENTITY(-31135, (_GLF_IDENTITY(-31135, min(-31135, -31135))) / (1 & 1)), 23369, -79149, ((-78832 * -5919) * 85978), 60180, 7205, -21718, 72705, -62984, 77871, 7205, 77871, _GLF_IDENTITY(-35328, ~ (~ (_GLF_IDENTITY(-35328, clamp(_GLF_IDENTITY(-35328, min(_GLF_IDENTITY(-35328, (-35328) | (_GLF_IDENTITY(-35328, ~ (~ (-35328))))), -35328)), -35328, -35328))))), (-93100), -62984, ((-78832 * -5919) * 85978), -79149, 20269, 35678, 72705, (33973 + -14155), -31135, 28267, 25173, 23369, (_GLF_IDENTITY(80220, max(80220, 80220)) % 36463), 60180, -21718, 40700, 43639, (33973 + -14155), 40700, -79149, (-93100), 43639, 20269, 23369, (80220 % _GLF_IDENTITY(36463, (36463) - 0)), -62984, 72705, -31135, 7205, -35328, 77871, 28267, ((_GLF_IDENTITY(-78832 * -5919, (_GLF_IDENTITY(-78832 * -5919, (42295 & 0) | (_GLF_IDENTITY(-78832 * -5919, (true ? -78832 * -5919 : _GLF_FUZZED(-80061)))))) | (-78832 * -5919))) * 85978), 60180, 25173, 35678, -21718, -35328, 25173, 35678, 23369, 60180, (-93100), (33973 + -14155), 77871, 72705, -31135, -62984, 40700, 43639, (_GLF_IDENTITY(80220 % 36463, 0 | (80220 % 36463))), 7205, 20269, -21718, -79149, ((-78832 * -5919) * 85978), 28267, 23369, -21718, 20269, 60180, 25173, 72705, ((_GLF_IDENTITY(-78832 * -5919, clamp(_GLF_IDENTITY(-78832 * -5919, (true ? -78832 * -5919 : _GLF_FUZZED(-71308))), -78832 * -5919, -78832 * -5919))) * 85978), 40700, (-93100), -35328, -62984, -79149, -31135, 7205, 28267, (33973 + -14155), _GLF_IDENTITY(77871, (77871) | (77871)), 43639, (80220 % 36463), _GLF_IDENTITY(35678, (_GLF_IDENTITY(35678, (0 | 0) | (35678))) ^ 0), 35678, 72705, (33973 + -14155), 40700, 25173, (-93100), 77871, -31135, (_GLF_IDENTITY((-78832 * -5919) * _GLF_IDENTITY(85978, max(85978, 85978)), clamp(_GLF_IDENTITY((-78832 * -5919) * 85978, (true ? (-78832 * -5919) * 85978 : _GLF_FUZZED(-77259))), _GLF_IDENTITY((-78832 * -5919) * 85978, (true ? (-78832 * -5919) * 85978 : _GLF_FUZZED(-20249))), (-78832 * -5919) * 85978))), -79149, 28267, (80220 % 36463), -35328, 43639, 60180, -62984, 7205, 23369, -21718, 20269, 43639, 35678, (-93100), -31135, (80220 % 36463), 40700, -35328, 25173, 77871, 23369, ((-78832 * -5919) * 85978), 60180, _GLF_IDENTITY(-21718, clamp(-21718, -21718, -21718)), _GLF_IDENTITY(-62984, (-62984) | (_GLF_IDENTITY(-62984, (-62984) * 1))), 28267, 20269, (_GLF_IDENTITY(33973 + -14155, max(33973 + -14155, 33973 + -14155))), 72705, -79149, _GLF_IDENTITY(7205, (7205) >> 0), -21718, ((-78832 * -5919) * 85978), 60180, (-93100), 40700, 72705, (80220 % 36463), 43639, -62984, _GLF_IDENTITY(-31135, (_GLF_IDENTITY(-31135, clamp(-31135, _GLF_IDENTITY(-31135, (-31135) / 1), -31135))) | 0), 77871, 25173, 20269, 28267, 35678, _GLF_IDENTITY(7205, (7205) << 0), -79149, 23369, -35328, (33973 + -14155), -31135, 77871, 60180, -62984, 23369, (_GLF_IDENTITY(33973 + -14155, (true ? 33973 + -14155 : _GLF_FUZZED((- (82276 * 74551)))))), 25173, (-93100), 40700, 7205, (80220 % 36463), -79149, ((-78832 * -5919) * 85978), 43639, 28267, 72705, -21718, 35678, -35328, 20269, 35678, 60180, -31135, 25173, (80220 % 36463), (33973 + -14155), 40700, (_GLF_IDENTITY(-93100, 0 | (-93100))), ((-78832 * -5919) * 85978), -79149, -35328, 77871, -21718, -62984, 72705, 28267));
#
# precision highp float;
#
# precision highp int;
#
# precision highp float;
#
# layout(set = 0, binding = 6) uniform sampler2D GLF_live9tex;
#
# const float GLF_live9weights[9] = float[9](1.0, 0.5, - 0.25, 0.5, 1.0, - 0.5, - 0.25, - 0.5, - 1.0);
#
# precision highp float;
#
# precision highp int;
#
# precision highp float;
#
# precision highp int;
#
# precision highp float;
#
# precision highp float;
#
# layout(set = 0, binding = 7) uniform sampler2D GLF_live6tex;
#
# precision highp float;
#
# precision highp int;
#
# struct GLF_live3QuicksortObject {
#  int numbers[10];
# } ;
#
# GLF_live3QuicksortObject GLF_live3obj = _GLF_FUZZED(GLF_live3QuicksortObject(int[10](-65346, 4377, 80606, 4218, -28423, 80066, _GLF_IDENTITY(31980, (_GLF_IDENTITY(31980, (31980) / 1)) | (_GLF_IDENTITY(31980, max(31980, _GLF_IDENTITY(31980, (31980) - 0))))), (87965 / -71415), 2590, 73379)));
#
# precision highp float;
#
# precision highp int;
#
# const vec4 GLF_live2pal[16] = vec4[16](vec4(0.0, 0.0, 0.0, 1.0), vec4(0.5, 0.0, 0.0, 1.0), vec4(0.0, 0.5, 0.0, 1.0), vec4(0.5, 0.5, 0.0, 1.0), vec4(0.0, 0.0, 0.5, 1.0), vec4(0.5, 0.0, 0.5, 1.0), vec4(0.0, 0.5, 0.5, 1.0), vec4(0.5, 0.5, 0.5, 1.0), vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))) + 0.0), mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(1.5, mix(float(_GLF_FUZZED(986.693)), float(1.5), bool(true))))), _GLF_IDENTITY(float(mat2x3(float(_GLF_FUZZED(_GLF_IDENTITY(1.5, mix(float(_GLF_FUZZED(986.693)), float(1.5), bool(true))))), 0.0, 1.0, 1.0, 0.0, 0.0)), (float(mat2x3(float(_GLF_FUZZED(_GLF_IDENTITY(1.5, mix(float(_GLF_FUZZED(986.693)), float(1.5), bool(true))))), 0.0, 1.0, 1.0, 0.0, 0.0))) - 0.0)), float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))) + 0.0)), bool(true)))), vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(-9.3) : (1.0))))), vec4(0.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[0], max((vec4(1.0, 1.0, 1.0, 1.0))[0], (vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, log(1.0)), vec4(exp(0.0), 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, log(1.0)), vec4(exp(0.0), 0.0, 0.0, 0.0))), 1.0, 0.0)))))[0])), _GLF_FUZZED(98.36), _GLF_FUZZED(8225.3591), _GLF_FUZZED(-42.82)), vec4(_GLF_FUZZED(1.9), (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(false, true, true, true))));
#
# const vec4 GLF_live2picdata[8] = vec4[8](vec4(_GLF_IDENTITY(4, (4) << 0), 4, 20, 4), vec4(4, 4, 4, _GLF_IDENTITY(20, (20) | (20))), vec4(4, 20, 20, _GLF_IDENTITY(4, (4) * 1)), vec4(20, 4, 4, 8), vec4(8, 6, 4, 2), vec4(2, 12, 2, 4), vec4(16, 2, 4, 4), vec4(_GLF_IDENTITY(12, min(12, 12)), 22, 4, 4));
#
# bool GLF_live2collision(vec2 GLF_live2pos, vec4 GLF_live2quad)
# {
#  if(GLF_live2pos.x < GLF_live2quad.x)
#   {
#    return false;
#   }
#  if(GLF_live2pos.y < GLF_live2quad.y)
#   {
#    return false;
#   }
#  {
#   int GLF_live8i = _GLF_IDENTITY(_GLF_FUZZED(41910), (true ? _GLF_FUZZED(41910) : _GLF_FUZZED(88308)));
#   int GLF_live8j = _GLF_FUZZED((~ 61737));
#   bool GLF_live8canwalk = _GLF_FUZZED(true);
#   ivec2 GLF_live8p = _GLF_FUZZED(ivec2(79310, 84067));
#   {
#    int GLF_live8_looplimiter1 = 0;
#    for(   GLF_live8j = 0;
#  _GLF_IDENTITY(GLF_live8j, int(ivec4(GLF_live8j, 1, 1, 0))) < 8; GLF_live8j ++)
#     {
#      if(GLF_live8_looplimiter1 >= 3)
#       {
#        break;
#       }
#      {
#       {
#        GLF_live12_GLF_color = vec4(0.0, 0.0, 0.0, 1.0);
#       }
#      }
#      GLF_live8_looplimiter1 ++;
#      if(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT(GLF_live8j * 2 + GLF_live8i * 2 * 16, 256)] == 0)
#       {
#        GLF_live8p.x = GLF_live8j * 2;
#        _GLF_IDENTITY(GLF_live8p.y = GLF_live8i * 2, (1 ^ 1) + (GLF_live8p.y = GLF_live8i * 2));
#        GLF_live8canwalk = true;
#       }
#     }
#   }
#  }
#  if(GLF_live2pos.x > GLF_live2quad.x + GLF_live2quad.z)
#   {
#    return false;
#   }
#  if(GLF_live2pos.y > GLF_live2quad.y + GLF_live2quad.w)
#   {
#    return false;
#   }
#  {
#   {
#    GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#   }
#  }
#  return true;
# }
# precision highp float;
#
# precision highp int;
#
# mediump vec4 GLF_live0gl_FragCoord = _GLF_FUZZED(vec4(8084.7008, -2.2, -4434.5698, -34.70));
#
# vec4 GLF_live0_GLF_color = _GLF_FUZZED(_GLF_IDENTITY(vec4(-38.04, -5.3, -5.5, -0.8), (true ? vec4(-38.04, -5.3, -5.5, -0.8) : _GLF_FUZZED(vec4(74.96, 620.695, 8.6, -7098.0336)))));
#
# layout(push_constant) uniform buf_push {
#  vec2 GLF_live0resolution;
# };
# precision highp float;
#
# precision highp float;
#
# precision highp int;
#
# mediump vec4 GLF_dead0gl_FragCoord = _GLF_FUZZED(vec4(-5.9, 0.3, 255.874, -202.123));
#
# const int GLF_dead0N = 10;
#
# int GLF_dead0data[10] = _GLF_FUZZED(int[10]((GLF_dead0N), 81320, (_GLF_IDENTITY(GLF_dead0N % 90459, ~ (_GLF_IDENTITY(~ (GLF_dead0N % 90459), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(1743) : 0)) | (~ (GLF_dead0N % 90459)))))), int(-86.25), -75459, -46918, 29719, GLF_dead0N, 37712, 26392));
#
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 8) uniform sampler2D tex;
#
# void main()
# {
#  {
#   float GLF_live20grey = _GLF_FUZZED(-6729.2581);
#   {
#    GLF_live20grey = 0.5 + float(GLF_live20data[1]) / 10.0;
#   }
#  }
#  {
#   int GLF_live13i = _GLF_FUZZED(GLF_dead0N);
#   vec2 GLF_live13coord = _GLF_FUZZED(vec2(7432.6342, 8452.6960));
#   vec4 GLF_live13texel = _GLF_FUZZED((mat3x4(6.9, 0.2, 311.873, 4798.6738, _GLF_IDENTITY(-723.080, (false ? _GLF_FUZZED(-9.6) : _GLF_IDENTITY(-723.080, mix(float(-723.080), float(_GLF_FUZZED((-69.71 / -45.84))), bool(false))))), 978.354, -202.594, -78.67, 8468.2005, -7.4, 7.8, 8.6) * vec3(-28.89, 2120.2996, -19.80)));
#   int GLF_live13_looplimiter0 = 0;
#   while(GLF_live13texel.x + GLF_live13texel.y + GLF_live13texel.z > 1.0 && GLF_live13i < _GLF_IDENTITY(16, (16) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
#    {
#     if(GLF_live13_looplimiter0 >= 4)
#      {
#       break;
#      }
#     {
#      float GLF_live20grey = _GLF_FUZZED(21.61);
#      if(int(GLF_live20gl_FragCoord[1]) < 270)
#       {
#        GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#       }
#      else
#       {
#        1;
#       }
#     }
#     GLF_live13_looplimiter0 ++;
#     GLF_live13coord = GLF_live13texel.xz + GLF_live13texel.yy;
#     GLF_live13coord = floor(GLF_live13coord * 256.0) / 256.0;
#     GLF_live13texel = texture(GLF_live13tex, GLF_live13coord);
#     GLF_live13i ++;
#    }
#  }
#  int i = _GLF_IDENTITY(0, min(0, 0));
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  vec4 texel = texture(tex, coord);
#  while(_GLF_IDENTITY(_GLF_IDENTITY(texel.x + texel.y + texel.z > 1.0, bool(bool(texel.x + texel.y + texel.z > 1.0))), true && (_GLF_IDENTITY(texel.x + texel.y + texel.z > 1.0, bool(bool(_GLF_IDENTITY(texel, vec4(texel[0], _GLF_IDENTITY(texel[1], (true ? texel[1] : _GLF_FUZZED(length(_GLF_color)))), texel[2], texel[3])).x + texel.y + _GLF_IDENTITY(texel.z, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? texel.z : _GLF_FUZZED(697.885))) > 1.0))))) && i < 16)
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))))))
#     discard;
#    coord = texel.xz + texel.yy;
#    coord = floor(coord * 256.0) / 256.0;
#    texel = _GLF_IDENTITY(texture(tex, coord), min(_GLF_IDENTITY(texture(tex, coord), (texture(tex, coord)) * mat4(1.0)), texture(tex, coord)));
#    i ++;
#    if(_GLF_DEAD(false))
#     {
#      float donor_replacementGLF_dead0grey = _GLF_FUZZED(dot(cos(vec2(_GLF_IDENTITY(93.65, float(float(93.65))), -8.9)), vec2(-3.8, -24.31)));
#      if(int(_GLF_IDENTITY(_GLF_IDENTITY(GLF_dead0gl_FragCoord, mix(vec4((GLF_dead0gl_FragCoord)[0], (GLF_dead0gl_FragCoord)[1], (GLF_dead0gl_FragCoord)[2], _GLF_FUZZED(4.7)), vec4(_GLF_FUZZED(-7817.2637), _GLF_FUZZED(0.5), _GLF_FUZZED((-731.778 / 2.8)), (GLF_dead0gl_FragCoord)[3]), bvec4(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(GLF_dead0gl_FragCoord, mix(vec4((GLF_dead0gl_FragCoord)[0], (GLF_dead0gl_FragCoord)[1], (GLF_dead0gl_FragCoord)[2], _GLF_FUZZED(4.7)), vec4(_GLF_FUZZED(-7817.2637), _GLF_FUZZED(0.5), _GLF_FUZZED((-731.778 / 2.8)), (GLF_dead0gl_FragCoord)[3]), bvec4(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) - vec4(0.0, 0.0, 0.0, 0.0))[1]) < 210)
#       {
#        {
#         float GLF_live4z = _GLF_FUZZED(vec2(-8.4, 8.5).t);
#         {
#          int GLF_live9i = _GLF_FUZZED((GLF_dead0N / GLF_dead0N));
#          {
#           float GLF_live14th = _GLF_FUZZED(9.6);
#           vec2 GLF_live14a = _GLF_FUZZED(vec2(-84.76, -824.338));
#           if(GLF_live14a.y < GLF_live14a.x)
#            {
#             GLF_live14th = 0.5 - GLF_live14th;
#            }
#          }
#          float GLF_live9uvstep = _GLF_FUZZED(-557.217);
#          vec2 GLF_live9coord = _GLF_FUZZED(vec2(6.0, 14.87));
#          vec4 GLF_live9res = _GLF_FUZZED((+ vec4(7.7, -0.1, 1.8, -5.4)));
#          {
#           int GLF_live9_looplimiter0 = 0;
#           for(int GLF_live9j = 0; GLF_live9j < 3; GLF_live9j ++)
#            {
#             if(_GLF_IDENTITY(GLF_live9_looplimiter0, int(_GLF_IDENTITY(ivec3(GLF_live9_looplimiter0, 1, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(GLF_live9_looplimiter0, 0 | (_GLF_IDENTITY(GLF_live9_looplimiter0, max(GLF_live9_looplimiter0, GLF_live9_looplimiter0)))), 1, 0))))) >= 4)
#              {
#               break;
#               {
#                float GLF_live20grey = _GLF_FUZZED(2.1);
#                {
#                 GLF_live20grey = 0.5 + float(GLF_live20data[2]) / 10.0;
#                }
#               }
#              }
#             GLF_live9_looplimiter0 ++;
#             GLF_live9res += texture(GLF_live9tex, GLF_live9coord + vec2(_GLF_IDENTITY(float(GLF_live9i - 1), mix(float(float(GLF_live9i - 1)), float(_GLF_FUZZED((-9274.1719 + 310.300))), bool(false))) * GLF_live9uvstep, float(GLF_live9j - 1) * GLF_live9uvstep)) * GLF_live9weights[_GLF_MAKE_IN_BOUNDS_INT(_GLF_IDENTITY(GLF_live9i, (GLF_live9i) | (_GLF_IDENTITY(GLF_live9i, max(GLF_live9i, GLF_live9i)))) * 3 + GLF_live9j, 9)];
#             {
#              {
#               vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#               {
#                float GLF_live20grey = _GLF_FUZZED(-448.940);
#                if(int(GLF_live20gl_FragCoord[1]) < 240)
#                 {
#                  GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                 }
#                else
#                 {
#                  if(int(GLF_live20gl_FragCoord[1]) < 270)
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                   }
#                  else
#                   {
#                    1;
#                   }
#                 }
#               }
#               vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#               GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#               GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#              }
#             }
#            }
#           {
#            {
#             GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#            }
#           }
#          }
#         }
#         vec2 GLF_live4a = _GLF_IDENTITY(_GLF_FUZZED(vec2(13.28, -38.05)), clamp(_GLF_FUZZED(_GLF_IDENTITY(vec2(13.28, -38.05), (vec2(13.28, -38.05)) * mat2(1.0))), _GLF_IDENTITY(_GLF_FUZZED(vec2(13.28, -38.05)), clamp(_GLF_FUZZED(vec2(13.28, -38.05)), _GLF_FUZZED(vec2(13.28, -38.05)), _GLF_FUZZED(vec2(13.28, -38.05)))), _GLF_FUZZED(vec2(13.28, -38.05))));
#         {
#          {
#           {
#            1;
#           }
#          }
#          {
#           vec2 GLF_live12pos = GLF_live12gl_FragCoord.xy / GLF_live12resolution;
#           if(_GLF_IDENTITY(GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), vec2(0.5, 0.9), vec2(0.1, 0.4)) == 1, ! (! (GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), vec2(0.5, 0.9), vec2(0.1, 0.4)) == 1))))
#            {
#             GLF_live12_GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#             {
#              vec2 GLF_live17coord = _GLF_FUZZED(((vec2(2.3, 2954.7953) / -4445.4671) * vec2(5.7, -5.9)));
#              {
#               ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.6, 1.0)) * 256.0);
#               int GLF_live17v = (GLF_live17icoord.x ^ GLF_live17icoord.y) * GLF_live17icoord.y;
#               bool GLF_live17res1 = ((GLF_live17v >> 10) & 1) != 0;
#               bool GLF_live17res2 = ((GLF_live17v >> 11) & 4) != 0;
#               bool GLF_live17res3 = ((GLF_live17v >> 12) & 8) != 0;
#               GLF_live17_GLF_color = vec4(GLF_live17res1 ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4.8) : _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0)) : 0.0, GLF_live17res2 ? 1.0 : 0.0, GLF_live17res3 ? 1.0 : 0.0, 1);
#              }
#             }
#            }
#           else
#            {
#             GLF_live12_GLF_color = _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (vec4(0.0, 0.0, 0.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0));
#             {
#              {
#               {
#                int GLF_live20_looplimiter6 = 0;
#                for(int GLF_live20j = 0; GLF_live20j < 10; GLF_live20j ++)
#                 {
#                  if(GLF_live20_looplimiter6 >= 7)
#                   {
#                    break;
#                   }
#                  GLF_live20_looplimiter6 ++;
#                  GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)];
#                 }
#               }
#              }
#              int GLF_live19count = _GLF_FUZZED(2767);
#              int GLF_live19v = _GLF_FUZZED((GLF_dead0N << GLF_dead0N));
#              {
#               {
#                int GLF_live20mid = _GLF_FUZZED(-94431);
#                int GLF_live20i = _GLF_FUZZED(-52482);
#                int GLF_live20k = _GLF_FUZZED(int(false));
#                {
#                 int GLF_live20_looplimiter1 = 0;
#                 while(GLF_live20i < GLF_live20N && GLF_live20i <= GLF_live20mid)
#                  {
#                   if(GLF_live20_looplimiter1 >= 7)
#                    {
#                     break;
#                    }
#                   GLF_live20_looplimiter1 ++;
#                   GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                  }
#                }
#               }
#               int GLF_live19_looplimiter0 = 0;
#               while(GLF_live19v > 1)
#                {
#                 if(GLF_live19_looplimiter0 >= 6)
#                  {
#                   break;
#                  }
#                 GLF_live19_looplimiter0 ++;
#                 if((GLF_live19v & 1) == 1)
#                  {
#                   GLF_live19v = 3 * GLF_live19v + 1;
#                  }
#                 else
#                  {
#                   GLF_live19v /= 2;
#                  }
#                 GLF_live19count ++;
#                 {
#                  int GLF_live20_looplimiter6 = 0;
#                  if(GLF_live20_looplimiter6 >= 7)
#                   {
#                    1;
#                   }
#                 }
#                }
#              }
#             }
#            }
#          }
#         }
#         {
#          GLF_live4z = _GLF_IDENTITY(GLF_live4a.y, min(_GLF_IDENTITY(GLF_live4a.y, mix(float(_GLF_FUZZED(2.0)), float(GLF_live4a.y), bool(true))), GLF_live4a.y)) / GLF_live4a.x;
#         }
#        }
#        donor_replacementGLF_dead0grey = 0.5 + float(GLF_dead0data[6]) / 10.0;
#       }
#      else
#       {
#        if(int(GLF_dead0gl_FragCoord[1]) < 240)
#         {
#          {
#           int GLF_live20low = _GLF_FUZZED(-25210);
#           int GLF_live20high = _GLF_FUZZED(GLF_dead0N);
#           int GLF_live20m = _GLF_FUZZED((true ? -85293 : GLF_dead0N));
#           {
#            int GLF_live20_looplimiter3 = 0;
#            for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#             {
#              if(GLF_live20_looplimiter3 >= 7)
#               {
#                break;
#               }
#              GLF_live20_looplimiter3 ++;
#              int GLF_live20from = GLF_live20i;
#              int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#              int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#              GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#             }
#           }
#          }
#          donor_replacementGLF_dead0grey = 0.5 + float(GLF_dead0data[7]) / 10.0;
#         }
#        else
#         {
#          {
#           float GLF_live20grey = _GLF_FUZZED(float(127724u));
#           {
#            if(int(GLF_live20gl_FragCoord[1]) < 180)
#             {
#              GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#             }
#            else
#             {
#              if(int(GLF_live20gl_FragCoord[1]) < 210)
#               {
#                GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#               }
#              else
#               {
#                if(int(GLF_live20gl_FragCoord[1]) < 240)
#                 {
#                  GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                 }
#                else
#                 {
#                  if(int(GLF_live20gl_FragCoord[1]) < 270)
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                   }
#                  else
#                   {
#                    1;
#                   }
#                 }
#               }
#             }
#           }
#          }
#          if(int(GLF_dead0gl_FragCoord[1]) < 270)
#           {
#            donor_replacementGLF_dead0grey = 0.5 + float(GLF_dead0data[8]) / 10.0;
#            {
#             {
#              GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#             }
#            }
#           }
#          else
#           {
#            {
#             vec2 GLF_live2pos = _GLF_FUZZED(vec2(-3.0, 2.7));
#             int GLF_live2i = _GLF_IDENTITY(_GLF_FUZZED((GLF_dead0N * ((950.387 == 3.6) ? _GLF_IDENTITY(GLF_dead0N, int(ivec4(GLF_dead0N, 1, 1, 0))) : int(101840u)))), 0 | (_GLF_FUZZED((GLF_dead0N * ((950.387 == 3.6) ? GLF_dead0N : int(101840u))))));
#             vec4 GLF_live2res = _GLF_FUZZED((- vec4(vec2(-8.7, -294.997), -206.733, -3472.9235)));
#             {
#              int GLF_live2_looplimiter0 = 0;
#              {
#               {
#                GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#               }
#               {
#                int GLF_live20_looplimiter6 = 0;
#                int GLF_live20j = _GLF_FUZZED((75517 - -84019));
#                {
#                 if(GLF_live20_looplimiter6 >= 7)
#                  {
#                   1;
#                  }
#                 GLF_live20_looplimiter6 ++;
#                 GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)];
#                }
#               }
#              }
#              for(             GLF_live2i = 0;
#  GLF_live2i < 8; _GLF_IDENTITY(GLF_live2i ++, (_GLF_IDENTITY(GLF_live2i ++, (GLF_live2i ++) - 0)) << 0))
#               {
#                if(GLF_live2_looplimiter0 >= 6)
#                 {
#                  {
#                   {
#                    int GLF_live20_looplimiter3 = 0;
#                    int GLF_live20high = _GLF_FUZZED(GLF_dead0N);
#                    int GLF_live20m = _GLF_FUZZED(GLF_dead0N);
#                    int GLF_live20i = _GLF_FUZZED(GLF_dead0N);
#                    {
#                     if(GLF_live20_looplimiter3 >= 7)
#                      {
#                       1;
#                      }
#                     GLF_live20_looplimiter3 ++;
#                     int GLF_live20from = GLF_live20i;
#                     int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                     int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                     GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                    }
#                   }
#                   vec3 GLF_live5c = _GLF_FUZZED(vec3(1.0, 30.36, 9.0));
#                   {
#                    {
#                     vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                     vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                     GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                     GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                    }
#                   }
#                   int GLF_live5_looplimiter1 = 0;
#                   for(int GLF_live5i = 0; GLF_live5i < 3; GLF_live5i ++)
#                    {
#                     if(GLF_live5_looplimiter1 >= _GLF_IDENTITY(6, (_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, 0 ^ ((6) / 1)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
#                      {
#                       break;
#                      }
#                     _GLF_IDENTITY(GLF_live5_looplimiter1 ++, (GLF_live5_looplimiter1 ++) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))));
#                     {
#                      int GLF_live20_looplimiter2 = 0;
#                      int GLF_live20i = _GLF_FUZZED(GLF_dead0N);
#                      {
#                       if(GLF_live20_looplimiter2 >= 7)
#                        {
#                         1;
#                        }
#                       GLF_live20_looplimiter2 ++;
#                       GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)];
#                      }
#                     }
#                     if(GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)] >= _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(3.3)), float(1.0), bool(true))), 1.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(77.03)), bool(false))))))
#                      {
#                       _GLF_IDENTITY(GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)] = GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)] * GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)], (GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)] = GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)] * GLF_live5c[_GLF_MAKE_IN_BOUNDS_INT(GLF_live5i, 3)]) * 1.0);
#                      }
#                    }
#                  }
#                  {
#                   float GLF_live20grey = _GLF_FUZZED(6816.0748);
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[3]) / 10.0;
#                   }
#                  }
#                  break;
#                 }
#                GLF_live2_looplimiter0 ++;
#                if(_GLF_IDENTITY(GLF_live2collision(GLF_live2pos, GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)]), ! (! (GLF_live2collision(GLF_live2pos, GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)])))))
#                 {
#                  GLF_live2res = GLF_live2pal[_GLF_IDENTITY(_GLF_MAKE_IN_BOUNDS_INT((int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].x) * int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].y) + GLF_live2i * 9 + 11) % 16, 16), (_GLF_IDENTITY(_GLF_MAKE_IN_BOUNDS_INT((int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].x) * int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].y) + GLF_live2i * 9 + 11) % 16, 16), ~ (~ (_GLF_MAKE_IN_BOUNDS_INT((int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].x) * int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].y) + GLF_live2i * 9 + _GLF_IDENTITY(11, (11) ^ 0)) % 16, 16))))) + 0)];
#                  {
#                   {
#                    int GLF_live10target = _GLF_FUZZED(-32145);
#                    GLF_live10BST GLF_live10currentNode = _GLF_FUZZED(GLF_live10BST(GLF_dead0N, (-93081 + GLF_dead0N), (GLF_dead0N >> GLF_dead0N)));
#                    int GLF_live10index = _GLF_FUZZED(_GLF_IDENTITY(-66367, int(ivec4(_GLF_IDENTITY(-66367, (_GLF_IDENTITY(-66367, max(-66367, -66367))) | (-66367)), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), 0))));
#                    {
#                     int GLF_live10_looplimiter1 = 0;
#                     {
#                      int GLF_live13i = _GLF_FUZZED((-56706 / (-48025 * 29636)));
#                      vec2 GLF_live13coord = _GLF_FUZZED(vec2(-816.443, _GLF_IDENTITY(3926.8018, max(3926.8018, 3926.8018))));
#                      vec4 GLF_live13texel = _GLF_FUZZED(vec4(-5870.9972, -1.5, -81.90, 312.724));
#                      {
#                       int GLF_live13_looplimiter0 = 0;
#                       while(_GLF_IDENTITY(GLF_live13texel.x + GLF_live13texel.y + GLF_live13texel.z > 1.0 && GLF_live13i < 16, ! (! (GLF_live13texel.x + GLF_live13texel.y + GLF_live13texel.z > 1.0 && GLF_live13i < 16))))
#                        {
#                         if(GLF_live13_looplimiter0 >= 4)
#                          {
#                           break;
#                          }
#                         GLF_live13_looplimiter0 ++;
#                         GLF_live13coord = GLF_live13texel.xz + GLF_live13texel.yy;
#                         GLF_live13coord = floor(GLF_live13coord * 256.0) / 256.0;
#                         GLF_live13texel = texture(GLF_live13tex, GLF_live13coord);
#                         GLF_live13i ++;
#                        }
#                      }
#                     }
#                     while(GLF_live10index != - 1)
#                      {
#                       if(GLF_live10_looplimiter1 >= 7)
#                        {
#                         break;
#                        }
#                       {
#                        int GLF_live20mid = _GLF_FUZZED((~ GLF_dead0N));
#                        int GLF_live20i = _GLF_FUZZED(GLF_dead0N);
#                        int GLF_live20k = _GLF_FUZZED((GLF_dead0N / 53774));
#                        {
#                         int GLF_live20_looplimiter1 = 0;
#                         while(GLF_live20i < GLF_live20N && GLF_live20i <= GLF_live20mid)
#                          {
#                           if(GLF_live20_looplimiter1 >= 7)
#                            {
#                             break;
#                            }
#                           GLF_live20_looplimiter1 ++;
#                           GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                          }
#                        }
#                       }
#                       GLF_live10_looplimiter1 ++;
#                       GLF_live10currentNode = GLF_live10tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live10index, 10)];
#                       {
#                        int GLF_live13i = _GLF_FUZZED(-4873);
#                        {
#                         {
#                          float GLF_live20grey = _GLF_FUZZED((- (0.8 + 75.95)));
#                          {
#                           if(int(GLF_live20gl_FragCoord[1]) < 150)
#                            {
#                             1;
#                            }
#                           else
#                            {
#                             if(int(GLF_live20gl_FragCoord[1]) < 180)
#                              {
#                               GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#                              }
#                             else
#                              {
#                               if(int(GLF_live20gl_FragCoord[1]) < 210)
#                                {
#                                 GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                                }
#                               else
#                                {
#                                 if(int(GLF_live20gl_FragCoord[1]) < 240)
#                                  {
#                                   GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                                  }
#                                 else
#                                  {
#                                   if(int(GLF_live20gl_FragCoord[1]) < 270)
#                                    {
#                                     GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                                    }
#                                   else
#                                    {
#                                     1;
#                                    }
#                                  }
#                                }
#                              }
#                            }
#                          }
#                         }
#                         int GLF_live19count = _GLF_FUZZED((GLF_dead0N << (GLF_dead0N * GLF_dead0N)));
#                         int GLF_live19v = _GLF_FUZZED(-27417);
#                         {
#                          int GLF_live19_looplimiter0 = 0;
#                          while(GLF_live19v > 1)
#                           {
#                            if(GLF_live19_looplimiter0 >= 6)
#                             {
#                              break;
#                             }
#                            GLF_live19_looplimiter0 ++;
#                            if((GLF_live19v & 1) == 1)
#                             {
#                              GLF_live19v = 3 * GLF_live19v + 1;
#                             }
#                            else
#                             {
#                              GLF_live19v /= 2;
#                             }
#                            GLF_live19count ++;
#                           }
#                         }
#                        }
#                        vec2 GLF_live13coord = _GLF_FUZZED(vec2(-77.63, -43.21));
#                        vec4 GLF_live13texel = _GLF_FUZZED(vec4(1717.6864, -5.3, 4856.6473, -39.69));
#                        int GLF_live13_looplimiter0 = 0;
#                        {
#                         if(GLF_live13_looplimiter0 >= 4)
#                          {
#                           1;
#                          }
#                         GLF_live13_looplimiter0 ++;
#                         GLF_live13coord = GLF_live13texel.xz + GLF_live13texel.yy;
#                         GLF_live13coord = floor(GLF_live13coord * 256.0) / 256.0;
#                         {
#                          int GLF_live20_looplimiter1 = 0;
#                          int GLF_live20mid = _GLF_FUZZED(GLF_dead0N);
#                          int GLF_live20i = _GLF_FUZZED((GLF_dead0N % (- 21563)));
#                          int GLF_live20k = _GLF_FUZZED(ivec4(92624, 70060, 25010, -47523).r);
#                          while(GLF_live20i < GLF_live20N && GLF_live20i <= GLF_live20mid)
#                           {
#                            if(GLF_live20_looplimiter1 >= 7)
#                             {
#                              break;
#                             }
#                            GLF_live20_looplimiter1 ++;
#                            GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                           }
#                         }
#                         GLF_live13texel = texture(GLF_live13tex, GLF_live13coord);
#                         GLF_live13i ++;
#                        }
#                       }
#                       if(GLF_live10currentNode.data == GLF_live10target)
#                        {
#                         GLF_live10target;
#                         {
#                          int GLF_live15_looplimiter0 = 0;
#                          ivec2 GLF_live15pos = _GLF_FUZZED(ivec2(-77961, -13769));
#                          while(GLF_live15pos.y != 256)
#                           {
#                            if(GLF_live15_looplimiter0 >= 4)
#                             {
#                              break;
#                              {
#                               {
#                                1;
#                               }
#                              }
#                             }
#                            {
#                             vec2 GLF_live17coord = _GLF_FUZZED((vec2(1.6, 69.60) - vec2(85.52, -77.02)));
#                             {
#                              ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.6)) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#                              int GLF_live17res3 = (_GLF_IDENTITY((GLF_live17icoord.x >> 5) & 1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), clamp(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1)))), clamp(int(_GLF_IDENTITY(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), clamp(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1)))), int(_GLF_IDENTITY(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), clamp(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1)))), int(_GLF_IDENTITY(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), clamp(ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1), ivec4((GLF_live17icoord.x >> 5) & 1, (0 | 0), 0, 1)))))))) ^ ((GLF_live17icoord.y & 32) >> 5);
#                              int GLF_live17res2 = (GLF_live17icoord.y * GLF_live17icoord.y >> 10) & 1;
#                              int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#                              GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#                             }
#                            }
#                            {
#                             int GLF_live20_looplimiter4 = 0;
#                             int GLF_live20low = _GLF_FUZZED(((GLF_dead0N - GLF_dead0N) - (-650 ^ -12948)));
#                             int GLF_live20high = _GLF_FUZZED(GLF_dead0N);
#                             for(int GLF_live20m = 1; GLF_live20m <= GLF_live20high; GLF_live20m = 2 * GLF_live20m)
#                              {
#                               if(GLF_live20_looplimiter4 >= 7)
#                                {
#                                 break;
#                                }
#                               GLF_live20_looplimiter4 ++;
#                               {
#                                int GLF_live20_looplimiter3 = 0;
#                                for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#                                 {
#                                  if(GLF_live20_looplimiter3 >= 7)
#                                   {
#                                    break;
#                                   }
#                                  GLF_live20_looplimiter3 ++;
#                                  int GLF_live20from = GLF_live20i;
#                                  int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                                  int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                                  GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                                 }
#                               }
#                              }
#                            }
#                            GLF_live15_looplimiter0 ++;
#                            if(GLF_live15pos.x < GLF_live15dp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live15pos.y, 256)] + 15 && GLF_live15pos.x > GLF_live15dp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live15pos.y, 256)] - 15)
#                             {
#                              {
#                               {
#                                GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#                               }
#                              }
#                              float GLF_live15p = (_GLF_IDENTITY(15.0 - abs(_GLF_IDENTITY(float(GLF_live15pos.x - GLF_live15dp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live15pos.y, 256)]), mix(float(float(GLF_live15pos.x - GLF_live15dp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live15pos.y, 256)])), float(_GLF_FUZZED(462.500)), bool(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)))))), mix(float(15.0 - abs(float(GLF_live15pos.x - GLF_live15dp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live15pos.y, 256)]))), float(_GLF_FUZZED(-6.6)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), ! (! (_GLF_IDENTITY(! (bool(false)), (! (bool(false))) && true))))))))) / 15.0;
#                              vec4(GLF_live15p, GLF_live15p, GLF_live15p, 1.0);
#                             }
#                            GLF_live15pos.y ++;
#                           }
#                         }
#                        }
#                       {
#                        {
#                         float GLF_live20grey = _GLF_FUZZED(27.61);
#                         {
#                          if(int(GLF_live20gl_FragCoord[1]) < 60)
#                           {
#                            GLF_live20grey = 0.5 + float(GLF_live20data[1]) / 10.0;
#                           }
#                          else
#                           {
#                            if(int(GLF_live20gl_FragCoord[1]) < 90)
#                             {
#                              GLF_live20grey = 0.5 + float(GLF_live20data[2]) / 10.0;
#                             }
#                            else
#                             {
#                              if(int(GLF_live20gl_FragCoord[1]) < 120)
#                               {
#                                GLF_live20grey = 0.5 + float(GLF_live20data[3]) / 10.0;
#                               }
#                              else
#                               {
#                                if(int(GLF_live20gl_FragCoord[1]) < 150)
#                                 {
#                                  1;
#                                 }
#                                else
#                                 {
#                                  if(int(GLF_live20gl_FragCoord[1]) < 180)
#                                   {
#                                    GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#                                   }
#                                  else
#                                   {
#                                    if(int(GLF_live20gl_FragCoord[1]) < 210)
#                                     {
#                                      GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                                     }
#                                    else
#                                     {
#                                      if(int(GLF_live20gl_FragCoord[1]) < 240)
#                                       {
#                                        GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                                       }
#                                      else
#                                       {
#                                        if(int(GLF_live20gl_FragCoord[1]) < 270)
#                                         {
#                                          GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                                         }
#                                        else
#                                         {
#                                          1;
#                                         }
#                                       }
#                                     }
#                                   }
#                                 }
#                               }
#                             }
#                           }
#                         }
#                        }
#                        {
#                         GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#                        }
#                       }
#                       GLF_live10index = GLF_live10target > GLF_live10currentNode.data ? GLF_live10currentNode.rightIndex : GLF_live10currentNode.leftIndex;
#                      }
#                    }
#                   }
#                   {
#                    _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(7), int(7))) ^ (1));
#                   }
#                  }
#                 }
#               }
#             }
#            }
#            {
#             float GLF_live0data[10] = _GLF_FUZZED(float[10](-49.06, -6.1, -2.6, -0.0, -2421.2162, (394.914 / 5.5), float(GLF_dead0N), ((-442.667 != 7165.7186) ? -9380.3435 : (true ? 7.7 : 2.5)), -6.1, -2421.2162));
#             {
#              {
#               1;
#              }
#             }
#             if(_GLF_IDENTITY(GLF_live0gl_FragCoord.x < GLF_live0resolution.x / 2.0, true && (GLF_live0gl_FragCoord.x < GLF_live0resolution.x / 2.0)))
#              {
#               GLF_live0_GLF_color = vec4(GLF_live0data[0] / 10.0, GLF_live0data[5] / 10.0, _GLF_IDENTITY(GLF_live0data[9], _GLF_IDENTITY((true ? _GLF_IDENTITY(GLF_live0data[_GLF_IDENTITY(9, (true ? 9 : _GLF_FUZZED(GLF_dead0N)))], (true ? GLF_live0data[9] : _GLF_FUZZED(-9.0))) : _GLF_FUZZED(length(GLF_live0gl_FragCoord))), ((true ? _GLF_IDENTITY(GLF_live0data[9], (true ? GLF_live0data[9] : _GLF_FUZZED(-9.0))) : _GLF_FUZZED(length(GLF_live0gl_FragCoord)))) - 0.0)) / 10.0, 1.0);
#               {
#                int GLF_live7v = _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(-31027, -14394, -26154).s, 0 + (ivec3(-31027, -14394, -26154).s)), (0 >> _GLF_IDENTITY(int(3), int(3))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(-31027, -14394, -26154).s, 0 + (ivec3(-31027, -14394, -26154).s)), max(_GLF_IDENTITY(ivec3(-31027, -14394, -26154).s, 0 + (ivec3(-31027, -14394, -26154).s)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(-31027, _GLF_IDENTITY(-14394, max(-14394, -14394)), -26154).s, 0 + (ivec3(-31027, -14394, -26154).s)), (_GLF_IDENTITY(ivec3(-31027, -14394, -26154).s, _GLF_IDENTITY(0, (0) ^ 0) + (ivec3(-31027, -14394, -26154).s))) | 0))))));
#                int GLF_live7i = _GLF_FUZZED(GLF_dead0N);
#                int GLF_live7iters = _GLF_FUZZED(GLF_dead0N);
#                {
#                 int GLF_live7_looplimiter0 = 0;
#                 for(                GLF_live7i = 0;
#  GLF_live7i < GLF_live7iters; GLF_live7i ++)
#                  {
#                   if(_GLF_IDENTITY(GLF_live7_looplimiter0 >= 4, (GLF_live7_looplimiter0 >= 4) && true))
#                    {
#                     break;
#                    }
#                   GLF_live7_looplimiter0 ++;
#                   {
#                    int GLF_live20to = _GLF_FUZZED((~ GLF_dead0N));
#                    int GLF_live20mid = _GLF_FUZZED(ivec3(-25771, -85004, -27250).b);
#                    int GLF_live20from = _GLF_FUZZED(int(176204u));
#                    {
#                     int GLF_live20k = GLF_live20from, GLF_live20i = GLF_live20from, GLF_live20j = GLF_live20mid + 1;
#                     {
#                      int GLF_live20_looplimiter0 = 0;
#                      while(GLF_live20i <= GLF_live20mid && GLF_live20j <= GLF_live20to)
#                       {
#                        if(GLF_live20_looplimiter0 >= 7)
#                         {
#                          break;
#                         }
#                        GLF_live20_looplimiter0 ++;
#                        if(GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] < GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)])
#                         {
#                          GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                         }
#                        else
#                         {
#                          GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j ++, 10)];
#                         }
#                       }
#                     }
#                     {
#                      int GLF_live20_looplimiter1 = 0;
#                      while(GLF_live20i < GLF_live20N && GLF_live20i <= GLF_live20mid)
#                       {
#                        if(GLF_live20_looplimiter1 >= 7)
#                         {
#                          break;
#                         }
#                        GLF_live20_looplimiter1 ++;
#                        GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                       }
#                     }
#                     {
#                      int GLF_live20_looplimiter2 = 0;
#                      for(int GLF_live20i = GLF_live20from; GLF_live20i <= GLF_live20to; GLF_live20i ++)
#                       {
#                        if(GLF_live20_looplimiter2 >= 7)
#                         {
#                          break;
#                         }
#                        GLF_live20_looplimiter2 ++;
#                        GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)];
#                       }
#                     }
#                    }
#                   }
#                   GLF_live7v = (4 * GLF_live7v * (1000 - GLF_live7v)) / 1000;
#                  }
#                 {
#                  float GLF_live14th = _GLF_FUZZED(float(48433));
#                  vec2 GLF_live14a = _GLF_FUZZED(vec2(4.1, -824.721));
#                  if(_GLF_IDENTITY(GLF_live14a.y, max(GLF_live14a.y, GLF_live14a.y)) < GLF_live14a.x)
#                   {
#                    GLF_live14th = 0.5 - GLF_live14th;
#                   }
#                  {
#                   float GLF_live20grey = _GLF_FUZZED((false ? 198.356 : vec4(696.750, 38.26, 5.1, -0.9).p));
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[0]) / 10.0;
#                   }
#                  }
#                 }
#                 {
#                  vec2 GLF_live17coord = _GLF_FUZZED(vec2(-4.4, -4464.6592));
#                  if(GLF_live17coord.y < 0.6)
#                   {
#                    uvec2 GLF_live17icoord = uvec2(((_GLF_IDENTITY(GLF_live17coord, vec2(1.0, 1.0) * (_GLF_IDENTITY(GLF_live17coord, vec2(0.0, 0.0) + (_GLF_IDENTITY(GLF_live17coord, min(GLF_live17coord, GLF_live17coord)))))) - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0);
#                    uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#                    uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#                    float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#                    GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#                   }
#                  else
#                   {
#                    ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - _GLF_IDENTITY(vec2(0.4, 0.6), min(_GLF_IDENTITY(vec2(0.4, 0.6), max(vec2(0.4, 0.6), vec2(0.4, 0.6))), vec2(0.4, 0.6)))) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#                    int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#                    int GLF_live17res2 = (GLF_live17icoord.y * GLF_live17icoord.y >> 10) & 1;
#                    int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#                    GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#                   }
#                 }
#                 {
#                  float GLF_live20grey = _GLF_FUZZED(-358.031);
#                  if(int(GLF_live20gl_FragCoord[1]) < 60)
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[1]) / 10.0;
#                   }
#                  else
#                   {
#                    if(int(GLF_live20gl_FragCoord[1]) < 90)
#                     {
#                      GLF_live20grey = 0.5 + float(GLF_live20data[2]) / 10.0;
#                     }
#                    else
#                     {
#                      if(int(GLF_live20gl_FragCoord[1]) < 120)
#                       {
#                        GLF_live20grey = 0.5 + float(GLF_live20data[3]) / 10.0;
#                       }
#                      else
#                       {
#                        if(int(GLF_live20gl_FragCoord[1]) < 150)
#                         {
#                          1;
#                         }
#                        else
#                         {
#                          if(int(GLF_live20gl_FragCoord[1]) < 180)
#                           {
#                            GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#                           }
#                          else
#                           {
#                            if(int(GLF_live20gl_FragCoord[1]) < 210)
#                             {
#                              GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                             }
#                            else
#                             {
#                              if(int(GLF_live20gl_FragCoord[1]) < 240)
#                               {
#                                GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                               }
#                              else
#                               {
#                                if(int(GLF_live20gl_FragCoord[1]) < 270)
#                                 {
#                                  GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                                 }
#                                else
#                                 {
#                                  1;
#                                 }
#                               }
#                             }
#                           }
#                         }
#                       }
#                     }
#                   }
#                 }
#                }
#               }
#               {
#                vec2 GLF_live12pos = _GLF_FUZZED((vec2(3.3, -4237.5123) / -1377.9742));
#                {
#                 {
#                  vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                  vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                  GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                  GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                 }
#                }
#                if(GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), vec2(0.5, 0.9), vec2(0.1, 0.4)) == 1)
#                 {
#                  GLF_live12_GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#                 }
#                else
#                 {
#                  GLF_live12_GLF_color = vec4(0.0, 0.0, 0.0, 1.0);
#                 }
#                {
#                 {
#                  1;
#                 }
#                }
#               }
#               {
#                {
#                 {
#                  vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                  vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                  GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                  GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                 }
#                }
#                int GLF_live11_looplimiter1 = 0;
#                if(GLF_live11_looplimiter1 >= 5)
#                 {
#                  1;
#                 }
#               }
#               {
#                int GLF_live19v = _GLF_FUZZED((28730 >> -60459));
#                {
#                 int GLF_live20_looplimiter3 = 0;
#                 int GLF_live20high = _GLF_FUZZED((+ GLF_dead0N));
#                 int GLF_live20m = _GLF_FUZZED(GLF_dead0N);
#                 int GLF_live20i = _GLF_FUZZED(-48916);
#                 {
#                  if(GLF_live20_looplimiter3 >= 7)
#                   {
#                    1;
#                   }
#                  GLF_live20_looplimiter3 ++;
#                  int GLF_live20from = GLF_live20i;
#                  int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                  int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                  GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                 }
#                }
#                {
#                 {
#                  int GLF_live20to = _GLF_FUZZED((GLF_dead0N * 99706));
#                  int GLF_live20_looplimiter2 = 0;
#                  int GLF_live20from = _GLF_FUZZED(60587);
#                  for(int GLF_live20i = GLF_live20from; GLF_live20i <= GLF_live20to; GLF_live20i ++)
#                   {
#                    if(GLF_live20_looplimiter2 >= 7)
#                     {
#                      break;
#                     }
#                    GLF_live20_looplimiter2 ++;
#                    GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)];
#                   }
#                 }
#                 GLF_live19v = 3 * GLF_live19v + 1;
#                }
#               }
#              }
#             else
#              {
#               GLF_live0_GLF_color = vec4(GLF_live0data[_GLF_IDENTITY(5, ~ (~ (5)))] / 10.0, _GLF_IDENTITY(GLF_live0data[9] / 10.0, (GLF_live0data[9] / 10.0) + 0.0), _GLF_IDENTITY(GLF_live0data[0], float(mat3x4(GLF_live0data[0], 1.0, sqrt(1.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, abs(1.0), 1.0, 1.0, 1.0, 1.0))) / 10.0, 1.0);
#              }
#            }
#            {
#             {
#              vec2 GLF_live6uvstep = _GLF_FUZZED(vec2(-22.69, 38.77));
#              {
#               int GLF_live20low = _GLF_FUZZED(GLF_dead0N);
#               int GLF_live20high = _GLF_FUZZED((GLF_dead0N >> -92090));
#               int GLF_live20m = _GLF_FUZZED(GLF_dead0N);
#               {
#                int GLF_live20_looplimiter3 = 0;
#                for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#                 {
#                  if(GLF_live20_looplimiter3 >= 7)
#                   {
#                    break;
#                   }
#                  GLF_live20_looplimiter3 ++;
#                  int GLF_live20from = GLF_live20i;
#                  int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                  int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                  GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                 }
#               }
#              }
#              int GLF_live6i = _GLF_IDENTITY(_GLF_FUZZED(-11500), (_GLF_FUZZED(-11500)) ^ (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) + 0)));
#              float GLF_live6h = _GLF_FUZZED(45.07);
#              int GLF_live6_looplimiter0 = 0;
#              float GLF_live6slope = _GLF_FUZZED(vec2(5.7, -25.38).g);
#              {
#               {
#                int GLF_live20_looplimiter3 = 0;
#                if(GLF_live20_looplimiter3 >= 7)
#                 {
#                  1;
#                 }
#               }
#               {
#                vec2 GLF_live12pos = _GLF_IDENTITY(GLF_live12gl_FragCoord, (GLF_live12gl_FragCoord) + vec4(0.0, 0.0, 0.0, 0.0)).xy / GLF_live12resolution;
#                if(GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), _GLF_IDENTITY(vec2(0.5, 0.9), exp(vec2(0.0, 0.0)) * (vec2(0.5, 0.9))), vec2(0.1, 0.4)) == 1)
#                 {
#                  GLF_live12_GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#                 }
#                else
#                 {
#                  GLF_live12_GLF_color = vec4(0.0, 0.0, 0.0, 1.0);
#                 }
#               }
#              }
#              {
#               {
#                {
#                 int GLF_live19v = _GLF_FUZZED((10545 - 21904));
#                 {
#                  GLF_live19v /= 2;
#                 }
#                }
#                {
#                 0.0;
#                 {
#                  int GLF_live20_looplimiter1 = 0;
#                  int GLF_live20i = _GLF_FUZZED(-74820);
#                  int GLF_live20k = _GLF_FUZZED((+ (~ -74495)));
#                  {
#                   if(GLF_live20_looplimiter1 >= 7)
#                    {
#                     1;
#                    }
#                   GLF_live20_looplimiter1 ++;
#                   GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#                  }
#                 }
#                }
#               }
#               int GLF_live8directions = _GLF_FUZZED(ivec2(-4412, 62861).g);
#               ivec2 GLF_live8p = _GLF_FUZZED(ivec2(-28277, -12249));
#               if(_GLF_IDENTITY(GLF_live8p.x, ~ (~ _GLF_IDENTITY((GLF_live8p.x), clamp((GLF_live8p.x), (GLF_live8p.x), (GLF_live8p.x))))) > 0 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x - 2) + (GLF_live8p.y) * 16, 256)] == 0)
#                {
#                 GLF_live8directions += 1;
#                 {
#                  int GLF_live20low = _GLF_FUZZED(GLF_dead0N);
#                  int GLF_live20high = _GLF_FUZZED((-43471 + (+ 46108)));
#                  int GLF_live20m = _GLF_FUZZED(GLF_dead0N);
#                  {
#                   int GLF_live20_looplimiter3 = 0;
#                   for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#                    {
#                     if(GLF_live20_looplimiter3 >= 7)
#                      {
#                       break;
#                      }
#                     GLF_live20_looplimiter3 ++;
#                     int GLF_live20from = GLF_live20i;
#                     int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                     int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                     GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                    }
#                  }
#                 }
#                }
#              }
#              vec2 GLF_live6coord = _GLF_FUZZED(vec2(vec4(_GLF_IDENTITY(-6889.1234, (-6889.1234) - 0.0), 0.2, -0.8, -1765.2046)));
#              float GLF_live6refh = _GLF_FUZZED(_GLF_IDENTITY(-3.9, (true ? -3.9 : _GLF_FUZZED(GLF_live6h))));
#              {
#               if(_GLF_IDENTITY(GLF_live6_looplimiter0, (GLF_live6_looplimiter0) | 0) >= 5)
#                {
#                 1;
#                }
#               {
#                {
#                 vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                 {
#                  {
#                   1;
#                  }
#                 }
#                 vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                 GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                 GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                 {
#                  float GLF_live20grey = _GLF_FUZZED(vec2(664.703, 92.07).s);
#                  if(int(GLF_live20gl_FragCoord[1]) < 210)
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                   }
#                  else
#                   {
#                    if(int(GLF_live20gl_FragCoord[1]) < 240)
#                     {
#                      GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                     }
#                    else
#                     {
#                      if(int(GLF_live20gl_FragCoord[1]) < 270)
#                       {
#                        GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                       }
#                      else
#                       {
#                        1;
#                       }
#                     }
#                   }
#                 }
#                }
#               }
#               {
#                int GLF_live10target = _GLF_FUZZED(GLF_dead0N);
#                int GLF_live10_looplimiter1 = 0;
#                GLF_live10BST GLF_live10currentNode = _GLF_FUZZED(GLF_live10BST(_GLF_IDENTITY(GLF_dead0N, (_GLF_IDENTITY(GLF_dead0N, (GLF_dead0N) / 1)) ^ 0), GLF_dead0N, 60306));
#                int GLF_live10index = _GLF_FUZZED(int(-1.4));
#                {
#                 {
#                  vec2 GLF_live14coord = GLF_live14gl_FragCoord.xy * (1.0 / 256.0);
#                  _GLF_IDENTITY(GLF_live14coord = GLF_live14polarize(GLF_live14coord), (true ? GLF_live14coord = GLF_live14polarize(GLF_live14coord) : _GLF_FUZZED(vec2(-7020.2750, -420.590))));
#                  {
#                   float GLF_live20grey = _GLF_FUZZED(((73.23 / -0.7)));
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[0]) / 10.0;
#                   }
#                  }
#                  GLF_live14coord = floor(GLF_live14coord * 256.0) / 256.0;
#                  GLF_live14_GLF_color = vec4(texture(GLF_live14tex, GLF_live14coord).xyz, 1.0);
#                 }
#                 {
#                  {
#                   1;
#                  }
#                 }
#                }
#                {
#                 {
#                  int GLF_live20low = _GLF_FUZZED(3100);
#                  int GLF_live20high = _GLF_FUZZED((-99974 % 47484));
#                  {
#                   int GLF_live20_looplimiter4 = 0;
#                   for(int GLF_live20m = 1; GLF_live20m <= GLF_live20high; GLF_live20m = 2 * GLF_live20m)
#                    {
#                     if(GLF_live20_looplimiter4 >= 7)
#                      {
#                       break;
#                      }
#                     GLF_live20_looplimiter4 ++;
#                     {
#                      int GLF_live20_looplimiter3 = 0;
#                      for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#                       {
#                        if(GLF_live20_looplimiter3 >= 7)
#                         {
#                          break;
#                         }
#                        GLF_live20_looplimiter3 ++;
#                        int GLF_live20from = GLF_live20i;
#                        int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                        int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                        GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                       }
#                     }
#                    }
#                  }
#                 }
#                 if(GLF_live10_looplimiter1 >= 7)
#                  {
#                   1;
#                  }
#                 GLF_live10_looplimiter1 ++;
#                 GLF_live10currentNode = GLF_live10tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live10index, 10)];
#                 if(GLF_live10currentNode.data == GLF_live10target)
#                  {
#                   GLF_live10target;
#                  }
#                 GLF_live10index = GLF_live10target > GLF_live10currentNode.data ? GLF_live10currentNode.rightIndex : GLF_live10currentNode.leftIndex;
#                }
#                {
#                 float GLF_live20grey = _GLF_FUZZED((- -8103.4002));
#                 if(int(GLF_live20gl_FragCoord[1]) < 150)
#                  {
#                   1;
#                  }
#                 else
#                  {
#                   if(int(GLF_live20gl_FragCoord[1]) < 180)
#                    {
#                     GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#                    }
#                   else
#                    {
#                     if(int(GLF_live20gl_FragCoord[1]) < 210)
#                      {
#                       GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                      }
#                     else
#                      {
#                       if(int(GLF_live20gl_FragCoord[1]) < 240)
#                        {
#                         GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                        }
#                       else
#                        {
#                         if(int(GLF_live20gl_FragCoord[1]) < 270)
#                          {
#                           GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                          }
#                         else
#                          {
#                           1;
#                          }
#                        }
#                      }
#                    }
#                  }
#                }
#               }
#               GLF_live6_looplimiter0 ++;
#               {
#                int GLF_live20_looplimiter5 = 0;
#                if(GLF_live20_looplimiter5 >= 7)
#                 {
#                  1;
#                 }
#               }
#               GLF_live6coord -= GLF_live6uvstep;
#               _GLF_IDENTITY(GLF_live6refh += GLF_live6slope, (GLF_live6refh += GLF_live6slope) / 1.0);
#               GLF_live6h = texture(GLF_live6tex, GLF_live6coord).y;
#               GLF_live6i ++;
#              }
#             }
#             vec3 GLF_live3color = _GLF_FUZZED((_GLF_IDENTITY(mat3(5138.2521, -7302.6095, 85.01, 2.2, 5.3, 2.3, -919.213, 300.483, -7403.3832) * (1216.3395 - vec3(-0.5, _GLF_IDENTITY(-8310.5892, float(vec3(-8310.5892, abs(0.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, cos(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0))))), -7.3)), (mat3(5138.2521, -7302.6095, 85.01, 2.2, 5.3, 2.3, -919.213, 300.483, -7403.3832) * (_GLF_IDENTITY(1216.3395 - vec3(-0.5, -8310.5892, -7.3), clamp(1216.3395 - vec3(-0.5, -8310.5892, -7.3), 1216.3395 - vec3(-0.5, -8310.5892, -7.3), 1216.3395 - vec3(-0.5, -8310.5892, -7.3))))) / vec3(1.0, 1.0, 1.0))));
#             {
#              GLF_live3color.x += float(GLF_live3obj.numbers[1]);
#              {
#               float GLF_live20grey = _GLF_FUZZED((true ? 4705.1530 : 7.1));
#               {
#                if(int(GLF_live20gl_FragCoord[1]) < 240)
#                 {
#                  GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                 }
#                else
#                 {
#                  if(int(GLF_live20gl_FragCoord[1]) < 270)
#                   {
#                    GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                   }
#                  else
#                   {
#                    1;
#                   }
#                 }
#               }
#              }
#              {
#               {
#                1;
#               }
#               {
#                {
#                 {
#                  1;
#                 }
#                }
#                int GLF_live10_looplimiter0 = 0;
#                if(GLF_live10_looplimiter0 >= 7)
#                 {
#                  1;
#                 }
#               }
#              }
#             }
#            }
#            discard;
#            {
#             int GLF_live8i = _GLF_FUZZED(_GLF_IDENTITY(GLF_dead0N, (GLF_dead0N) ^ 0));
#             vec2 GLF_live8pos = _GLF_FUZZED((vec2(-4317.3830, -6220.4586) * mat2(-9.1, 457.794, _GLF_IDENTITY(9.5, min(9.5, 9.5)), 2.1)));
#             int GLF_live8v = _GLF_FUZZED(ivec2(56650, 67172).t);
#             bool GLF_live8canwalk = _GLF_FUZZED((_GLF_IDENTITY(170934u, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(170934u, (_GLF_IDENTITY(170934u, (true ? 170934u : _GLF_FUZZED(94326u)))) >> 0u))) == 153266u));
#             ivec2 GLF_live8p = _GLF_FUZZED(ivec2(46113, 8823));
#             {
#              int GLF_live20_looplimiter4 = 0;
#              if(GLF_live20_looplimiter4 >= 7)
#               {
#                1;
#               }
#             }
#             {
#              {
#               float GLF_live20grey = _GLF_FUZZED((-8598.3002 / 851.431));
#               {
#                if(int(GLF_live20gl_FragCoord[1]) < 120)
#                 {
#                  GLF_live20grey = 0.5 + float(GLF_live20data[3]) / 10.0;
#                 }
#                else
#                 {
#                  if(int(GLF_live20gl_FragCoord[1]) < 150)
#                   {
#                    1;
#                   }
#                  else
#                   {
#                    if(int(GLF_live20gl_FragCoord[1]) < 180)
#                     {
#                      GLF_live20grey = 0.5 + float(GLF_live20data[5]) / 10.0;
#                     }
#                    else
#                     {
#                      if(int(GLF_live20gl_FragCoord[1]) < 210)
#                       {
#                        GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                       }
#                      else
#                       {
#                        if(int(GLF_live20gl_FragCoord[1]) < 240)
#                         {
#                          GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                         }
#                        else
#                         {
#                          if(int(GLF_live20gl_FragCoord[1]) < 270)
#                           {
#                            GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                           }
#                          else
#                           {
#                            1;
#                           }
#                         }
#                       }
#                     }
#                   }
#                 }
#               }
#              }
#              int GLF_live19v = _GLF_FUZZED((-6288 / int(187982u)));
#              {
#               GLF_live19v /= 2;
#              }
#             }
#             ivec2 GLF_live8ipos = _GLF_FUZZED((ivec2(-19880, -98658) ^ ivec2(-64518, -51594)));
#             {
#              int GLF_live8_looplimiter3 = 0;
#              do
#               {
#                if(GLF_live8_looplimiter3 >= 3)
#                 {
#                  {
#                   {
#                    1;
#                   }
#                  }
#                  break;
#                  {
#                   {
#                    vec2 GLF_live17coord = vec2(GLF_live17gl_FragCoord.xy) * (1.0 / 256.0);
#                    if(GLF_live17coord.x > 0.4)
#                     {
#                      if(GLF_live17coord.y < 0.6)
#                       {
#                        uvec2 GLF_live17icoord = uvec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0);
#                        uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#                        uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & 0xffffffffu);
#                        float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#                        GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#                       }
#                      else
#                       {
#                        {
#                         int GLF_live20i = _GLF_FUZZED(GLF_dead0N);
#                         {
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = 4;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = 3;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = 2;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = 1;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = 0;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = - 1;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = - 2;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = - 3;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = - 4;
#                          1;
#                          1;
#                          GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] = - 5;
#                          1;
#                         }
#                        }
#                        ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.6)) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#                        int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#                        int GLF_live17res2 = (GLF_live17icoord.y * GLF_live17icoord.y >> 10) & 1;
#                        int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#                        GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#                       }
#                     }
#                    else
#                     {
#                      ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.6, 1.0)) * 256.0);
#                      int GLF_live17v = (GLF_live17icoord.x ^ GLF_live17icoord.y) * GLF_live17icoord.y;
#                      bool GLF_live17res1 = ((GLF_live17v >> 10) & 1) != 0;
#                      bool GLF_live17res2 = ((GLF_live17v >> 11) & 4) != 0;
#                      bool GLF_live17res3 = ((GLF_live17v >> 12) & 8) != 0;
#                      GLF_live17_GLF_color = vec4(GLF_live17res1 ? 1.0 : 0.0, GLF_live17res2 ? 1.0 : 0.0, GLF_live17res3 ? 1.0 : 0.0, 1);
#                     }
#                   }
#                  }
#                 }
#                GLF_live8_looplimiter3 ++;
#                GLF_live8v ++;
#                int GLF_live8directions = 0;
#                if(GLF_live8p.x > 0 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT(_GLF_IDENTITY((GLF_live8p.x - 2) + (GLF_live8p.y) * 16, min((GLF_live8p.x - 2) + (GLF_live8p.y) * 16, (GLF_live8p.x - 2) + (GLF_live8p.y) * 16)), 256)] == 0)
#                 {
#                  {
#                   {
#                    0;
#                   }
#                  }
#                  GLF_live8directions += 1;
#                 }
#                if(_GLF_IDENTITY(GLF_live8p, (GLF_live8p) * ivec2(1, 1)).y > 0 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT(_GLF_IDENTITY((GLF_live8p.x), (0 | 0) ^ ((GLF_live8p.x))) + (GLF_live8p.y - 2) * 16, 256)] == _GLF_IDENTITY(0, int(int(0))))
#                 {
#                  GLF_live8directions += 1;
#                 }
#                if(GLF_live8p.x < 14 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x + 2) + (GLF_live8p.y) * 16, 256)] == 0)
#                 {
#                  {
#                   {
#                    1;
#                   }
#                  }
#                  GLF_live8directions += 1;
#                 }
#                if(GLF_live8p.y < 14 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y + 2) * _GLF_IDENTITY(16, (16) >> _GLF_IDENTITY(0, (0) + 0)), 256)] == 0)
#                 {
#                  GLF_live8directions += 1;
#                 }
#                if(GLF_live8directions == 0)
#                 {
#                  GLF_live8canwalk = false;
#                  int GLF_live8j = _GLF_FUZZED(findLSB(packHalf2x16(GLF_live8pos)));
#                  {
#                   vec2 GLF_live12pos = _GLF_FUZZED(vec2(-41.66, _GLF_IDENTITY(3.6, (_GLF_IDENTITY(3.6, float(mat3x4(3.6, 0.0, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 1.0, 0.0)))) / determinant(mat3(1.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))))));
#                   {
#                    {
#                     vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                     vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                     GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                     GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                    }
#                   }
#                   if(GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), vec2(0.5, 0.9), vec2(0.1, 0.4)) == 1)
#                    {
#                     GLF_live12_GLF_color = vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))));
#                    }
#                   else
#                    {
#                     GLF_live12_GLF_color = vec4(0.0, 0.0, 0.0, 1.0);
#                    }
#                  }
#                  {
#                   int GLF_live8_looplimiter2 = 0;
#                   for(                  GLF_live8i = 0;
#  GLF_live8i < 8; GLF_live8i ++)
#                    {
#                     if(GLF_live8_looplimiter2 >= 3)
#                      {
#                       break;
#                       {
#                        {
#                         vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                         vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, _GLF_IDENTITY(0.25, min(0.25, 0.25)));
#                         GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                         _GLF_IDENTITY(GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse), (true ? GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse) : _GLF_FUZZED(GLF_live0gl_FragCoord)));
#                        }
#                       }
#                       {
#                        int GLF_live20_looplimiter6 = 0;
#                        for(int GLF_live20j = 0; GLF_live20j < 10; GLF_live20j ++)
#                         {
#                          if(GLF_live20_looplimiter6 >= 7)
#                           {
#                            break;
#                           }
#                          GLF_live20_looplimiter6 ++;
#                          GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)];
#                         }
#                       }
#                      }
#                     GLF_live8_looplimiter2 ++;
#                     {
#                      int GLF_live8_looplimiter1 = 0;
#                      {
#                       int GLF_live19v = _GLF_FUZZED((GLF_dead0N | (GLF_dead0N * GLF_dead0N)));
#                       if((GLF_live19v & 1) == 1)
#                        {
#                         GLF_live19v = 3 * GLF_live19v + 1;
#                        }
#                       else
#                        {
#                         GLF_live19v /= 2;
#                        }
#                      }
#                      for(                     GLF_live8j = 0;
#  GLF_live8j < 8; GLF_live8j ++)
#                       {
#                        if(GLF_live8_looplimiter1 >= 3)
#                         {
#                          {
#                           int GLF_live13i = _GLF_FUZZED(GLF_dead0N);
#                           vec2 GLF_live13coord = _GLF_FUZZED(vec2(4823.7025, 0.3));
#                           vec4 GLF_live13texel = _GLF_FUZZED((4.6 + vec4(7430.0371, vec2(-2.3, -691.102), 5083.7071)));
#                           int GLF_live13_looplimiter0 = 0;
#                           {
#                            if(GLF_live13_looplimiter0 >= 4)
#                             {
#                              1;
#                             }
#                            GLF_live13_looplimiter0 ++;
#                            GLF_live13coord = GLF_live13texel.xz + GLF_live13texel.yy;
#                            GLF_live13coord = floor(GLF_live13coord * 256.0) / 256.0;
#                            GLF_live13texel = texture(GLF_live13tex, GLF_live13coord);
#                            GLF_live13i ++;
#                            {
#                             float GLF_live20grey = _GLF_FUZZED((vec2(11.73, -8.4) + 685.704).x);
#                             {
#                              GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                             }
#                            }
#                           }
#                          }
#                          break;
#                         }
#                        GLF_live8_looplimiter1 ++;
#                        if(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT(_GLF_IDENTITY(GLF_live8j * 2 + GLF_live8i * 2 * 16, max(_GLF_IDENTITY(GLF_live8j * 2 + GLF_live8i * 2 * 16, 1 * (GLF_live8j * 2 + GLF_live8i * 2 * 16)), GLF_live8j * 2 + GLF_live8i * 2 * 16)), 256)] == 0)
#                         {
#                          GLF_live8p.x = GLF_live8j * 2;
#                          GLF_live8p.y = GLF_live8i * 2;
#                          GLF_live8canwalk = true;
#                         }
#                       }
#                     }
#                    }
#                  }
#                  GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y) * 16, 256)] = 1;
#                 }
#                else
#                 {
#                  int GLF_live8d = GLF_live8v % _GLF_IDENTITY(GLF_live8directions, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(GLF_live8directions, 1 * (GLF_live8directions)), 1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))), ~ (_GLF_IDENTITY(~ (ivec4(_GLF_IDENTITY(GLF_live8directions, _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (_GLF_TRUE(true, (gl_FragCoord.y >= 0.0)) ? int(int(1)) : _GLF_FUZZED(GLF_dead0N)))) * (GLF_live8directions)), 1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))), (~ (ivec4(_GLF_IDENTITY(GLF_live8directions, 1 * (GLF_live8directions)), 1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))) | (~ (ivec4(_GLF_IDENTITY(GLF_live8directions, 1 * (GLF_live8directions)), 1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))))))));
#                  GLF_live8v += GLF_live8directions;
#                  if(GLF_live8d >= 0 && GLF_live8p.x > 0 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x - 2) + _GLF_IDENTITY((GLF_live8p.y) * 16, (_GLF_IDENTITY((GLF_live8p.y) * 16, clamp((GLF_live8p.y) * 16, _GLF_IDENTITY((GLF_live8p.y) * 16, min((GLF_live8p.y) * 16, (GLF_live8p.y) * 16)), (GLF_live8p.y) * 16))) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 256)] == 0)
#                   {
#                    GLF_live8d --;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y) * 16, 256)] = 1;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x - 1) + (GLF_live8p.y) * 16, 256)] = 1;
#                    {
#                     float GLF_live14z = _GLF_FUZZED(4.4);
#                     vec2 GLF_live14a = _GLF_FUZZED((mat2(6245.7220, 9.2, -7283.8471, -5.0) * vec2(2.0, -762.655)));
#                     {
#                      GLF_live14z = GLF_live14a.x / GLF_live14a.y;
#                     }
#                    }
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x - 2) + (GLF_live8p.y) * 16, 256)] = 1;
#                    GLF_live8p.x -= 2;
#                   }
#                  if(GLF_live8d >= 0 && GLF_live8p.y > 0 && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y - 2) * 16, 256)] == 0)
#                   {
#                    GLF_live8d --;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y) * 16, 256)] = 1;
#                    _GLF_IDENTITY(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y - 1) * 16, 256)] = 1, (GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y - 1) * 16, 256)] = 1) << 0);
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y - 2) * 16, 256)] = 1;
#                    GLF_live8p.y -= 2;
#                   }
#                  {
#                   {
#                    1;
#                   }
#                  }
#                  if(GLF_live8d >= 0 && GLF_live8p.x < 14 && _GLF_IDENTITY(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x + 2) + _GLF_IDENTITY((GLF_live8p.y), ((GLF_live8p.y)) | 0) * 16, 256)], int(ivec2(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x + 2) + (GLF_live8p.y) * 16, 256)], int(_GLF_ONE(1.0, injectionSwitch.y))))) == 0)
#                   {
#                    {
#                     float GLF_live20grey = _GLF_FUZZED(62.10);
#                     if(int(GLF_live20gl_FragCoord[1]) < 210)
#                      {
#                       GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                      }
#                     else
#                      {
#                       if(int(GLF_live20gl_FragCoord[1]) < 240)
#                        {
#                         GLF_live20grey = 0.5 + float(GLF_live20data[7]) / 10.0;
#                        }
#                       else
#                        {
#                         if(int(GLF_live20gl_FragCoord[1]) < 270)
#                          {
#                           GLF_live20grey = 0.5 + float(GLF_live20data[8]) / 10.0;
#                          }
#                         else
#                          {
#                           1;
#                          }
#                        }
#                      }
#                    }
#                    GLF_live8d --;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y) * 16, 256)] = 1;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x + 1) + (GLF_live8p.y) * 16, 256)] = 1;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x + 2) + (GLF_live8p.y) * 16, 256)] = 1;
#                    {
#                     int GLF_live20low = _GLF_FUZZED(GLF_dead0N);
#                     int GLF_live20high = _GLF_FUZZED(GLF_dead0N);
#                     {
#                      int GLF_live20_looplimiter4 = 0;
#                      for(int GLF_live20m = 1; GLF_live20m <= GLF_live20high; GLF_live20m = 2 * GLF_live20m)
#                       {
#                        if(GLF_live20_looplimiter4 >= 7)
#                         {
#                          break;
#                         }
#                        GLF_live20_looplimiter4 ++;
#                        {
#                         int GLF_live20_looplimiter3 = 0;
#                         for(int GLF_live20i = GLF_live20low; GLF_live20i < GLF_live20high; GLF_live20i += 2 * GLF_live20m)
#                          {
#                           if(GLF_live20_looplimiter3 >= 7)
#                            {
#                             break;
#                            }
#                           GLF_live20_looplimiter3 ++;
#                           int GLF_live20from = GLF_live20i;
#                           int GLF_live20mid = GLF_live20i + GLF_live20m - 1;
#                           int GLF_live20to = min(GLF_live20i + 2 * GLF_live20m - 1, GLF_live20high);
#                           GLF_live20merge(GLF_live20from, GLF_live20mid, GLF_live20to);
#                          }
#                        }
#                       }
#                     }
#                    }
#                    GLF_live8p.x += 2;
#                   }
#                  if(GLF_live8d >= 0 && GLF_live8p.y < _GLF_IDENTITY(14, (14) | (14)) && GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y + 2) * 16, 256)] == 0)
#                   {
#                    GLF_live8d --;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y) * 16, 256)] = 1;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y + 1) * 16, 256)] = 1;
#                    GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live8p.x) + (GLF_live8p.y + 2) * 16, 256)] = 1;
#                    {
#                     {
#                      vec3 GLF_live18texel = texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)).xyz;
#                      vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#                      GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#                      GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#                     }
#                    }
#                    GLF_live8p.y += 2;
#                   }
#                 }
#                if(GLF_live8map[_GLF_MAKE_IN_BOUNDS_INT(GLF_live8ipos.y * 16 + GLF_live8ipos.x, 256)] == 1)
#                 {
#                  GLF_live8_GLF_color = vec4(1.0, 1.0, 1.0, 1.0);
#                  1;
#                  {
#                   {
#                    vec2 GLF_live17coord = vec2(GLF_live17gl_FragCoord.xy) * (1.0 / _GLF_IDENTITY(256.0, mix(float(256.0), float(_GLF_FUZZED(63.76)), bool(false))));
#                    if(GLF_live17coord.x > 0.4)
#                     {
#                      if(GLF_live17coord.y < 0.6)
#                       {
#                        uvec2 GLF_live17icoord = uvec2(((GLF_live17coord - vec2(0.4, 0.0)) * vec2(1.0 / 0.4, 1.0 / 0.6)) * 256.0);
#                        uint GLF_live17res1 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) >> (_GLF_IDENTITY(GLF_live17icoord, min(GLF_live17icoord, GLF_live17icoord)).x & 31u)) & 0xffffffffu);
#                        uint GLF_live17res2 = uint(((GLF_live17icoord.x * GLF_live17icoord.y) << (GLF_live17icoord.x & 31u)) & _GLF_IDENTITY(0xffffffffu, (_GLF_IDENTITY(0xffffffffu, (0xffffffffu) | (0xffffffffu))) | 0u));
#                        float GLF_live17res = float(((GLF_live17res2 & 0x80000000u) != 0u ? 1u : 0u) ^ ((GLF_live17res1 & 1u) != 0u ? 1u : 0u));
#                        GLF_live17_GLF_color = vec4(GLF_live17res, GLF_live17res, GLF_live17res, 1.0);
#                       }
#                      else
#                       {
#                        ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(0.4, _GLF_IDENTITY(0.6, (true ? 0.6 : _GLF_FUZZED(donor_replacementGLF_dead0grey))))) * vec2(1.0 / 0.4, 1.0 / 0.4)) * 256.0);
#                        int GLF_live17res3 = ((GLF_live17icoord.x >> 5) & 1) ^ ((GLF_live17icoord.y & 32) >> 5);
#                        int GLF_live17res2 = (GLF_live17icoord.y * _GLF_IDENTITY(GLF_live17icoord.y, (_GLF_IDENTITY(GLF_live17icoord.y, (GLF_live17icoord.y) * 1)) >> 0) >> 10) & 1;
#                        int GLF_live17res1 = (GLF_live17icoord.x * GLF_live17icoord.y >> 9) & 1;
#                        GLF_live17_GLF_color = vec4(float(GLF_live17res1 ^ GLF_live17res2), float(GLF_live17res2 & GLF_live17res3), float(GLF_live17res1 | GLF_live17res3), 1.0);
#                       }
#                     }
#                    else
#                     {
#                      ivec2 GLF_live17icoord = ivec2(((GLF_live17coord - vec2(_GLF_IDENTITY(0.4, (false ? _GLF_FUZZED((donor_replacementGLF_dead0grey)) : 0.4)), 0.0)) * vec2(1.0 / 0.6, 1.0)) * 256.0);
#                      int GLF_live17v = (GLF_live17icoord.x ^ GLF_live17icoord.y) * GLF_live17icoord.y;
#                      bool GLF_live17res1 = ((GLF_live17v >> 10) & 1) != 0;
#                      bool GLF_live17res2 = ((GLF_live17v >> 11) & 4) != 0;
#                      bool GLF_live17res3 = ((GLF_live17v >> 12) & 8) != 0;
#                      GLF_live17_GLF_color = vec4(GLF_live17res1 ? 1.0 : 0.0, GLF_live17res2 ? 1.0 : 0.0, GLF_live17res3 ? 1.0 : 0.0, 1);
#                     }
#                    {
#                     float GLF_live20grey = _GLF_FUZZED(-95.59);
#                     {
#                      GLF_live20grey = 0.5 + float(GLF_live20data[6]) / 10.0;
#                     }
#                    }
#                   }
#                  }
#                 }
#               }
#              while(GLF_live8canwalk);
#             }
#            }
#            {
#             {
#              GLF_live16_GLF_color = texture(GLF_live16tex, GLF_live16gl_FragCoord.xy * (1.0 / 256.0));
#             }
#            }
#           }
#         }
#       }
#     }
#    {
#     {
#      {
#       {
#        int GLF_live20i = _GLF_FUZZED(71216);
#        int GLF_live20j = _GLF_FUZZED(98570);
#        int GLF_live20k = _GLF_FUZZED(GLF_dead0N);
#        if(GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i, 10)] < GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j, 10)])
#         {
#          GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20i ++, 10)];
#         }
#        else
#         {
#          GLF_live20temp[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20k ++, 10)] = GLF_live20data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live20j ++, 10)];
#         }
#       }
#       vec2 GLF_live12pos = _GLF_IDENTITY(GLF_live12gl_FragCoord.xy / GLF_live12resolution, vec2(0.0, 0.0) + (GLF_live12gl_FragCoord.xy / GLF_live12resolution));
#       if(GLF_live12pointInTriangle(GLF_live12pos, vec2(0.7, 0.3), vec2(0.5, 0.9), vec2(0.1, 0.4)) == 1)
#        {
#         {
#          {
#           vec3 GLF_live18texel = _GLF_IDENTITY(texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)), (false ? _GLF_FUZZED(GLF_live18gl_FragCoord) : texture(GLF_live18tex, GLF_live18gl_FragCoord.xy * (1.0 / 256.0)))).xyz;
#           vec2 GLF_live18reuse = (GLF_live18texel.xz + GLF_live18texel.yy) * 0.5 + vec2(0.25, 0.25);
#           GLF_live18reuse = floor(GLF_live18reuse * 256.0) / 256.0;
#           GLF_live18_GLF_color = texture(GLF_live18tex, GLF_live18reuse);
#          }
#         }
#         GLF_live12_GLF_color = vec4(1.0, 0.0, 0.0, 1.0);
#        }
#       else
#        {
#         GLF_live12_GLF_color = vec4(0.0, 0.0, 0.0, 1.0);
#        }
#       {
#        {
#         1;
#        }
#       }
#      }
#     }
#     vec2 GLF_live1coord = _GLF_FUZZED(vec2(104.359, -2.8));
#     if(GLF_live1coord.y > 1.0)
#      GLF_live1coord.y -= 1.0;
#    }
#   }
#  {
#   float GLF_live14th = _GLF_FUZZED(7.8);
#   vec2 GLF_live14a = _GLF_FUZZED((vec4(-3.8, -354.756, 9.3, -114.848).tt / vec2(-7.4, 4.2)));
#   if(GLF_live14a.y < GLF_live14a.x)
#    {
#     GLF_live14th = 0.5 - GLF_live14th;
#    }
#  }
#  _GLF_color = texel;
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 5520
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %1134 %1511
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %12 "GLF_live20merge(i1;i1;i1;"
               OpName %9 "GLF_live20from"
               OpName %10 "GLF_live20mid"
               OpName %11 "GLF_live20to"
               OpName %19 "GLF_live14ReallyApproxNormalizedAtan2(vf2;"
               OpName %18 "GLF_live14v"
               OpName %23 "GLF_live14polarize(vf2;"
               OpName %22 "GLF_live14coord"
               OpName %28 "GLF_live12cross2d(vf2;vf2;"
               OpName %26 "GLF_live12a"
               OpName %27 "GLF_live12b"
               OpName %35 "GLF_live12pointInTriangle(vf2;vf2;vf2;vf2;"
               OpName %31 "GLF_live12p"
               OpName %32 "GLF_live12a"
               OpName %33 "GLF_live12b"
               OpName %34 "GLF_live12c"
               OpName %43 "GLF_live2collision(vf2;vf4;"
               OpName %41 "GLF_live2pos"
               OpName %42 "GLF_live2quad"
               OpName %46 "GLF_live20gl_FragCoord"
               OpName %56 "GLF_live20data"
               OpName %66 "GLF_live20temp"
               OpName %74 "GLF_live17gl_FragCoord"
               OpName %80 "GLF_live17_GLF_color"
               OpName %86 "GLF_live16gl_FragCoord"
               OpName %92 "GLF_live16_GLF_color"
               OpName %98 "GLF_live18gl_FragCoord"
               OpName %104 "GLF_live18_GLF_color"
               OpName %110 "GLF_live14gl_FragCoord"
               OpName %116 "GLF_live14_GLF_color"
               OpName %122 "GLF_live12gl_FragCoord"
               OpName %128 "GLF_live12_GLF_color"
               OpName %134 "GLF_live10BST"
               OpMemberName %134 0 "data"
               OpMemberName %134 1 "leftIndex"
               OpMemberName %134 2 "rightIndex"
               OpName %137 "GLF_live10tree"
               OpName %179 "GLF_live8_GLF_color"
               OpName %188 "GLF_live8map"
               OpName %210 "GLF_live3QuicksortObject"
               OpMemberName %210 0 "numbers"
               OpName %212 "GLF_live3obj"
               OpName %225 "GLF_live0gl_FragCoord"
               OpName %231 "GLF_live0_GLF_color"
               OpName %237 "GLF_dead0gl_FragCoord"
               OpName %243 "GLF_dead0data"
               OpName %252 "GLF_live20k"
               OpName %254 "GLF_live20i"
               OpName %256 "GLF_live20j"
               OpName %260 "GLF_live20_looplimiter0"
               OpName %313 "GLF_live20_looplimiter1"
               OpName %341 "GLF_live20_looplimiter2"
               OpName %342 "GLF_live20i"
               OpName %371 "GLF_live16tex"
               OpName %379 "GLF_live14pi2"
               OpName %389 "GLF_live14a"
               OpName %392 "GLF_live14z"
               OpName %412 "GLF_live20_looplimiter3"
               OpName %413 "GLF_live20high"
               OpName %415 "GLF_live20m"
               OpName %417 "GLF_live20i"
               OpName %425 "GLF_live20from"
               OpName %427 "GLF_live20mid"
               OpName %432 "GLF_live20to"
               OpName %441 "param"
               OpName %443 "param"
               OpName %445 "param"
               OpName %453 "GLF_live14th"
               OpName %501 "GLF_live20grey"
               OpName %532 "GLF_live17coord"
               OpName %544 "GLF_live17icoord"
               OpName %557 "GLF_live17res1"
               OpName %570 "GLF_live17res2"
               OpName %583 "GLF_live17res"
               OpName %602 "GLF_live17icoord"
               OpName %610 "GLF_live17res3"
               OpName %622 "GLF_live17res2"
               OpName %630 "GLF_live17res1"
               OpName %655 "GLF_live18texel"
               OpName %656 "GLF_live18tex"
               OpName %663 "GLF_live18reuse"
               OpName %690 "GLF_live17coord"
               OpName %699 "GLF_live17icoord"
               OpName %705 "GLF_live17res1"
               OpName %716 "GLF_live17res2"
               OpName %727 "GLF_live17res"
               OpName %743 "GLF_live20grey"
               OpName %784 "GLF_live17icoord"
               OpName %790 "GLF_live17res3"
               OpName %800 "GLF_live17res2"
               OpName %808 "GLF_live20_looplimiter3"
               OpName %813 "GLF_live17res1"
               OpName %834 "GLF_live14pi"
               OpName %836 "GLF_live14center"
               OpName %840 "GLF_live14dist"
               OpName %843 "GLF_live17coord"
               OpName %845 "GLF_live17icoord"
               OpName %851 "GLF_live20_looplimiter6"
               OpName %852 "GLF_live20j"
               OpName %876 "GLF_live17res1"
               OpName %887 "GLF_live17res2"
               OpName %898 "GLF_live17res"
               OpName %915 "GLF_live20_looplimiter3"
               OpName %916 "GLF_live20low"
               OpName %918 "GLF_live20high"
               OpName %920 "GLF_live20m"
               OpName %922 "GLF_live20i"
               OpName %939 "GLF_live20from"
               OpName %941 "GLF_live20mid"
               OpName %946 "GLF_live20to"
               OpName %954 "param"
               OpName %956 "param"
               OpName %958 "param"
               OpName %969 "GLF_live14angle"
               OpName %970 "param"
               OpName %973 "GLF_live17coord"
               OpName %982 "GLF_live20_looplimiter6"
               OpName %983 "GLF_live20j"
               OpName %1007 "GLF_live17icoord"
               OpName %1012 "buf0"
               OpMemberName %1012 0 "injectionSwitch"
               OpName %1014 ""
               OpName %1023 "GLF_live17res1"
               OpName %1034 "GLF_live17res2"
               OpName %1045 "GLF_live17res"
               OpName %1061 "GLF_live17icoord"
               OpName %1067 "GLF_live17res3"
               OpName %1077 "GLF_live17res2"
               OpName %1086 "GLF_live17res1"
               OpName %1130 "GLF_live12pab"
               OpName %1134 "gl_FragCoord"
               OpName %1178 "param"
               OpName %1179 "param"
               OpName %1181 "GLF_live12pbc"
               OpName %1204 "param"
               OpName %1205 "param"
               OpName %1225 "GLF_live12pca"
               OpName %1281 "param"
               OpName %1282 "param"
               OpName %1321 "GLF_live8i"
               OpName %1323 "GLF_live8j"
               OpName %1326 "GLF_live8canwalk"
               OpName %1327 "GLF_live8p"
               OpName %1331 "GLF_live8_looplimiter1"
               OpName %1405 "GLF_live20grey"
               OpName %1412 "GLF_live13i"
               OpName %1413 "GLF_live13coord"
               OpName %1417 "GLF_live13texel"
               OpName %1423 "GLF_live13_looplimiter0"
               OpName %1453 "GLF_live20grey"
               OpName %1479 "GLF_live13tex"
               OpName %1485 "i"
               OpName %1486 "coord"
               OpName %1490 "texel"
               OpName %1491 "tex"
               OpName %1511 "_GLF_color"
               OpName %1583 "donor_replacementGLF_dead0grey"
               OpName %1616 "GLF_live4z"
               OpName %1618 "GLF_live9i"
               OpName %1619 "GLF_live14th"
               OpName %1621 "GLF_live14a"
               OpName %1634 "GLF_live9uvstep"
               OpName %1636 "GLF_live9coord"
               OpName %1640 "GLF_live9res"
               OpName %1645 "GLF_live9_looplimiter0"
               OpName %1646 "GLF_live9j"
               OpName %1667 "GLF_live20grey"
               OpName %1676 "GLF_live9tex"
               OpName %1710 "indexable"
               OpName %1716 "GLF_live18texel"
               OpName %1723 "GLF_live20grey"
               OpName %1749 "GLF_live18reuse"
               OpName %1772 "GLF_live4a"
               OpName %1776 "GLF_live12pos"
               OpName %1779 "buf5"
               OpMemberName %1779 0 "GLF_live12resolution"
               OpName %1781 ""
               OpName %1791 "param"
               OpName %1793 "param"
               OpName %1794 "param"
               OpName %1795 "param"
               OpName %1803 "GLF_live17coord"
               OpName %1807 "GLF_live17icoord"
               OpName %1814 "GLF_live17v"
               OpName %1823 "GLF_live17res1"
               OpName %1828 "GLF_live17res2"
               OpName %1834 "GLF_live17res3"
               OpName %1848 "GLF_live20_looplimiter6"
               OpName %1849 "GLF_live20j"
               OpName %1873 "GLF_live19count"
               OpName %1875 "GLF_live19v"
               OpName %1877 "GLF_live20mid"
               OpName %1879 "GLF_live20i"
               OpName %1881 "GLF_live20k"
               OpName %1882 "GLF_live20_looplimiter1"
               OpName %1910 "GLF_live19_looplimiter0"
               OpName %1938 "GLF_live20_looplimiter6"
               OpName %1965 "GLF_live20low"
               OpName %1967 "GLF_live20high"
               OpName %1968 "GLF_live20m"
               OpName %1970 "GLF_live20_looplimiter3"
               OpName %1971 "GLF_live20i"
               OpName %1988 "GLF_live20from"
               OpName %1990 "GLF_live20mid"
               OpName %1995 "GLF_live20to"
               OpName %2003 "param"
               OpName %2005 "param"
               OpName %2007 "param"
               OpName %2020 "GLF_live20grey"
               OpName %2088 "GLF_live2pos"
               OpName %2091 "GLF_live2i"
               OpName %2093 "GLF_live2res"
               OpName %2098 "GLF_live2_looplimiter0"
               OpName %2104 "GLF_live20_looplimiter6"
               OpName %2105 "GLF_live20j"
               OpName %2131 "GLF_live20_looplimiter3"
               OpName %2132 "GLF_live20high"
               OpName %2133 "GLF_live20m"
               OpName %2134 "GLF_live20i"
               OpName %2141 "GLF_live20from"
               OpName %2143 "GLF_live20mid"
               OpName %2148 "GLF_live20to"
               OpName %2156 "param"
               OpName %2158 "param"
               OpName %2160 "param"
               OpName %2163 "GLF_live5c"
               OpName %2167 "GLF_live18texel"
               OpName %2174 "GLF_live18reuse"
               OpName %2190 "GLF_live5_looplimiter1"
               OpName %2191 "GLF_live5i"
               OpName %2215 "GLF_live20_looplimiter2"
               OpName %2216 "GLF_live20i"
               OpName %2262 "GLF_live20grey"
               OpName %2291 "param"
               OpName %2293 "param"
               OpName %2295 "indexable"
               OpName %2321 "indexable"
               OpName %2327 "indexable"
               OpName %2343 "indexable"
               OpName %2346 "GLF_live10target"
               OpName %2349 "GLF_live10currentNode"
               OpName %2352 "GLF_live10index"
               OpName %2359 "GLF_live10_looplimiter1"
               OpName %2360 "GLF_live13i"
               OpName %2361 "GLF_live13coord"
               OpName %2365 "GLF_live13texel"
               OpName %2371 "GLF_live13_looplimiter0"
               OpName %2425 "GLF_live20mid"
               OpName %2427 "GLF_live20i"
               OpName %2428 "GLF_live20k"
               OpName %2429 "GLF_live20_looplimiter1"
               OpName %2464 "GLF_live13i"
               OpName %2466 "GLF_live20grey"
               OpName %2524 "GLF_live19count"
               OpName %2526 "GLF_live19v"
               OpName %2528 "GLF_live19_looplimiter0"
               OpName %2556 "GLF_live13coord"
               OpName %2560 "GLF_live13texel"
               OpName %2565 "GLF_live13_looplimiter0"
               OpName %2582 "GLF_live20_looplimiter1"
               OpName %2583 "GLF_live20mid"
               OpName %2584 "GLF_live20i"
               OpName %2585 "GLF_live20k"
               OpName %2625 "GLF_live15_looplimiter0"
               OpName %2626 "GLF_live15pos"
               OpName %2644 "GLF_live17coord"
               OpName %2648 "GLF_live17icoord"
               OpName %2654 "GLF_live17res3"
               OpName %2712 "GLF_live17res2"
               OpName %2720 "GLF_live17res1"
               OpName %2741 "GLF_live20_looplimiter4"
               OpName %2742 "GLF_live20low"
               OpName %2744 "GLF_live20high"
               OpName %2745 "GLF_live20m"
               OpName %2761 "GLF_live20_looplimiter3"
               OpName %2762 "GLF_live20i"
               OpName %2779 "GLF_live20from"
               OpName %2781 "GLF_live20mid"
               OpName %2786 "GLF_live20to"
               OpName %2794 "param"
               OpName %2796 "param"
               OpName %2798 "param"
               OpName %2962 "indexable"
               OpName %2974 "indexable"
               OpName %2987 "GLF_live15p"
               OpName %2994 "indexable"
               OpName %3011 "GLF_live20grey"
               OpName %3128 "GLF_live0data"
               OpName %3140 "buf_push"
               OpMemberName %3140 0 "GLF_live0resolution"
               OpName %3142 ""
               OpName %3175 "GLF_live7v"
               OpName %3177 "GLF_live7i"
               OpName %3178 "GLF_live7iters"
               OpName %3179 "GLF_live7_looplimiter0"
               OpName %3196 "GLF_live20to"
               OpName %3197 "GLF_live20mid"
               OpName %3199 "GLF_live20from"
               OpName %3201 "GLF_live20k"
               OpName %3203 "GLF_live20i"
               OpName %3205 "GLF_live20j"
               OpName %3208 "GLF_live20_looplimiter0"
               OpName %3258 "GLF_live20_looplimiter1"
               OpName %3286 "GLF_live20_looplimiter2"
               OpName %3287 "GLF_live20i"
               OpName %3322 "GLF_live14th"
               OpName %3324 "GLF_live14a"
               OpName %3340 "GLF_live20grey"
               OpName %3347 "GLF_live17coord"
               OpName %3356 "GLF_live17icoord"
               OpName %3367 "GLF_live17res1"
               OpName %3378 "GLF_live17res2"
               OpName %3389 "GLF_live17res"
               OpName %3405 "GLF_live17icoord"
               OpName %3411 "GLF_live17res3"
               OpName %3421 "GLF_live17res2"
               OpName %3429 "GLF_live17res1"
               OpName %3450 "GLF_live20grey"
               OpName %3543 "GLF_live12pos"
               OpName %3547 "GLF_live18texel"
               OpName %3554 "GLF_live18reuse"
               OpName %3570 "param"
               OpName %3572 "param"
               OpName %3573 "param"
               OpName %3574 "param"
               OpName %3580 "GLF_live18texel"
               OpName %3587 "GLF_live18reuse"
               OpName %3603 "GLF_live11_looplimiter1"
               OpName %3608 "GLF_live19v"
               OpName %3609 "GLF_live20_looplimiter3"
               OpName %3610 "GLF_live20high"
               OpName %3611 "GLF_live20m"
               OpName %3612 "GLF_live20i"
               OpName %3620 "GLF_live20from"
               OpName %3622 "GLF_live20mid"
               OpName %3627 "GLF_live20to"
               OpName %3635 "param"
               OpName %3637 "param"
               OpName %3639 "param"
               OpName %3642 "GLF_live20to"
               OpName %3644 "GLF_live20_looplimiter2"
               OpName %3645 "GLF_live20from"
               OpName %3647 "GLF_live20i"
               OpName %3694 "GLF_live6uvstep"
               OpName %3698 "GLF_live20low"
               OpName %3699 "GLF_live20high"
               OpName %3700 "GLF_live20m"
               OpName %3701 "GLF_live20_looplimiter3"
               OpName %3702 "GLF_live20i"
               OpName %3719 "GLF_live20from"
               OpName %3721 "GLF_live20mid"
               OpName %3726 "GLF_live20to"
               OpName %3734 "param"
               OpName %3736 "param"
               OpName %3738 "param"
               OpName %3745 "GLF_live6i"
               OpName %3747 "GLF_live6h"
               OpName %3749 "GLF_live6_looplimiter0"
               OpName %3750 "GLF_live6slope"
               OpName %3752 "GLF_live20_looplimiter3"
               OpName %3757 "GLF_live12pos"
               OpName %3764 "param"
               OpName %3766 "param"
               OpName %3767 "param"
               OpName %3768 "param"
               OpName %3774 "GLF_live19v"
               OpName %3778 "GLF_live20_looplimiter1"
               OpName %3779 "GLF_live20i"
               OpName %3781 "GLF_live20k"
               OpName %3798 "GLF_live8directions"
               OpName %3800 "GLF_live8p"
               OpName %3832 "GLF_live20low"
               OpName %3833 "GLF_live20high"
               OpName %3835 "GLF_live20m"
               OpName %3836 "GLF_live20_looplimiter3"
               OpName %3837 "GLF_live20i"
               OpName %3854 "GLF_live20from"
               OpName %3856 "GLF_live20mid"
               OpName %3861 "GLF_live20to"
               OpName %3869 "param"
               OpName %3871 "param"
               OpName %3873 "param"
               OpName %3880 "GLF_live6coord"
               OpName %3884 "GLF_live6refh"
               OpName %3893 "GLF_live18texel"
               OpName %3900 "GLF_live18reuse"
               OpName %3916 "GLF_live20grey"
               OpName %3954 "GLF_live10target"
               OpName %3955 "GLF_live10_looplimiter1"
               OpName %3956 "GLF_live10currentNode"
               OpName %3959 "GLF_live10index"
               OpName %3960 "GLF_live14coord"
               OpName %3967 "param"
               OpName %3974 "GLF_live20grey"
               OpName %3986 "GLF_live14tex"
               OpName %3995 "GLF_live20low"
               OpName %3997 "GLF_live20high"
               OpName %3999 "GLF_live20_looplimiter4"
               OpName %4000 "GLF_live20m"
               OpName %4016 "GLF_live20_looplimiter3"
               OpName %4017 "GLF_live20i"
               OpName %4034 "GLF_live20from"
               OpName %4036 "GLF_live20mid"
               OpName %4041 "GLF_live20to"
               OpName %4049 "param"
               OpName %4051 "param"
               OpName %4053 "param"
               OpName %4091 "GLF_live20grey"
               OpName %4150 "GLF_live20_looplimiter5"
               OpName %4162 "GLF_live6tex"
               OpName %4169 "GLF_live3color"
               OpName %4181 "GLF_live20grey"
               OpName %4207 "GLF_live10_looplimiter0"
               OpName %4213 "GLF_live8i"
               OpName %4214 "GLF_live8pos"
               OpName %4218 "GLF_live8v"
               OpName %4220 "GLF_live8canwalk"
               OpName %4221 "GLF_live8p"
               OpName %4225 "GLF_live20_looplimiter4"
               OpName %4230 "GLF_live20grey"
               OpName %4299 "GLF_live19v"
               OpName %4302 "GLF_live8ipos"
               OpName %4306 "GLF_live8_looplimiter3"
               OpName %4316 "GLF_live17coord"
               OpName %4333 "GLF_live17icoord"
               OpName %4339 "GLF_live17res1"
               OpName %4350 "GLF_live17res2"
               OpName %4361 "GLF_live17res"
               OpName %4377 "GLF_live20i"
               OpName %4411 "GLF_live17icoord"
               OpName %4417 "GLF_live17res3"
               OpName %4427 "GLF_live17res2"
               OpName %4435 "GLF_live17res1"
               OpName %4457 "GLF_live17icoord"
               OpName %4463 "GLF_live17v"
               OpName %4472 "GLF_live17res1"
               OpName %4477 "GLF_live17res2"
               OpName %4482 "GLF_live17res3"
               OpName %4498 "GLF_live8directions"
               OpName %4599 "GLF_live8j"
               OpName %4603 "GLF_live12pos"
               OpName %4626 "GLF_live18texel"
               OpName %4633 "GLF_live18reuse"
               OpName %4649 "param"
               OpName %4651 "param"
               OpName %4652 "param"
               OpName %4653 "param"
               OpName %4659 "GLF_live8_looplimiter2"
               OpName %4672 "GLF_live18texel"
               OpName %4679 "GLF_live18reuse"
               OpName %4700 "GLF_live20_looplimiter6"
               OpName %4701 "GLF_live20j"
               OpName %4727 "GLF_live8_looplimiter1"
               OpName %4728 "GLF_live19v"
               OpName %4752 "GLF_live13i"
               OpName %4753 "GLF_live13coord"
               OpName %4756 "GLF_live13texel"
               OpName %4761 "GLF_live13_looplimiter0"
               OpName %4783 "GLF_live20grey"
               OpName %4832 "GLF_live8d"
               OpName %4907 "GLF_live14z"
               OpName %4909 "GLF_live14a"
               OpName %5017 "GLF_live20grey"
               OpName %5083 "GLF_live20low"
               OpName %5084 "GLF_live20high"
               OpName %5085 "GLF_live20_looplimiter4"
               OpName %5086 "GLF_live20m"
               OpName %5102 "GLF_live20_looplimiter3"
               OpName %5103 "GLF_live20i"
               OpName %5120 "GLF_live20from"
               OpName %5122 "GLF_live20mid"
               OpName %5127 "GLF_live20to"
               OpName %5135 "param"
               OpName %5137 "param"
               OpName %5139 "param"
               OpName %5204 "GLF_live18texel"
               OpName %5211 "GLF_live18reuse"
               OpName %5243 "GLF_live17coord"
               OpName %5260 "GLF_live17icoord"
               OpName %5266 "GLF_live17res1"
               OpName %5279 "GLF_live17res2"
               OpName %5290 "GLF_live17res"
               OpName %5306 "GLF_live17icoord"
               OpName %5315 "GLF_live17res3"
               OpName %5325 "GLF_live17res2"
               OpName %5335 "GLF_live17res1"
               OpName %5357 "GLF_live17icoord"
               OpName %5366 "GLF_live17v"
               OpName %5375 "GLF_live17res1"
               OpName %5380 "GLF_live17res2"
               OpName %5385 "GLF_live17res3"
               OpName %5397 "GLF_live20grey"
               OpName %5410 "GLF_live20i"
               OpName %5412 "GLF_live20j"
               OpName %5414 "GLF_live20k"
               OpName %5445 "GLF_live12pos"
               OpName %5452 "param"
               OpName %5454 "param"
               OpName %5455 "param"
               OpName %5456 "param"
               OpName %5461 "GLF_live18texel"
               OpName %5474 "GLF_live18reuse"
               OpName %5491 "GLF_live1coord"
               OpName %5504 "GLF_live14th"
               OpName %5506 "GLF_live14a"
               OpDecorate %46 RelaxedPrecision
               OpDecorate %74 RelaxedPrecision
               OpDecorate %86 RelaxedPrecision
               OpDecorate %98 RelaxedPrecision
               OpDecorate %110 RelaxedPrecision
               OpDecorate %122 RelaxedPrecision
               OpDecorate %225 RelaxedPrecision
               OpDecorate %237 RelaxedPrecision
               OpDecorate %371 RelaxedPrecision
               OpDecorate %371 DescriptorSet 0
               OpDecorate %371 Binding 1
               OpDecorate %372 RelaxedPrecision
               OpDecorate %373 RelaxedPrecision
               OpDecorate %374 RelaxedPrecision
               OpDecorate %376 RelaxedPrecision
               OpDecorate %377 RelaxedPrecision
               OpDecorate %505 RelaxedPrecision
               OpDecorate %527 RelaxedPrecision
               OpDecorate %528 RelaxedPrecision
               OpDecorate %529 RelaxedPrecision
               OpDecorate %530 RelaxedPrecision
               OpDecorate %531 RelaxedPrecision
               OpDecorate %656 RelaxedPrecision
               OpDecorate %656 DescriptorSet 0
               OpDecorate %656 Binding 2
               OpDecorate %746 RelaxedPrecision
               OpDecorate %760 RelaxedPrecision
               OpDecorate %773 RelaxedPrecision
               OpMemberDecorate %1012 0 Offset 0
               OpDecorate %1012 Block
               OpDecorate %1014 DescriptorSet 0
               OpDecorate %1014 Binding 0
               OpDecorate %1134 BuiltIn FragCoord
               OpDecorate %1398 RelaxedPrecision
               OpDecorate %1399 RelaxedPrecision
               OpDecorate %1400 RelaxedPrecision
               OpDecorate %1401 RelaxedPrecision
               OpDecorate %1402 RelaxedPrecision
               OpDecorate %1456 RelaxedPrecision
               OpDecorate %1479 RelaxedPrecision
               OpDecorate %1479 DescriptorSet 0
               OpDecorate %1479 Binding 3
               OpDecorate %1480 RelaxedPrecision
               OpDecorate %1482 RelaxedPrecision
               OpDecorate %1491 RelaxedPrecision
               OpDecorate %1491 DescriptorSet 0
               OpDecorate %1491 Binding 8
               OpDecorate %1492 RelaxedPrecision
               OpDecorate %1494 RelaxedPrecision
               OpDecorate %1511 Location 0
               OpDecorate %1566 RelaxedPrecision
               OpDecorate %1568 RelaxedPrecision
               OpDecorate %1574 RelaxedPrecision
               OpDecorate %1575 RelaxedPrecision
               OpDecorate %1577 RelaxedPrecision
               OpDecorate %1578 RelaxedPrecision
               OpDecorate %1586 RelaxedPrecision
               OpDecorate %1588 RelaxedPrecision
               OpDecorate %1590 RelaxedPrecision
               OpDecorate %1596 RelaxedPrecision
               OpDecorate %1676 RelaxedPrecision
               OpDecorate %1676 DescriptorSet 0
               OpDecorate %1676 Binding 6
               OpDecorate %1677 RelaxedPrecision
               OpDecorate %1693 RelaxedPrecision
               OpDecorate %1717 RelaxedPrecision
               OpDecorate %1718 RelaxedPrecision
               OpDecorate %1719 RelaxedPrecision
               OpDecorate %1720 RelaxedPrecision
               OpDecorate %1721 RelaxedPrecision
               OpDecorate %1722 RelaxedPrecision
               OpDecorate %1726 RelaxedPrecision
               OpDecorate %1738 RelaxedPrecision
               OpDecorate %1762 RelaxedPrecision
               OpDecorate %1764 RelaxedPrecision
               OpDecorate %1767 RelaxedPrecision
               OpDecorate %1768 RelaxedPrecision
               OpDecorate %1769 RelaxedPrecision
               OpDecorate %1770 RelaxedPrecision
               OpDecorate %1771 RelaxedPrecision
               OpDecorate %1777 RelaxedPrecision
               OpDecorate %1778 RelaxedPrecision
               OpMemberDecorate %1779 0 Offset 0
               OpDecorate %1779 Block
               OpDecorate %1781 DescriptorSet 0
               OpDecorate %1781 Binding 5
               OpDecorate %1960 RelaxedPrecision
               OpDecorate %2023 RelaxedPrecision
               OpDecorate %2036 RelaxedPrecision
               OpDecorate %2048 RelaxedPrecision
               OpDecorate %2060 RelaxedPrecision
               OpDecorate %2072 RelaxedPrecision
               OpDecorate %2082 RelaxedPrecision
               OpDecorate %2083 RelaxedPrecision
               OpDecorate %2084 RelaxedPrecision
               OpDecorate %2085 RelaxedPrecision
               OpDecorate %2086 RelaxedPrecision
               OpDecorate %2099 RelaxedPrecision
               OpDecorate %2100 RelaxedPrecision
               OpDecorate %2101 RelaxedPrecision
               OpDecorate %2102 RelaxedPrecision
               OpDecorate %2103 RelaxedPrecision
               OpDecorate %2168 RelaxedPrecision
               OpDecorate %2169 RelaxedPrecision
               OpDecorate %2170 RelaxedPrecision
               OpDecorate %2171 RelaxedPrecision
               OpDecorate %2172 RelaxedPrecision
               OpDecorate %2173 RelaxedPrecision
               OpDecorate %2187 RelaxedPrecision
               OpDecorate %2189 RelaxedPrecision
               OpDecorate %2408 RelaxedPrecision
               OpDecorate %2410 RelaxedPrecision
               OpDecorate %2469 RelaxedPrecision
               OpDecorate %2477 RelaxedPrecision
               OpDecorate %2489 RelaxedPrecision
               OpDecorate %2501 RelaxedPrecision
               OpDecorate %2513 RelaxedPrecision
               OpDecorate %2614 RelaxedPrecision
               OpDecorate %2616 RelaxedPrecision
               OpDecorate %2982 RelaxedPrecision
               OpDecorate %2983 RelaxedPrecision
               OpDecorate %2984 RelaxedPrecision
               OpDecorate %2985 RelaxedPrecision
               OpDecorate %2986 RelaxedPrecision
               OpDecorate %3014 RelaxedPrecision
               OpDecorate %3026 RelaxedPrecision
               OpDecorate %3038 RelaxedPrecision
               OpDecorate %3050 RelaxedPrecision
               OpDecorate %3057 RelaxedPrecision
               OpDecorate %3069 RelaxedPrecision
               OpDecorate %3081 RelaxedPrecision
               OpDecorate %3093 RelaxedPrecision
               OpDecorate %3104 RelaxedPrecision
               OpDecorate %3105 RelaxedPrecision
               OpDecorate %3106 RelaxedPrecision
               OpDecorate %3107 RelaxedPrecision
               OpDecorate %3108 RelaxedPrecision
               OpDecorate %3139 RelaxedPrecision
               OpMemberDecorate %3140 0 Offset 0
               OpDecorate %3140 Block
               OpDecorate %3169 RelaxedPrecision
               OpDecorate %3170 RelaxedPrecision
               OpDecorate %3453 RelaxedPrecision
               OpDecorate %3465 RelaxedPrecision
               OpDecorate %3477 RelaxedPrecision
               OpDecorate %3489 RelaxedPrecision
               OpDecorate %3496 RelaxedPrecision
               OpDecorate %3508 RelaxedPrecision
               OpDecorate %3520 RelaxedPrecision
               OpDecorate %3532 RelaxedPrecision
               OpDecorate %3548 RelaxedPrecision
               OpDecorate %3549 RelaxedPrecision
               OpDecorate %3550 RelaxedPrecision
               OpDecorate %3551 RelaxedPrecision
               OpDecorate %3552 RelaxedPrecision
               OpDecorate %3553 RelaxedPrecision
               OpDecorate %3567 RelaxedPrecision
               OpDecorate %3569 RelaxedPrecision
               OpDecorate %3581 RelaxedPrecision
               OpDecorate %3582 RelaxedPrecision
               OpDecorate %3583 RelaxedPrecision
               OpDecorate %3584 RelaxedPrecision
               OpDecorate %3585 RelaxedPrecision
               OpDecorate %3586 RelaxedPrecision
               OpDecorate %3600 RelaxedPrecision
               OpDecorate %3602 RelaxedPrecision
               OpDecorate %3758 RelaxedPrecision
               OpDecorate %3759 RelaxedPrecision
               OpDecorate %3760 RelaxedPrecision
               OpDecorate %3894 RelaxedPrecision
               OpDecorate %3895 RelaxedPrecision
               OpDecorate %3896 RelaxedPrecision
               OpDecorate %3897 RelaxedPrecision
               OpDecorate %3898 RelaxedPrecision
               OpDecorate %3899 RelaxedPrecision
               OpDecorate %3913 RelaxedPrecision
               OpDecorate %3915 RelaxedPrecision
               OpDecorate %3919 RelaxedPrecision
               OpDecorate %3931 RelaxedPrecision
               OpDecorate %3943 RelaxedPrecision
               OpDecorate %3961 RelaxedPrecision
               OpDecorate %3962 RelaxedPrecision
               OpDecorate %3963 RelaxedPrecision
               OpDecorate %3986 RelaxedPrecision
               OpDecorate %3986 DescriptorSet 0
               OpDecorate %3986 Binding 4
               OpDecorate %3987 RelaxedPrecision
               OpDecorate %3989 RelaxedPrecision
               OpDecorate %3990 RelaxedPrecision
               OpDecorate %4094 RelaxedPrecision
               OpDecorate %4101 RelaxedPrecision
               OpDecorate %4113 RelaxedPrecision
               OpDecorate %4125 RelaxedPrecision
               OpDecorate %4137 RelaxedPrecision
               OpDecorate %4162 RelaxedPrecision
               OpDecorate %4162 DescriptorSet 0
               OpDecorate %4162 Binding 7
               OpDecorate %4163 RelaxedPrecision
               OpDecorate %4165 RelaxedPrecision
               OpDecorate %4166 RelaxedPrecision
               OpDecorate %4184 RelaxedPrecision
               OpDecorate %4196 RelaxedPrecision
               OpDecorate %5446 RelaxedPrecision
               OpDecorate %5447 RelaxedPrecision
               OpDecorate %5462 RelaxedPrecision
               OpDecorate %5465 RelaxedPrecision
               OpDecorate %5467 RelaxedPrecision
               OpDecorate %5468 RelaxedPrecision
               OpDecorate %5469 RelaxedPrecision
               OpDecorate %5470 RelaxedPrecision
               OpDecorate %5471 RelaxedPrecision
               OpDecorate %5472 RelaxedPrecision
               OpDecorate %5473 RelaxedPrecision
               OpDecorate %5487 RelaxedPrecision
               OpDecorate %5489 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %8 = OpTypeFunction %2 %7 %7 %7
         %14 = OpTypeFloat 32
         %15 = OpTypeVector %14 2
         %16 = OpTypePointer Function %15
         %17 = OpTypeFunction %14 %16
         %21 = OpTypeFunction %15 %16
         %25 = OpTypeFunction %14 %16 %16
         %30 = OpTypeFunction %6 %16 %16 %16 %16
         %37 = OpTypeVector %14 4
         %38 = OpTypePointer Function %37
         %39 = OpTypeBool
         %40 = OpTypeFunction %39 %16 %38
         %45 = OpTypePointer Private %37
         %46 = OpVariable %45 Private
         %47 = OpConstant %14 8.69999981
         %48 = OpConstant %14 -8
         %49 = OpConstant %14 1.39999998
         %50 = OpConstant %14 2.29999995
         %51 = OpConstantComposite %37 %47 %48 %49 %50
         %52 = OpTypeInt 32 0
         %53 = OpConstant %52 10
         %54 = OpTypeArray %6 %53
         %55 = OpTypePointer Private %54
         %56 = OpVariable %55 Private
         %57 = OpConstant %6 35246
         %58 = OpConstant %6 69528
         %59 = OpConstant %6 10660
         %60 = OpConstant %6 20
         %61 = OpConstant %6 14940
         %62 = OpConstant %6 4936
         %63 = OpConstant %6 10
         %64 = OpConstant %6 0
         %65 = OpConstantComposite %54 %57 %58 %59 %60 %61 %62 %63 %64 %63 %61
         %66 = OpVariable %55 Private
         %67 = OpConstant %6 123807
         %68 = OpConstant %6 82478
         %69 = OpConstant %6 57824
         %70 = OpConstant %6 83886080
         %71 = OpConstant %6 97094
         %72 = OpConstant %6 48346
         %73 = OpConstantComposite %54 %67 %68 %63 %69 %70 %63 %64 %71 %64 %72
         %74 = OpVariable %45 Private
         %75 = OpConstant %14 -0.100000001
         %76 = OpConstant %14 -381.527008
         %77 = OpConstant %14 -2.5999999
         %78 = OpConstant %14 -43.3699989
         %79 = OpConstantComposite %37 %75 %76 %77 %78
         %80 = OpVariable %45 Private
         %81 = OpConstant %14 -0.132130876
         %82 = OpConstant %14 -1827.13684
         %83 = OpConstant %14 10.166667
         %84 = OpConstant %14 0.0167111196
         %85 = OpConstantComposite %37 %81 %82 %83 %84
         %86 = OpVariable %45 Private
         %87 = OpConstant %14 -623.757996
         %88 = OpConstant %14 3107.25781
         %89 = OpConstant %14 -5.0999999
         %90 = OpConstant %14 4057.05103
         %91 = OpConstantComposite %37 %87 %88 %89 %90
         %92 = OpVariable %45 Private
         %93 = OpConstant %14 1406413
         %94 = OpConstant %14 -15.1800003
         %95 = OpConstant %14 189027.906
         %96 = OpConstant %14 -3545.29712
         %97 = OpConstantComposite %37 %93 %94 %95 %96
         %98 = OpVariable %45 Private
         %99 = OpConstant %14 8470.73047
        %100 = OpConstant %14 -11.7600002
        %101 = OpConstant %14 -28.9099998
        %102 = OpConstant %14 2.4000001
        %103 = OpConstantComposite %37 %99 %100 %101 %102
        %104 = OpVariable %45 Private
        %105 = OpConstant %14 -9.5
        %106 = OpConstant %14 -6.80000019
        %107 = OpConstant %14 -1.29999995
        %108 = OpConstant %14 -9447.82715
        %109 = OpConstantComposite %37 %105 %106 %107 %108
        %110 = OpVariable %45 Private
        %111 = OpConstant %14 1.29999995
        %112 = OpConstant %14 0.100000001
        %113 = OpConstant %14 -947.028015
        %114 = OpConstant %14 -344.101013
        %115 = OpConstantComposite %37 %111 %112 %113 %114
        %116 = OpVariable %45 Private
        %117 = OpConstant %14 -7
        %118 = OpConstant %14 -7.0999999
        %119 = OpConstant %14 5940.02002
        %120 = OpConstant %14 1683.78357
        %121 = OpConstantComposite %37 %117 %118 %119 %120
        %122 = OpVariable %45 Private
        %123 = OpConstant %14 70.9800034
        %124 = OpConstant %14 55976.75
        %125 = OpConstant %14 39.1300011
        %126 = OpConstant %14 -530.893982
        %127 = OpConstantComposite %37 %123 %124 %125 %126
        %128 = OpVariable %45 Private
        %129 = OpConstant %14 -28.8299999
        %130 = OpConstant %14 78.4700012
        %131 = OpConstant %14 -1.89999998
        %132 = OpConstant %14 -3
        %133 = OpConstantComposite %37 %129 %130 %131 %132
        %134 = OpTypeStruct %6 %6 %6
        %135 = OpTypeArray %134 %53
        %136 = OpTypePointer Private %135
        %137 = OpVariable %136 Private
        %138 = OpConstant %6 -67566
        %139 = OpConstant %6 -87435
        %140 = OpConstant %6 27390
        %141 = OpConstantComposite %134 %138 %139 %140
        %142 = OpConstant %6 87526
        %143 = OpConstant %6 -80682
        %144 = OpConstant %6 28087
        %145 = OpConstantComposite %134 %142 %143 %144
        %146 = OpConstant %6 -84492
        %147 = OpConstant %6 64881
        %148 = OpConstant %6 -60382
        %149 = OpConstantComposite %134 %146 %147 %148
        %150 = OpConstant %6 -46105
        %151 = OpConstant %6 45280
        %152 = OpConstant %6 -80019
        %153 = OpConstantComposite %134 %150 %151 %152
        %154 = OpConstant %6 -6636
        %155 = OpConstant %6 44406
        %156 = OpConstant %6 78953
        %157 = OpConstantComposite %134 %154 %155 %156
        %158 = OpConstant %6 -76334
        %159 = OpConstant %6 5352
        %160 = OpConstant %6 -36549
        %161 = OpConstantComposite %134 %158 %159 %160
        %162 = OpConstant %6 83579
        %163 = OpConstant %6 49788
        %164 = OpConstant %6 -26814
        %165 = OpConstantComposite %134 %162 %163 %164
        %166 = OpConstant %6 6354
        %167 = OpConstant %6 -51910
        %168 = OpConstant %6 35431
        %169 = OpConstantComposite %134 %166 %167 %168
        %170 = OpConstant %6 -61363
        %171 = OpConstant %6 10400
        %172 = OpConstant %6 69890
        %173 = OpConstantComposite %134 %170 %171 %172
        %174 = OpConstant %6 43485
        %175 = OpConstant %6 -77403
        %176 = OpConstant %6 -6348
        %177 = OpConstantComposite %134 %174 %175 %176
        %178 = OpConstantComposite %135 %141 %145 %149 %153 %157 %161 %165 %169 %173 %177
        %179 = OpVariable %45 Private
        %180 = OpConstant %14 21.0400009
        %181 = OpConstant %14 908.033997
        %182 = OpConstant %14 -940.801025
        %183 = OpConstant %14 -7.5999999
        %184 = OpConstantComposite %37 %180 %181 %182 %183
        %185 = OpConstant %52 256
        %186 = OpTypeArray %6 %185
        %187 = OpTypePointer Private %186
        %188 = OpVariable %187 Private
        %189 = OpConstant %6 77871
        %190 = OpConstant %6 40700
        %191 = OpConstant %6 7294
        %192 = OpConstant %6 -35328
        %193 = OpConstant %6 7205
        %194 = OpConstant %6 28267
        %195 = OpConstant %6 23369
        %196 = OpConstant %6 -1386569312
        %197 = OpConstant %6 -93100
        %198 = OpConstant %6 -31135
        %199 = OpConstant %6 72705
        %200 = OpConstant %6 -21718
        %201 = OpConstant %6 43639
        %202 = OpConstant %6 19818
        %203 = OpConstant %6 25173
        %204 = OpConstant %6 60180
        %205 = OpConstant %6 35678
        %206 = OpConstant %6 -62984
        %207 = OpConstant %6 -79149
        %208 = OpConstant %6 20269
        %209 = OpConstantComposite %186 %189 %190 %191 %192 %193 %194 %195 %196 %197 %198 %199 %200 %201 %202 %203 %204 %205 %206 %207 %208 %205 %197 %189 %190 %203 %202 %191 %200 %195 %208 %196 %204 %207 %206 %201 %199 %193 %194 %192 %198 %192 %202 %196 %200 %198 %207 %206 %205 %201 %193 %190 %194 %195 %197 %199 %208 %204 %191 %203 %189 %190 %194 %208 %192 %203 %205 %202 %191 %201 %197 %198 %195 %207 %196 %204 %193 %200 %199 %206 %189 %193 %189 %192 %197 %206 %196 %207 %208 %205 %199 %202 %198 %194 %203 %195 %191 %204 %200 %190 %201 %202 %190 %207 %197 %201 %208 %195 %191 %206 %199 %198 %193 %192 %189 %194 %196 %204 %203 %205 %200 %192 %203 %205 %195 %204 %197 %202 %189 %199 %198 %206 %190 %201 %191 %193 %208 %200 %207 %196 %194 %195 %200 %208 %204 %203 %199 %196 %190 %197 %192 %206 %207 %198 %193 %194 %202 %189 %201 %191 %205 %205 %199 %202 %190 %203 %197 %189 %198 %196 %207 %194 %191 %192 %201 %204 %206 %193 %195 %200 %208 %201 %205 %197 %198 %191 %190 %192 %203 %189 %195 %196 %204 %200 %206 %194 %208 %202 %199 %207 %193 %200 %196 %204 %197 %190 %199 %191 %201 %206 %198 %189 %203 %208 %194 %205 %193 %207 %195 %192 %202 %198 %189 %204 %206 %195 %202 %203 %197 %190 %193 %191 %207 %196 %201 %194 %199 %200 %205 %192 %208 %205 %204 %198 %203 %191 %202 %190 %197 %196 %207 %192 %189 %200 %206 %199 %194
        %210 = OpTypeStruct %54
        %211 = OpTypePointer Private %210
        %212 = OpVariable %211 Private
        %213 = OpConstant %6 -65346
        %214 = OpConstant %6 4377
        %215 = OpConstant %6 80606
        %216 = OpConstant %6 4218
        %217 = OpConstant %6 -28423
        %218 = OpConstant %6 80066
        %219 = OpConstant %6 31980
        %220 = OpConstant %6 -1
        %221 = OpConstant %6 2590
        %222 = OpConstant %6 73379
        %223 = OpConstantComposite %54 %213 %214 %215 %216 %217 %218 %219 %220 %221 %222
        %224 = OpConstantComposite %210 %223
        %225 = OpVariable %45 Private
        %226 = OpConstant %14 8084.70068
        %227 = OpConstant %14 -2.20000005
        %228 = OpConstant %14 -4434.56982
        %229 = OpConstant %14 -34.7000008
        %230 = OpConstantComposite %37 %226 %227 %228 %229
        %231 = OpVariable %45 Private
        %232 = OpConstant %14 -38.0400009
        %233 = OpConstant %14 -5.30000019
        %234 = OpConstant %14 -5.5
        %235 = OpConstant %14 -0.800000012
        %236 = OpConstantComposite %37 %232 %233 %234 %235
        %237 = OpVariable %45 Private
        %238 = OpConstant %14 -5.9000001
        %239 = OpConstant %14 0.300000012
        %240 = OpConstant %14 255.873993
        %241 = OpConstant %14 -202.123001
        %242 = OpConstantComposite %37 %238 %239 %240 %241
        %243 = OpVariable %55 Private
        %244 = OpConstant %6 81320
        %245 = OpConstant %6 -86
        %246 = OpConstant %6 -75459
        %247 = OpConstant %6 -46918
        %248 = OpConstant %6 29719
        %249 = OpConstant %6 37712
        %250 = OpConstant %6 26392
        %251 = OpConstantComposite %54 %63 %244 %63 %245 %246 %247 %248 %63 %249 %250
        %258 = OpConstant %6 1
        %274 = OpConstant %6 7
        %282 = OpConstant %6 9
        %284 = OpTypePointer Private %6
        %368 = OpTypeImage %14 2D 0 0 0 1 Unknown
        %369 = OpTypeSampledImage %368
        %370 = OpTypePointer UniformConstant %369
        %371 = OpVariable %370 UniformConstant
        %375 = OpConstant %14 0.00390625
        %378 = OpTypePointer Function %14
        %380 = OpConstant %14 0.318309873
        %383 = OpConstant %14 0.00100000005
        %387 = OpConstant %14 0
        %393 = OpConstant %14 -22.6100006
        %394 = OpConstant %52 0
        %398 = OpConstant %52 1
        %414 = OpConstant %6 -17374
        %416 = OpConstant %6 -23390
        %418 = OpConstant %6 -5018
        %434 = OpConstant %6 2
        %454 = OpConstant %14 0.970000029
        %455 = OpConstant %14 0.189999998
        %472 = OpConstant %14 0.5
        %478 = OpConstant %14 1
        %479 = OpTypeMatrix %15 4
        %502 = OpConstant %14 -2
        %503 = OpTypePointer Private %14
        %507 = OpConstant %6 270
        %511 = OpConstant %6 8
        %515 = OpConstant %14 10
        %533 = OpConstant %14 -8170.25586
        %534 = OpConstant %14 -864.375
        %535 = OpConstantComposite %15 %533 %534
        %538 = OpConstant %14 0.600000024
        %542 = OpTypeVector %52 2
        %543 = OpTypePointer Function %542
        %546 = OpConstant %14 0.400000006
        %547 = OpConstantComposite %15 %546 %387
        %549 = OpConstant %14 2.5
        %550 = OpConstant %14 1.66666663
        %551 = OpConstantComposite %15 %549 %550
        %553 = OpConstant %14 256
        %556 = OpTypePointer Function %52
        %565 = OpConstant %52 31
        %568 = OpConstant %52 4294967295
        %585 = OpConstant %52 2147483648
        %600 = OpTypeVector %6 2
        %601 = OpTypePointer Function %600
        %604 = OpConstantComposite %15 %546 %538
        %606 = OpConstantComposite %15 %549 %549
        %613 = OpConstant %6 5
        %618 = OpConstant %6 32
        %653 = OpTypeVector %14 3
        %654 = OpTypePointer Function %653
        %656 = OpVariable %370 UniformConstant
        %670 = OpConstant %14 0.25
        %671 = OpConstantComposite %15 %670 %670
        %673 = OpConstantTrue %39
        %682 = OpConstantComposite %15 %478 %478
        %691 = OpConstant %14 397.519989
        %692 = OpConstant %14 3.79999995
        %693 = OpConstantComposite %15 %691 %692
        %744 = OpConstant %14 -3463.15381
        %748 = OpConstant %6 210
        %752 = OpConstant %6 6
        %762 = OpConstant %6 240
        %835 = OpConstant %14 3.14159298
        %838 = OpConstantComposite %15 %472 %472
        %844 = OpConstantComposite %15 %235 %107
        %917 = OpConstant %6 -87319
        %919 = OpConstant %6 -3
        %921 = OpConstant %6 63213
        %974 = OpConstant %14 10734679
        %975 = OpConstant %14 -7467291
        %976 = OpConstantComposite %15 %974 %975
       %1012 = OpTypeStruct %15
       %1013 = OpTypePointer Uniform %1012
       %1014 = OpVariable %1013 Uniform
       %1015 = OpTypePointer Uniform %14
       %1133 = OpTypePointer Input %37
       %1134 = OpVariable %1133 Input
       %1135 = OpTypePointer Input %14
       %1139 = OpConstant %14 -1695.47925
       %1140 = OpConstant %14 -314.105011
       %1141 = OpConstantComposite %15 %1139 %1140
       %1143 = OpTypeVector %39 2
       %1154 = OpConstant %14 9142.77832
       %1229 = OpTypeMatrix %653 3
       %1311 = OpConstantFalse %39
       %1322 = OpConstant %6 41910
       %1324 = OpConstant %6 -61738
       %1325 = OpTypePointer Function %39
       %1328 = OpConstant %6 79310
       %1329 = OpConstant %6 84067
       %1330 = OpConstantComposite %600 %1328 %1329
       %1338 = OpTypeVector %6 4
       %1343 = OpConstant %6 3
       %1348 = OpConstantComposite %37 %387 %387 %387 %478
       %1355 = OpConstant %6 16
       %1358 = OpConstant %6 255
       %1378 = OpConstant %52 2
       %1390 = OpConstant %52 3
       %1406 = OpConstant %14 -6729.2583
       %1414 = OpConstant %14 7432.63428
       %1415 = OpConstant %14 8452.69629
       %1416 = OpConstantComposite %15 %1414 %1415
       %1418 = OpConstant %14 -1701016
       %1419 = OpConstant %14 2074544.38
       %1420 = OpConstant %14 -438724.438
       %1421 = OpConstant %14 -305607.938
       %1422 = OpConstantComposite %37 %1418 %1419 %1420 %1421
       %1448 = OpConstant %6 4
       %1454 = OpConstant %14 21.6100006
       %1479 = OpVariable %370 UniformConstant
       %1491 = OpVariable %370 UniformConstant
       %1510 = OpTypePointer Output %37
       %1511 = OpVariable %1510 Output
       %1535 = OpConstant %14 697.88501
       %1547 = OpTypeMatrix %15 2
       %1569 = OpTypeMatrix %37 4
       %1570 = OpConstantComposite %37 %478 %387 %387 %387
       %1571 = OpConstantComposite %37 %387 %478 %387 %387
       %1572 = OpConstantComposite %37 %387 %387 %478 %387
       %1573 = OpConstantComposite %1569 %1570 %1571 %1572 %1348
       %1584 = OpConstant %14 17.8976974
       %1591 = OpConstant %14 4.69999981
       %1593 = OpConstant %14 -7817.26367
       %1594 = OpConstant %14 -261.349274
       %1606 = OpTypeVector %39 4
       %1609 = OpConstantComposite %37 %387 %387 %387 %387
       %1617 = OpConstant %14 8.5
       %1620 = OpConstant %14 9.60000038
       %1622 = OpConstant %14 -84.7600021
       %1623 = OpConstant %14 -824.338013
       %1624 = OpConstantComposite %15 %1622 %1623
       %1635 = OpConstant %14 -557.21698
       %1637 = OpConstant %14 6
       %1638 = OpConstant %14 14.8699999
       %1639 = OpConstantComposite %15 %1637 %1638
       %1641 = OpConstant %14 7.69999981
       %1642 = OpConstant %14 1.79999995
       %1643 = OpConstant %14 -5.4000001
       %1644 = OpConstantComposite %37 %1641 %75 %1642 %1643
       %1654 = OpTypeVector %6 3
       %1655 = OpConstantComposite %1654 %64 %64 %64
       %1668 = OpConstant %14 2.0999999
       %1676 = OpVariable %370 UniformConstant
       %1682 = OpConstant %14 -8963.87207
       %1694 = OpConstant %52 9
       %1695 = OpTypeArray %14 %1694
       %1696 = OpConstant %14 -0.25
       %1697 = OpConstant %14 -0.5
       %1698 = OpConstant %14 -1
       %1699 = OpConstantComposite %1695 %478 %472 %1696 %472 %478 %1697 %1696 %1697 %1698
       %1709 = OpTypePointer Function %1695
       %1724 = OpConstant %14 -448.940002
       %1773 = OpConstant %14 13.2799997
       %1774 = OpConstant %14 -38.0499992
       %1775 = OpConstantComposite %15 %1773 %1774
       %1779 = OpTypeStruct %15
       %1780 = OpTypePointer Uniform %1779
       %1781 = OpVariable %1780 Uniform
       %1782 = OpTypePointer Uniform %15
       %1786 = OpConstant %14 0.699999988
       %1787 = OpConstantComposite %15 %1786 %239
       %1788 = OpConstant %14 0.899999976
       %1789 = OpConstantComposite %15 %472 %1788
       %1790 = OpConstantComposite %15 %112 %546
       %1802 = OpConstantComposite %37 %478 %387 %387 %478
       %1804 = OpConstant %14 -0.00294907135
       %1805 = OpConstant %14 3.92158842
       %1806 = OpConstantComposite %15 %1804 %1805
       %1810 = OpConstantComposite %15 %550 %478
       %1830 = OpConstant %6 11
       %1836 = OpConstant %6 12
       %1874 = OpConstant %6 2767
       %1876 = OpConstant %6 10240
       %1878 = OpConstant %6 -94431
       %1880 = OpConstant %6 -52482
       %1943 = OpConstant %14 2
       %1966 = OpConstant %6 -25210
       %1969 = OpConstant %6 -85293
       %2021 = OpConstant %14 127724
       %2025 = OpConstant %6 180
       %2089 = OpConstant %14 2.70000005
       %2090 = OpConstantComposite %15 %132 %2089
       %2092 = OpConstant %6 1018400
       %2094 = OpConstant %14 294.997009
       %2095 = OpConstant %14 206.733002
       %2096 = OpConstant %14 3472.92358
       %2097 = OpConstantComposite %37 %47 %2094 %2095 %2096
       %2106 = OpConstant %6 159536
       %2164 = OpConstant %14 30.3600006
       %2165 = OpConstant %14 9
       %2166 = OpConstantComposite %653 %478 %2164 %2165
       %2234 = OpConstantComposite %37 %478 %387 %478 %387
       %2235 = OpConstantComposite %37 %387 %478 %478 %387
       %2236 = OpConstantComposite %1569 %2234 %2235 %1572 %1348
       %2238 = OpTypeMatrix %653 2
       %2263 = OpConstant %14 6816.07471
       %2272 = OpConstant %52 8
       %2273 = OpTypeArray %37 %2272
       %2274 = OpConstant %14 4
       %2275 = OpConstant %14 20
       %2276 = OpConstantComposite %37 %2274 %2274 %2275 %2274
       %2277 = OpConstantComposite %37 %2274 %2274 %2274 %2275
       %2278 = OpConstantComposite %37 %2274 %2275 %2275 %2274
       %2279 = OpConstant %14 8
       %2280 = OpConstantComposite %37 %2275 %2274 %2274 %2279
       %2281 = OpConstantComposite %37 %2279 %1637 %2274 %1943
       %2282 = OpConstant %14 12
       %2283 = OpConstantComposite %37 %1943 %2282 %1943 %2274
       %2284 = OpConstant %14 16
       %2285 = OpConstantComposite %37 %2284 %1943 %2274 %2274
       %2286 = OpConstant %14 22
       %2287 = OpConstantComposite %37 %2282 %2286 %2274 %2274
       %2288 = OpConstantComposite %2273 %2276 %2277 %2278 %2280 %2281 %2283 %2285 %2287
       %2294 = OpTypePointer Function %2273
       %2303 = OpConstant %52 16
       %2304 = OpTypeArray %37 %2303
       %2305 = OpConstantComposite %37 %472 %387 %387 %478
       %2306 = OpConstantComposite %37 %387 %472 %387 %478
       %2307 = OpConstantComposite %37 %472 %472 %387 %478
       %2308 = OpConstantComposite %37 %387 %387 %472 %478
       %2309 = OpConstantComposite %37 %472 %387 %472 %478
       %2310 = OpConstantComposite %37 %387 %472 %472 %478
       %2311 = OpConstantComposite %37 %472 %472 %472 %478
       %2312 = OpConstantComposite %37 %387 %478 %387 %478
       %2313 = OpConstantComposite %37 %478 %478 %387 %478
       %2314 = OpConstantComposite %37 %387 %387 %478 %478
       %2315 = OpConstantComposite %37 %478 %387 %478 %478
       %2316 = OpConstantComposite %37 %387 %478 %478 %478
       %2317 = OpConstantComposite %37 %478 %478 %478 %478
       %2318 = OpConstantComposite %2304 %1348 %2305 %2306 %2307 %2308 %2309 %2310 %2311 %1348 %1802 %2312 %2313 %2314 %2315 %2316 %2317
       %2337 = OpConstant %6 15
       %2342 = OpTypePointer Function %2304
       %2347 = OpConstant %6 -32145
       %2348 = OpTypePointer Function %134
       %2350 = OpConstant %6 -93071
       %2351 = OpConstantComposite %134 %63 %2350 %64
       %2353 = OpConstant %6 -66367
       %2362 = OpConstant %14 -816.442993
       %2363 = OpConstant %14 3926.80176
       %2364 = OpConstantComposite %15 %2362 %2363
       %2366 = OpConstant %14 -5870.99707
       %2367 = OpConstant %14 -1.5
       %2368 = OpConstant %14 -81.9000015
       %2369 = OpConstant %14 312.723999
       %2370 = OpConstantComposite %37 %2366 %2367 %2368 %2369
       %2426 = OpConstant %6 -11
       %2461 = OpTypePointer Private %134
       %2465 = OpConstant %6 -4873
       %2467 = OpConstant %14 -76.75
       %2471 = OpConstant %6 150
       %2525 = OpConstant %6 160
       %2527 = OpConstant %6 -27417
       %2557 = OpConstant %14 -77.6299973
       %2558 = OpConstant %14 -43.2099991
       %2559 = OpConstantComposite %15 %2557 %2558
       %2561 = OpConstant %14 1717.6864
       %2562 = OpConstant %14 4856.64746
       %2563 = OpConstant %14 -39.6899986
       %2564 = OpConstantComposite %37 %2561 %233 %2562 %2563
       %2586 = OpConstant %6 92624
       %2627 = OpConstant %6 -77961
       %2628 = OpConstant %6 -13769
       %2629 = OpConstantComposite %600 %2627 %2628
       %2637 = OpConstant %6 256
       %2645 = OpConstant %14 -83.9199982
       %2646 = OpConstant %14 146.619995
       %2647 = OpConstantComposite %15 %2645 %2646
       %2743 = OpConstant %6 -12314
       %2811 = OpConstant %6 115
       %2812 = OpConstant %6 133
       %2813 = OpConstant %6 164
       %2814 = OpConstant %6 176
       %2815 = OpConstant %6 184
       %2816 = OpConstant %6 190
       %2817 = OpConstant %6 192
       %2818 = OpConstant %6 191
       %2819 = OpConstant %6 187
       %2820 = OpConstant %6 181
       %2821 = OpConstant %6 172
       %2822 = OpConstant %6 163
       %2823 = OpConstant %6 153
       %2824 = OpConstant %6 143
       %2825 = OpConstant %6 134
       %2826 = OpConstant %6 126
       %2827 = OpConstant %6 120
       %2828 = OpConstant %6 116
       %2829 = OpConstant %6 114
       %2830 = OpConstant %6 117
       %2831 = OpConstant %6 121
       %2832 = OpConstant %6 127
       %2833 = OpConstant %6 141
       %2834 = OpConstant %6 148
       %2835 = OpConstant %6 154
       %2836 = OpConstant %6 159
       %2837 = OpConstant %6 162
       %2838 = OpConstant %6 161
       %2839 = OpConstant %6 157
       %2840 = OpConstant %6 151
       %2841 = OpConstant %6 124
       %2842 = OpConstant %6 113
       %2843 = OpConstant %6 103
       %2844 = OpConstant %6 94
       %2845 = OpConstant %6 87
       %2846 = OpConstant %6 82
       %2847 = OpConstant %6 79
       %2848 = OpConstant %6 80
       %2849 = OpConstant %6 84
       %2850 = OpConstant %6 91
       %2851 = OpConstant %6 101
       %2852 = OpConstant %6 130
       %2853 = OpConstant %6 146
       %2854 = OpConstant %6 182
       %2855 = OpConstant %6 199
       %2856 = OpConstant %6 215
       %2857 = OpConstant %6 229
       %2858 = OpConstant %6 249
       %2859 = OpConstant %6 254
       %2860 = OpConstant %6 250
       %2861 = OpConstant %6 243
       %2862 = OpConstant %6 233
       %2863 = OpConstant %6 223
       %2864 = OpConstant %6 212
       %2865 = OpConstant %6 200
       %2866 = OpConstant %6 166
       %2867 = OpConstant %6 169
       %2868 = OpConstant %6 174
       %2869 = OpConstant %6 179
       %2870 = OpConstant %6 185
       %2871 = OpConstant %6 193
       %2872 = OpConstant %6 195
       %2873 = OpConstant %6 188
       %2874 = OpConstant %6 171
       %2875 = OpConstant %6 149
       %2876 = OpConstant %6 137
       %2877 = OpConstant %6 125
       %2878 = OpConstant %6 105
       %2879 = OpConstant %6 97
       %2880 = OpConstant %6 93
       %2881 = OpConstant %6 98
       %2882 = OpConstant %6 106
       %2883 = OpConstant %6 145
       %2884 = OpConstant %6 177
       %2885 = OpConstant %6 208
       %2886 = OpConstant %6 221
       %2887 = OpConstant %6 231
       %2888 = OpConstant %6 239
       %2889 = OpConstant %6 244
       %2890 = OpConstant %6 242
       %2891 = OpConstant %6 236
       %2892 = OpConstant %6 228
       %2893 = OpConstant %6 218
       %2894 = OpConstant %6 207
       %2895 = OpConstant %6 194
       %2896 = OpConstant %6 158
       %2897 = OpConstant %6 135
       %2898 = OpConstant %6 132
       %2899 = OpConstant %6 131
       %2900 = OpConstant %6 138
       %2901 = OpConstant %6 147
       %2902 = OpConstant %6 155
       %2903 = OpConstant %6 152
       %2904 = OpConstant %6 139
       %2905 = OpConstant %6 129
       %2906 = OpConstant %6 118
       %2907 = OpConstant %6 68
       %2908 = OpConstant %6 58
       %2909 = OpConstant %6 49
       %2910 = OpConstant %6 43
       %2911 = OpConstant %6 40
       %2912 = OpConstant %6 41
       %2913 = OpConstant %6 44
       %2914 = OpConstant %6 51
       %2915 = OpConstant %6 61
       %2916 = OpConstant %6 73
       %2917 = OpConstant %6 119
       %2918 = OpConstant %6 173
       %2919 = OpConstant %6 186
       %2920 = OpConstant %6 128
       %2921 = OpConstant %6 104
       %2922 = OpConstant %6 86
       %2923 = OpConstant %6 81
       %2924 = OpConstant %6 77
       %2925 = OpConstant %6 76
       %2926 = OpConstant %6 89
       %2927 = OpConstant %6 102
       %2928 = OpConstant %6 92
       %2929 = OpConstant %6 83
       %2930 = OpConstant %6 62
       %2931 = OpConstant %6 50
       %2932 = OpConstant %6 38
       %2933 = OpConstant %6 26
       %2934 = OpConstant %6 21
       %2935 = OpConstant %6 33
       %2936 = OpConstant %6 48
       %2937 = OpConstant %6 64
       %2938 = OpConstant %6 144
       %2939 = OpConstant %6 123
       %2940 = OpConstant %6 112
       %2941 = OpConstant %6 100
       %2942 = OpConstant %6 90
       %2943 = OpConstant %6 65
       %2944 = OpConstant %6 67
       %2945 = OpConstant %6 70
       %2946 = OpConstant %6 75
       %2947 = OpConstant %6 95
       %2948 = OpConstant %6 88
       %2949 = OpConstant %6 69
       %2950 = OpConstant %6 47
       %2951 = OpConstant %6 36
       %2952 = OpConstant %6 18
       %2953 = OpConstant %6 13
       %2954 = OpConstant %6 22
       %2955 = OpConstant %6 45
       %2956 = OpConstant %6 60
       %2957 = OpConstantComposite %186 %2811 %2812 %2471 %2813 %2814 %2815 %2816 %2817 %2818 %2819 %2820 %2821 %2822 %2823 %2824 %2825 %2826 %2827 %2828 %2829 %2829 %2830 %2831 %2832 %2825 %2833 %2834 %2835 %2836 %2837 %2822 %2838 %2839 %2840 %2824 %2825 %2841 %2842 %2843 %2844 %2845 %2846 %2847 %2848 %2849 %2850 %2851 %2829 %2852 %2853 %2813 %2854 %2855 %2856 %2857 %762 %2858 %2859 %2637 %2859 %2860 %2861 %2862 %2863 %2864 %2865 %2816 %2025 %2821 %2866 %2822 %2838 %2837 %2813 %2867 %2868 %2869 %2870 %2816 %2871 %2872 %2872 %2817 %2873 %2025 %2874 %2838 %2875 %2876 %2877 %2829 %2878 %2879 %2880 %2850 %2880 %2881 %2882 %2830 %2852 %2883 %2838 %2884 %2871 %2885 %2886 %2887 %2888 %2861 %2889 %2890 %2891 %2892 %2893 %2894 %2895 %2820 %2867 %2896 %2834 %2833 %2897 %2898 %2899 %2898 %2897 %2900 %2824 %2901 %2840 %2835 %2902 %2902 %2903 %2853 %2904 %2905 %2906 %2882 %2880 %2848 %2907 %2908 %2909 %2910 %2911 %2912 %2913 %2914 %2915 %2916 %2845 %2843 %2917 %2825 %2875 %2837 %2918 %2820 %2919 %2873 %2919 %2820 %2868 %2813 %2823 %2833 %2920 %2828 %2921 %2844 %2922 %2923 %2924 %2925 %2924 %2848 %2849 %2926 %2844 %2881 %2927 %2921 %2921 %2927 %2881 %2928 %2929 %2916 %2930 %2931 %2932 %2933 %1355 %511 %434 %64 %64 %1448 %1830 %2934 %2935 %2936 %2937 %2923 %2881 %2829 %2905 %2833 %2840 %2896 %2838 %2838 %2896 %2903 %2938 %2825 %2939 %2940 %2941 %2942 %2923 %2916 %2907 %2943 %2943 %2944 %2945 %2946 %2923 %2845 %2928 %2879 %2851 %2843 %2927 %2941 %2947 %2948 %2847 %2949 %2908 %2950 %2951 %2933 %2952 %2953 %1830 %1830 %2337 %2954 %618 %2955 %2956 %2924 %2844
       %2961 = OpTypePointer Function %186
       %2988 = OpConstant %14 15
       %3001 = OpConstant %14 -6.5999999
       %3012 = OpConstant %14 27.6100006
       %3126 = OpTypeArray %14 %53
       %3127 = OpTypePointer Function %3126
       %3129 = OpConstant %14 -49.0600014
       %3130 = OpConstant %14 -6.0999999
       %3131 = OpConstant %14 -0
       %3132 = OpConstant %14 -2421.21631
       %3133 = OpConstant %14 71.8025436
       %3134 = OpConstant %14 -9380.34375
       %3135 = OpConstantComposite %3126 %3129 %3130 %77 %3131 %3132 %3133 %515 %3134 %3130 %3132
       %3140 = OpTypeStruct %15
       %3141 = OpTypePointer PushConstant %3140
       %3142 = OpVariable %3141 PushConstant
       %3143 = OpTypePointer PushConstant %14
       %3166 = OpConstant %14 -9
       %3176 = OpConstant %6 -31027
       %3198 = OpConstant %6 -27250
       %3200 = OpConstant %6 176204
       %3315 = OpConstant %6 1000
       %3323 = OpConstant %14 48433
       %3325 = OpConstant %14 4.0999999
       %3326 = OpConstant %14 -824.721008
       %3327 = OpConstantComposite %15 %3325 %3326
       %3341 = OpConstant %14 5.0999999
       %3348 = OpConstant %14 -4.4000001
       %3349 = OpConstant %14 -4464.65918
       %3350 = OpConstantComposite %15 %3348 %3349
       %3357 = OpConstantComposite %15 %387 %387
       %3451 = OpConstant %14 -358.031006
       %3544 = OpConstant %14 -0.00239481987
       %3545 = OpConstant %14 3.07517529
       %3546 = OpConstantComposite %15 %3544 %3545
       %3613 = OpConstant %6 -48916
       %3643 = OpConstant %6 997060
       %3646 = OpConstant %6 60587
       %3686 = OpTypeMatrix %37 3
       %3695 = OpConstant %14 -22.6900005
       %3696 = OpConstant %14 38.7700005
       %3697 = OpConstantComposite %15 %3695 %3696
       %3746 = OpConstant %6 -11500
       %3748 = OpConstant %14 45.0699997
       %3751 = OpConstant %14 -25.3799992
       %3775 = OpConstant %6 -11359
       %3780 = OpConstant %6 -74820
       %3782 = OpConstant %6 74494
       %3799 = OpConstant %6 62861
       %3801 = OpConstant %6 -28277
       %3802 = OpConstant %6 -12249
       %3803 = OpConstantComposite %600 %3801 %3802
       %3834 = OpConstant %6 2637
       %3881 = OpConstant %14 -6889.12354
       %3882 = OpConstant %14 0.200000003
       %3883 = OpConstantComposite %15 %3881 %3882
       %3885 = OpConstant %14 -3.9000001
       %3917 = OpConstant %14 664.703003
       %3957 = OpConstant %6 60306
       %3958 = OpConstantComposite %134 %63 %63 %3957
       %3971 = OpConstant %14 -7020.2749
       %3972 = OpConstant %14 -420.589996
       %3973 = OpConstantComposite %15 %3971 %3972
       %3975 = OpConstant %14 -104.614288
       %3986 = OpVariable %370 UniformConstant
       %3996 = OpConstant %6 3100
       %3998 = OpConstant %6 -5006
       %4092 = OpConstant %14 8103.40039
       %4162 = OpVariable %370 UniformConstant
       %4170 = OpConstant %14 5148602
       %4171 = OpConstant %14 -8467928
       %4172 = OpConstant %14 -8933717
       %4173 = OpConstantComposite %653 %4170 %4171 %4172
       %4182 = OpConstant %14 4705.15283
       %4215 = OpConstant %14 -2808400.5
       %4216 = OpConstant %14 -54078.1016
       %4217 = OpConstantComposite %15 %4215 %4216
       %4219 = OpConstant %6 67172
       %4222 = OpConstant %6 46113
       %4223 = OpConstant %6 8823
       %4224 = OpConstantComposite %600 %4222 %4223
       %4231 = OpConstant %14 -10.0986462
       %4303 = OpConstant %6 45474
       %4304 = OpConstant %6 84200
       %4305 = OpConstantComposite %600 %4303 %4304
       %4398 = OpConstant %6 -2
       %4405 = OpConstant %6 -4
       %4409 = OpConstant %6 -5
       %4529 = OpConstantComposite %600 %258 %258
       %4554 = OpConstant %6 14
       %4604 = OpConstant %14 -41.6599998
       %4605 = OpConstant %14 3.5999999
       %4606 = OpConstantComposite %15 %478 %387
       %4607 = OpConstantComposite %15 %387 %478
       %4608 = OpConstantComposite %1547 %4606 %4607
       %4729 = OpConstant %6 110
       %4754 = OpConstant %14 4823.70264
       %4755 = OpConstantComposite %15 %4754 %239
       %4757 = OpConstant %14 7434.63721
       %4758 = OpConstant %14 -686.502014
       %4759 = OpConstant %14 5088.30713
       %4760 = OpConstantComposite %37 %4757 %50 %4758 %4759
       %4784 = OpConstant %14 697.434021
       %4908 = OpConstant %14 4.4000001
       %4910 = OpConstant %14 5567554
       %4911 = OpConstant %14 3831.67505
       %4912 = OpConstantComposite %15 %4910 %4911
       %5018 = OpConstant %14 62.0999985
       %5398 = OpConstant %14 -95.5899963
       %5411 = OpConstant %6 71216
       %5413 = OpConstant %6 98570
       %5492 = OpConstant %14 104.359001
       %5493 = OpConstant %14 -2.79999995
       %5494 = OpConstantComposite %15 %5492 %5493
       %5505 = OpConstant %14 7.80000019
       %5507 = OpConstant %14 47.9399986
       %5508 = OpConstant %14 -84.4657135
       %5509 = OpConstantComposite %15 %5507 %5508
          %4 = OpFunction %2 None %3
          %5 = OpLabel
       %1405 = OpVariable %378 Function
       %1412 = OpVariable %7 Function
       %1413 = OpVariable %16 Function
       %1417 = OpVariable %38 Function
       %1423 = OpVariable %7 Function
       %1453 = OpVariable %378 Function
       %1485 = OpVariable %7 Function
       %1486 = OpVariable %16 Function
       %1490 = OpVariable %38 Function
       %1504 = OpVariable %378 Function
       %1529 = OpVariable %378 Function
       %1583 = OpVariable %378 Function
       %1616 = OpVariable %378 Function
       %1618 = OpVariable %7 Function
       %1619 = OpVariable %378 Function
       %1621 = OpVariable %16 Function
       %1634 = OpVariable %378 Function
       %1636 = OpVariable %16 Function
       %1640 = OpVariable %38 Function
       %1645 = OpVariable %7 Function
       %1646 = OpVariable %7 Function
       %1667 = OpVariable %378 Function
       %1710 = OpVariable %1709 Function
       %1716 = OpVariable %654 Function
       %1723 = OpVariable %378 Function
       %1749 = OpVariable %16 Function
       %1772 = OpVariable %16 Function
       %1776 = OpVariable %16 Function
       %1791 = OpVariable %16 Function
       %1793 = OpVariable %16 Function
       %1794 = OpVariable %16 Function
       %1795 = OpVariable %16 Function
       %1803 = OpVariable %16 Function
       %1807 = OpVariable %601 Function
       %1814 = OpVariable %7 Function
       %1823 = OpVariable %1325 Function
       %1828 = OpVariable %1325 Function
       %1834 = OpVariable %1325 Function
       %1848 = OpVariable %7 Function
       %1849 = OpVariable %7 Function
       %1873 = OpVariable %7 Function
       %1875 = OpVariable %7 Function
       %1877 = OpVariable %7 Function
       %1879 = OpVariable %7 Function
       %1881 = OpVariable %7 Function
       %1882 = OpVariable %7 Function
       %1910 = OpVariable %7 Function
       %1938 = OpVariable %7 Function
       %1965 = OpVariable %7 Function
       %1967 = OpVariable %7 Function
       %1968 = OpVariable %7 Function
       %1970 = OpVariable %7 Function
       %1971 = OpVariable %7 Function
       %1988 = OpVariable %7 Function
       %1990 = OpVariable %7 Function
       %1995 = OpVariable %7 Function
       %2003 = OpVariable %7 Function
       %2005 = OpVariable %7 Function
       %2007 = OpVariable %7 Function
       %2020 = OpVariable %378 Function
       %2088 = OpVariable %16 Function
       %2091 = OpVariable %7 Function
       %2093 = OpVariable %38 Function
       %2098 = OpVariable %7 Function
       %2104 = OpVariable %7 Function
       %2105 = OpVariable %7 Function
       %2131 = OpVariable %7 Function
       %2132 = OpVariable %7 Function
       %2133 = OpVariable %7 Function
       %2134 = OpVariable %7 Function
       %2141 = OpVariable %7 Function
       %2143 = OpVariable %7 Function
       %2148 = OpVariable %7 Function
       %2156 = OpVariable %7 Function
       %2158 = OpVariable %7 Function
       %2160 = OpVariable %7 Function
       %2163 = OpVariable %654 Function
       %2167 = OpVariable %654 Function
       %2174 = OpVariable %16 Function
       %2190 = OpVariable %7 Function
       %2191 = OpVariable %7 Function
       %2215 = OpVariable %7 Function
       %2216 = OpVariable %7 Function
       %2262 = OpVariable %378 Function
       %2291 = OpVariable %16 Function
       %2293 = OpVariable %38 Function
       %2295 = OpVariable %2294 Function
       %2321 = OpVariable %2294 Function
       %2327 = OpVariable %2294 Function
       %2343 = OpVariable %2342 Function
       %2346 = OpVariable %7 Function
       %2349 = OpVariable %2348 Function
       %2352 = OpVariable %7 Function
       %2359 = OpVariable %7 Function
       %2360 = OpVariable %7 Function
       %2361 = OpVariable %16 Function
       %2365 = OpVariable %38 Function
       %2371 = OpVariable %7 Function
       %2425 = OpVariable %7 Function
       %2427 = OpVariable %7 Function
       %2428 = OpVariable %7 Function
       %2429 = OpVariable %7 Function
       %2464 = OpVariable %7 Function
       %2466 = OpVariable %378 Function
       %2524 = OpVariable %7 Function
       %2526 = OpVariable %7 Function
       %2528 = OpVariable %7 Function
       %2556 = OpVariable %16 Function
       %2560 = OpVariable %38 Function
       %2565 = OpVariable %7 Function
       %2582 = OpVariable %7 Function
       %2583 = OpVariable %7 Function
       %2584 = OpVariable %7 Function
       %2585 = OpVariable %7 Function
       %2625 = OpVariable %7 Function
       %2626 = OpVariable %601 Function
       %2644 = OpVariable %16 Function
       %2648 = OpVariable %601 Function
       %2654 = OpVariable %7 Function
       %2712 = OpVariable %7 Function
       %2720 = OpVariable %7 Function
       %2741 = OpVariable %7 Function
       %2742 = OpVariable %7 Function
       %2744 = OpVariable %7 Function
       %2745 = OpVariable %7 Function
       %2761 = OpVariable %7 Function
       %2762 = OpVariable %7 Function
       %2779 = OpVariable %7 Function
       %2781 = OpVariable %7 Function
       %2786 = OpVariable %7 Function
       %2794 = OpVariable %7 Function
       %2796 = OpVariable %7 Function
       %2798 = OpVariable %7 Function
       %2962 = OpVariable %2961 Function
       %2974 = OpVariable %2961 Function
       %2987 = OpVariable %378 Function
       %2994 = OpVariable %2961 Function
       %3011 = OpVariable %378 Function
       %3113 = OpVariable %7 Function
       %3128 = OpVariable %3127 Function
       %3157 = OpVariable %378 Function
       %3160 = OpVariable %378 Function
       %3175 = OpVariable %7 Function
       %3177 = OpVariable %7 Function
       %3178 = OpVariable %7 Function
       %3179 = OpVariable %7 Function
       %3196 = OpVariable %7 Function
       %3197 = OpVariable %7 Function
       %3199 = OpVariable %7 Function
       %3201 = OpVariable %7 Function
       %3203 = OpVariable %7 Function
       %3205 = OpVariable %7 Function
       %3208 = OpVariable %7 Function
       %3258 = OpVariable %7 Function
       %3286 = OpVariable %7 Function
       %3287 = OpVariable %7 Function
       %3322 = OpVariable %378 Function
       %3324 = OpVariable %16 Function
       %3340 = OpVariable %378 Function
       %3347 = OpVariable %16 Function
       %3356 = OpVariable %543 Function
       %3367 = OpVariable %556 Function
       %3378 = OpVariable %556 Function
       %3389 = OpVariable %378 Function
       %3405 = OpVariable %601 Function
       %3411 = OpVariable %7 Function
       %3421 = OpVariable %7 Function
       %3429 = OpVariable %7 Function
       %3450 = OpVariable %378 Function
       %3543 = OpVariable %16 Function
       %3547 = OpVariable %654 Function
       %3554 = OpVariable %16 Function
       %3570 = OpVariable %16 Function
       %3572 = OpVariable %16 Function
       %3573 = OpVariable %16 Function
       %3574 = OpVariable %16 Function
       %3580 = OpVariable %654 Function
       %3587 = OpVariable %16 Function
       %3603 = OpVariable %7 Function
       %3608 = OpVariable %7 Function
       %3609 = OpVariable %7 Function
       %3610 = OpVariable %7 Function
       %3611 = OpVariable %7 Function
       %3612 = OpVariable %7 Function
       %3620 = OpVariable %7 Function
       %3622 = OpVariable %7 Function
       %3627 = OpVariable %7 Function
       %3635 = OpVariable %7 Function
       %3637 = OpVariable %7 Function
       %3639 = OpVariable %7 Function
       %3642 = OpVariable %7 Function
       %3644 = OpVariable %7 Function
       %3645 = OpVariable %7 Function
       %3647 = OpVariable %7 Function
       %3694 = OpVariable %16 Function
       %3698 = OpVariable %7 Function
       %3699 = OpVariable %7 Function
       %3700 = OpVariable %7 Function
       %3701 = OpVariable %7 Function
       %3702 = OpVariable %7 Function
       %3719 = OpVariable %7 Function
       %3721 = OpVariable %7 Function
       %3726 = OpVariable %7 Function
       %3734 = OpVariable %7 Function
       %3736 = OpVariable %7 Function
       %3738 = OpVariable %7 Function
       %3745 = OpVariable %7 Function
       %3747 = OpVariable %378 Function
       %3749 = OpVariable %7 Function
       %3750 = OpVariable %378 Function
       %3752 = OpVariable %7 Function
       %3757 = OpVariable %16 Function
       %3764 = OpVariable %16 Function
       %3766 = OpVariable %16 Function
       %3767 = OpVariable %16 Function
       %3768 = OpVariable %16 Function
       %3774 = OpVariable %7 Function
       %3778 = OpVariable %7 Function
       %3779 = OpVariable %7 Function
       %3781 = OpVariable %7 Function
       %3798 = OpVariable %7 Function
       %3800 = OpVariable %601 Function
       %3832 = OpVariable %7 Function
       %3833 = OpVariable %7 Function
       %3835 = OpVariable %7 Function
       %3836 = OpVariable %7 Function
       %3837 = OpVariable %7 Function
       %3854 = OpVariable %7 Function
       %3856 = OpVariable %7 Function
       %3861 = OpVariable %7 Function
       %3869 = OpVariable %7 Function
       %3871 = OpVariable %7 Function
       %3873 = OpVariable %7 Function
       %3880 = OpVariable %16 Function
       %3884 = OpVariable %378 Function
       %3893 = OpVariable %654 Function
       %3900 = OpVariable %16 Function
       %3916 = OpVariable %378 Function
       %3954 = OpVariable %7 Function
       %3955 = OpVariable %7 Function
       %3956 = OpVariable %2348 Function
       %3959 = OpVariable %7 Function
       %3960 = OpVariable %16 Function
       %3964 = OpVariable %16 Function
       %3967 = OpVariable %16 Function
       %3974 = OpVariable %378 Function
       %3995 = OpVariable %7 Function
       %3997 = OpVariable %7 Function
       %3999 = OpVariable %7 Function
       %4000 = OpVariable %7 Function
       %4016 = OpVariable %7 Function
       %4017 = OpVariable %7 Function
       %4034 = OpVariable %7 Function
       %4036 = OpVariable %7 Function
       %4041 = OpVariable %7 Function
       %4049 = OpVariable %7 Function
       %4051 = OpVariable %7 Function
       %4053 = OpVariable %7 Function
       %4082 = OpVariable %7 Function
       %4091 = OpVariable %378 Function
       %4150 = OpVariable %7 Function
       %4169 = OpVariable %654 Function
       %4181 = OpVariable %378 Function
       %4207 = OpVariable %7 Function
       %4213 = OpVariable %7 Function
       %4214 = OpVariable %16 Function
       %4218 = OpVariable %7 Function
       %4220 = OpVariable %1325 Function
       %4221 = OpVariable %601 Function
       %4225 = OpVariable %7 Function
       %4230 = OpVariable %378 Function
       %4299 = OpVariable %7 Function
       %4302 = OpVariable %601 Function
       %4306 = OpVariable %7 Function
       %4316 = OpVariable %16 Function
       %4333 = OpVariable %543 Function
       %4339 = OpVariable %556 Function
       %4350 = OpVariable %556 Function
       %4361 = OpVariable %378 Function
       %4377 = OpVariable %7 Function
       %4411 = OpVariable %601 Function
       %4417 = OpVariable %7 Function
       %4427 = OpVariable %7 Function
       %4435 = OpVariable %7 Function
       %4457 = OpVariable %601 Function
       %4463 = OpVariable %7 Function
       %4472 = OpVariable %1325 Function
       %4477 = OpVariable %1325 Function
       %4482 = OpVariable %1325 Function
       %4498 = OpVariable %7 Function
       %4599 = OpVariable %7 Function
       %4603 = OpVariable %16 Function
       %4626 = OpVariable %654 Function
       %4633 = OpVariable %16 Function
       %4649 = OpVariable %16 Function
       %4651 = OpVariable %16 Function
       %4652 = OpVariable %16 Function
       %4653 = OpVariable %16 Function
       %4659 = OpVariable %7 Function
       %4672 = OpVariable %654 Function
       %4679 = OpVariable %16 Function
       %4692 = OpVariable %38 Function
       %4700 = OpVariable %7 Function
       %4701 = OpVariable %7 Function
       %4727 = OpVariable %7 Function
       %4728 = OpVariable %7 Function
       %4752 = OpVariable %7 Function
       %4753 = OpVariable %16 Function
       %4756 = OpVariable %38 Function
       %4761 = OpVariable %7 Function
       %4783 = OpVariable %378 Function
       %4832 = OpVariable %7 Function
       %4907 = OpVariable %378 Function
       %4909 = OpVariable %16 Function
       %5017 = OpVariable %378 Function
       %5083 = OpVariable %7 Function
       %5084 = OpVariable %7 Function
       %5085 = OpVariable %7 Function
       %5086 = OpVariable %7 Function
       %5102 = OpVariable %7 Function
       %5103 = OpVariable %7 Function
       %5120 = OpVariable %7 Function
       %5122 = OpVariable %7 Function
       %5127 = OpVariable %7 Function
       %5135 = OpVariable %7 Function
       %5137 = OpVariable %7 Function
       %5139 = OpVariable %7 Function
       %5204 = OpVariable %654 Function
       %5211 = OpVariable %16 Function
       %5243 = OpVariable %16 Function
       %5260 = OpVariable %543 Function
       %5266 = OpVariable %556 Function
       %5279 = OpVariable %556 Function
       %5290 = OpVariable %378 Function
       %5306 = OpVariable %601 Function
       %5315 = OpVariable %7 Function
       %5325 = OpVariable %7 Function
       %5335 = OpVariable %7 Function
       %5357 = OpVariable %601 Function
       %5366 = OpVariable %7 Function
       %5375 = OpVariable %1325 Function
       %5380 = OpVariable %1325 Function
       %5385 = OpVariable %1325 Function
       %5397 = OpVariable %378 Function
       %5410 = OpVariable %7 Function
       %5412 = OpVariable %7 Function
       %5414 = OpVariable %7 Function
       %5445 = OpVariable %16 Function
       %5452 = OpVariable %16 Function
       %5454 = OpVariable %16 Function
       %5455 = OpVariable %16 Function
       %5456 = OpVariable %16 Function
       %5461 = OpVariable %654 Function
       %5462 = OpVariable %38 Function
       %5474 = OpVariable %16 Function
       %5491 = OpVariable %16 Function
       %5504 = OpVariable %378 Function
       %5506 = OpVariable %16 Function
               OpStore %46 %51
               OpStore %56 %65
               OpStore %66 %73
               OpStore %74 %79
               OpStore %80 %85
               OpStore %86 %91
               OpStore %92 %97
               OpStore %98 %103
               OpStore %104 %109
               OpStore %110 %115
               OpStore %116 %121
               OpStore %122 %127
               OpStore %128 %133
               OpStore %137 %178
               OpStore %179 %184
               OpStore %188 %209
               OpStore %212 %224
               OpStore %225 %230
               OpStore %231 %236
               OpStore %237 %242
               OpStore %243 %251
               OpStore %1405 %1406
       %1407 = OpAccessChain %284 %56 %258
       %1408 = OpLoad %6 %1407
       %1409 = OpConvertSToF %14 %1408
       %1410 = OpFDiv %14 %1409 %515
       %1411 = OpFAdd %14 %472 %1410
               OpStore %1405 %1411
               OpStore %1412 %63
               OpStore %1413 %1416
               OpStore %1417 %1422
               OpStore %1423 %64
               OpBranch %1424
       %1424 = OpLabel
               OpLoopMerge %1426 %1427 None
               OpBranch %1428
       %1428 = OpLabel
       %1429 = OpAccessChain %378 %1417 %394
       %1430 = OpLoad %14 %1429
       %1431 = OpAccessChain %378 %1417 %398
       %1432 = OpLoad %14 %1431
       %1433 = OpFAdd %14 %1430 %1432
       %1434 = OpAccessChain %378 %1417 %1378
       %1435 = OpLoad %14 %1434
       %1436 = OpFAdd %14 %1433 %1435
       %1437 = OpFOrdGreaterThan %39 %1436 %478
               OpSelectionMerge %1439 None
               OpBranchConditional %1437 %1438 %1439
       %1438 = OpLabel
       %1440 = OpLoad %6 %1412
       %1441 = OpAccessChain %1015 %1014 %64 %394
       %1442 = OpLoad %14 %1441
       %1443 = OpConvertFToS %6 %1442
       %1444 = OpBitwiseOr %6 %1355 %1443
       %1445 = OpSLessThan %39 %1440 %1444
               OpBranch %1439
       %1439 = OpLabel
       %1446 = OpPhi %39 %1437 %1428 %1445 %1438
               OpBranchConditional %1446 %1425 %1426
       %1425 = OpLabel
       %1447 = OpLoad %6 %1423
       %1449 = OpSGreaterThanEqual %39 %1447 %1448
               OpSelectionMerge %1451 None
               OpBranchConditional %1449 %1450 %1451
       %1450 = OpLabel
               OpBranch %1426
       %1451 = OpLabel
               OpStore %1453 %1454
       %1455 = OpAccessChain %503 %46 %398
       %1456 = OpLoad %14 %1455
       %1457 = OpConvertFToS %6 %1456
       %1458 = OpSLessThan %39 %1457 %507
               OpSelectionMerge %1460 None
               OpBranchConditional %1458 %1459 %1466
       %1459 = OpLabel
       %1461 = OpAccessChain %284 %56 %511
       %1462 = OpLoad %6 %1461
       %1463 = OpConvertSToF %14 %1462
       %1464 = OpFDiv %14 %1463 %515
       %1465 = OpFAdd %14 %472 %1464
               OpStore %1453 %1465
               OpBranch %1460
       %1466 = OpLabel
               OpBranch %1460
       %1460 = OpLabel
       %1467 = OpLoad %6 %1423
       %1468 = OpIAdd %6 %1467 %258
               OpStore %1423 %1468
       %1469 = OpLoad %37 %1417
       %1470 = OpVectorShuffle %15 %1469 %1469 0 2
       %1471 = OpLoad %37 %1417
       %1472 = OpVectorShuffle %15 %1471 %1471 1 1
       %1473 = OpFAdd %15 %1470 %1472
               OpStore %1413 %1473
       %1474 = OpLoad %15 %1413
       %1475 = OpVectorTimesScalar %15 %1474 %553
       %1476 = OpExtInst %15 %1 Floor %1475
       %1477 = OpCompositeConstruct %15 %553 %553
       %1478 = OpFDiv %15 %1476 %1477
               OpStore %1413 %1478
       %1480 = OpLoad %369 %1479
       %1481 = OpLoad %15 %1413
       %1482 = OpImageSampleImplicitLod %37 %1480 %1481
               OpStore %1417 %1482
       %1483 = OpLoad %6 %1412
       %1484 = OpIAdd %6 %1483 %258
               OpStore %1412 %1484
               OpBranch %1427
       %1427 = OpLabel
               OpBranch %1424
       %1426 = OpLabel
               OpStore %1485 %64
       %1487 = OpLoad %37 %1134
       %1488 = OpVectorShuffle %15 %1487 %1487 0 1
       %1489 = OpVectorTimesScalar %15 %1488 %375
               OpStore %1486 %1489
       %1492 = OpLoad %369 %1491
       %1493 = OpLoad %15 %1486
       %1494 = OpImageSampleImplicitLod %37 %1492 %1493
               OpStore %1490 %1494
               OpBranch %1495
       %1495 = OpLabel
               OpLoopMerge %1497 %1498 None
               OpBranch %1499
       %1499 = OpLabel
               OpSelectionMerge %1501 None
               OpBranchConditional %673 %1500 %1501
       %1500 = OpLabel
       %1502 = OpAccessChain %378 %1490 %394
       %1503 = OpLoad %14 %1502
               OpSelectionMerge %1506 None
               OpBranchConditional %673 %1505 %1509
       %1505 = OpLabel
       %1507 = OpAccessChain %378 %1490 %398
       %1508 = OpLoad %14 %1507
               OpStore %1504 %1508
               OpBranch %1506
       %1509 = OpLabel
       %1512 = OpLoad %37 %1511
       %1513 = OpExtInst %14 %1 Length %1512
               OpStore %1504 %1513
               OpBranch %1506
       %1506 = OpLabel
       %1514 = OpLoad %14 %1504
       %1515 = OpAccessChain %378 %1490 %1378
       %1516 = OpLoad %14 %1515
       %1517 = OpAccessChain %378 %1490 %1390
       %1518 = OpLoad %14 %1517
       %1519 = OpCompositeConstruct %37 %1503 %1514 %1516 %1518
       %1520 = OpCompositeExtract %14 %1519 0
       %1521 = OpAccessChain %378 %1490 %398
       %1522 = OpLoad %14 %1521
       %1523 = OpFAdd %14 %1520 %1522
       %1524 = OpAccessChain %1015 %1014 %64 %394
       %1525 = OpLoad %14 %1524
       %1526 = OpAccessChain %1015 %1014 %64 %398
       %1527 = OpLoad %14 %1526
       %1528 = OpFOrdLessThan %39 %1525 %1527
               OpSelectionMerge %1531 None
               OpBranchConditional %1528 %1530 %1534
       %1530 = OpLabel
       %1532 = OpAccessChain %378 %1490 %1378
       %1533 = OpLoad %14 %1532
               OpStore %1529 %1533
               OpBranch %1531
       %1534 = OpLabel
               OpStore %1529 %1535
               OpBranch %1531
       %1531 = OpLabel
       %1536 = OpLoad %14 %1529
       %1537 = OpFAdd %14 %1523 %1536
       %1538 = OpFOrdGreaterThan %39 %1537 %478
               OpBranch %1501
       %1501 = OpLabel
       %1539 = OpPhi %39 %673 %1499 %1538 %1531
       %1540 = OpLoad %6 %1485
       %1541 = OpSLessThan %39 %1540 %1355
       %1542 = OpLogicalAnd %39 %1539 %1541
               OpBranchConditional %1542 %1496 %1497
       %1496 = OpLabel
       %1543 = OpAccessChain %1015 %1014 %64 %394
       %1544 = OpLoad %14 %1543
       %1545 = OpAccessChain %1015 %1014 %64 %398
       %1546 = OpLoad %14 %1545
       %1548 = OpCompositeConstruct %15 %1546 %387
       %1549 = OpCompositeConstruct %15 %478 %478
       %1550 = OpCompositeConstruct %1547 %1548 %1549
       %1551 = OpCompositeExtract %14 %1550 0 0
       %1552 = OpFOrdGreaterThan %39 %1544 %1551
               OpSelectionMerge %1554 None
               OpBranchConditional %1552 %1553 %1554
       %1553 = OpLabel
               OpKill
       %1554 = OpLabel
       %1556 = OpLoad %37 %1490
       %1557 = OpVectorShuffle %15 %1556 %1556 0 2
       %1558 = OpLoad %37 %1490
       %1559 = OpVectorShuffle %15 %1558 %1558 1 1
       %1560 = OpFAdd %15 %1557 %1559
               OpStore %1486 %1560
       %1561 = OpLoad %15 %1486
       %1562 = OpVectorTimesScalar %15 %1561 %553
       %1563 = OpExtInst %15 %1 Floor %1562
       %1564 = OpCompositeConstruct %15 %553 %553
       %1565 = OpFDiv %15 %1563 %1564
               OpStore %1486 %1565
       %1566 = OpLoad %369 %1491
       %1567 = OpLoad %15 %1486
       %1568 = OpImageSampleImplicitLod %37 %1566 %1567
       %1574 = OpVectorTimesMatrix %37 %1568 %1573
       %1575 = OpLoad %369 %1491
       %1576 = OpLoad %15 %1486
       %1577 = OpImageSampleImplicitLod %37 %1575 %1576
       %1578 = OpExtInst %37 %1 FMin %1574 %1577
               OpStore %1490 %1578
       %1579 = OpLoad %6 %1485
       %1580 = OpIAdd %6 %1579 %258
               OpStore %1485 %1580
               OpSelectionMerge %1582 None
               OpBranchConditional %1311 %1581 %1582
       %1581 = OpLabel
               OpStore %1583 %1584
       %1585 = OpAccessChain %503 %237 %394
       %1586 = OpLoad %14 %1585
       %1587 = OpAccessChain %503 %237 %398
       %1588 = OpLoad %14 %1587
       %1589 = OpAccessChain %503 %237 %1378
       %1590 = OpLoad %14 %1589
       %1592 = OpCompositeConstruct %37 %1586 %1588 %1590 %1591
       %1595 = OpAccessChain %503 %237 %1390
       %1596 = OpLoad %14 %1595
       %1597 = OpCompositeConstruct %37 %1593 %472 %1594 %1596
       %1598 = OpAccessChain %1135 %1134 %398
       %1599 = OpLoad %14 %1598
       %1600 = OpFOrdLessThan %39 %1599 %387
       %1601 = OpAccessChain %1015 %1014 %64 %394
       %1602 = OpLoad %14 %1601
       %1603 = OpAccessChain %1015 %1014 %64 %398
       %1604 = OpLoad %14 %1603
       %1605 = OpFOrdGreaterThan %39 %1602 %1604
       %1607 = OpCompositeConstruct %1606 %1600 %1311 %1605 %673
       %1608 = OpSelect %37 %1607 %1597 %1592
       %1610 = OpFSub %37 %1608 %1609
       %1611 = OpCompositeExtract %14 %1610 1
       %1612 = OpConvertFToS %6 %1611
       %1613 = OpSLessThan %39 %1612 %748
               OpSelectionMerge %1615 None
               OpBranchConditional %1613 %1614 %1958
       %1614 = OpLabel
               OpStore %1616 %1617
               OpStore %1618 %258
               OpStore %1619 %1620
               OpStore %1621 %1624
       %1625 = OpAccessChain %378 %1621 %398
       %1626 = OpLoad %14 %1625
       %1627 = OpAccessChain %378 %1621 %394
       %1628 = OpLoad %14 %1627
       %1629 = OpFOrdLessThan %39 %1626 %1628
               OpSelectionMerge %1631 None
               OpBranchConditional %1629 %1630 %1631
       %1630 = OpLabel
       %1632 = OpLoad %14 %1619
       %1633 = OpFSub %14 %472 %1632
               OpStore %1619 %1633
               OpBranch %1631
       %1631 = OpLabel
               OpStore %1634 %1635
               OpStore %1636 %1639
               OpStore %1640 %1644
               OpStore %1645 %64
               OpStore %1646 %64
               OpBranch %1647
       %1647 = OpLabel
               OpLoopMerge %1649 %1650 None
               OpBranch %1651
       %1651 = OpLabel
       %1652 = OpLoad %6 %1646
       %1653 = OpSLessThan %39 %1652 %1343
               OpBranchConditional %1653 %1648 %1649
       %1648 = OpLabel
       %1656 = OpLoad %6 %1645
       %1657 = OpLoad %6 %1645
       %1658 = OpExtInst %6 %1 SMax %1656 %1657
       %1659 = OpBitwiseOr %6 %64 %1658
       %1660 = OpCompositeConstruct %1654 %1659 %258 %64
       %1661 = OpBitwiseXor %1654 %1655 %1660
       %1662 = OpCompositeExtract %6 %1661 0
       %1663 = OpSGreaterThanEqual %39 %1662 %1448
               OpSelectionMerge %1665 None
               OpBranchConditional %1663 %1664 %1665
       %1664 = OpLabel
               OpBranch %1649
       %1665 = OpLabel
       %1674 = OpLoad %6 %1645
       %1675 = OpIAdd %6 %1674 %258
               OpStore %1645 %1675
       %1677 = OpLoad %369 %1676
       %1678 = OpLoad %15 %1636
       %1679 = OpLoad %6 %1618
       %1680 = OpISub %6 %1679 %258
       %1681 = OpConvertSToF %14 %1680
       %1683 = OpSelect %14 %1311 %1682 %1681
       %1684 = OpLoad %14 %1634
       %1685 = OpFMul %14 %1683 %1684
       %1686 = OpLoad %6 %1646
       %1687 = OpISub %6 %1686 %258
       %1688 = OpConvertSToF %14 %1687
       %1689 = OpLoad %14 %1634
       %1690 = OpFMul %14 %1688 %1689
       %1691 = OpCompositeConstruct %15 %1685 %1690
       %1692 = OpFAdd %15 %1678 %1691
       %1693 = OpImageSampleImplicitLod %37 %1677 %1692
       %1700 = OpLoad %6 %1618
       %1701 = OpLoad %6 %1618
       %1702 = OpLoad %6 %1618
       %1703 = OpExtInst %6 %1 SMax %1701 %1702
       %1704 = OpBitwiseOr %6 %1700 %1703
       %1705 = OpIMul %6 %1704 %1343
       %1706 = OpLoad %6 %1646
       %1707 = OpIAdd %6 %1705 %1706
       %1708 = OpExtInst %6 %1 SClamp %1707 %64 %511
               OpStore %1710 %1699
       %1711 = OpAccessChain %378 %1710 %1708
       %1712 = OpLoad %14 %1711
       %1713 = OpVectorTimesScalar %37 %1693 %1712
       %1714 = OpLoad %37 %1640
       %1715 = OpFAdd %37 %1714 %1713
               OpStore %1640 %1715
       %1717 = OpLoad %369 %656
       %1718 = OpLoad %37 %98
       %1719 = OpVectorShuffle %15 %1718 %1718 0 1
       %1720 = OpVectorTimesScalar %15 %1719 %375
       %1721 = OpImageSampleImplicitLod %37 %1717 %1720
       %1722 = OpVectorShuffle %653 %1721 %1721 0 1 2
               OpStore %1716 %1722
               OpStore %1723 %1724
       %1725 = OpAccessChain %503 %46 %398
       %1726 = OpLoad %14 %1725
       %1727 = OpConvertFToS %6 %1726
       %1728 = OpSLessThan %39 %1727 %762
               OpSelectionMerge %1730 None
               OpBranchConditional %1728 %1729 %1736
       %1729 = OpLabel
       %1731 = OpAccessChain %284 %56 %274
       %1732 = OpLoad %6 %1731
       %1733 = OpConvertSToF %14 %1732
       %1734 = OpFDiv %14 %1733 %515
       %1735 = OpFAdd %14 %472 %1734
               OpStore %1723 %1735
               OpBranch %1730
       %1736 = OpLabel
       %1737 = OpAccessChain %503 %46 %398
       %1738 = OpLoad %14 %1737
       %1739 = OpConvertFToS %6 %1738
       %1740 = OpSLessThan %39 %1739 %507
               OpSelectionMerge %1742 None
               OpBranchConditional %1740 %1741 %1748
       %1741 = OpLabel
       %1743 = OpAccessChain %284 %56 %511
       %1744 = OpLoad %6 %1743
       %1745 = OpConvertSToF %14 %1744
       %1746 = OpFDiv %14 %1745 %515
       %1747 = OpFAdd %14 %472 %1746
               OpStore %1723 %1747
               OpBranch %1742
       %1748 = OpLabel
               OpBranch %1742
       %1742 = OpLabel
               OpBranch %1730
       %1730 = OpLabel
       %1750 = OpLoad %653 %1716
       %1751 = OpVectorShuffle %15 %1750 %1750 0 2
       %1752 = OpLoad %653 %1716
       %1753 = OpVectorShuffle %15 %1752 %1752 1 1
       %1754 = OpFAdd %15 %1751 %1753
       %1755 = OpVectorTimesScalar %15 %1754 %472
       %1756 = OpFAdd %15 %1755 %671
               OpStore %1749 %1756
       %1757 = OpLoad %15 %1749
       %1758 = OpVectorTimesScalar %15 %1757 %553
       %1759 = OpExtInst %15 %1 Floor %1758
       %1760 = OpCompositeConstruct %15 %553 %553
       %1761 = OpFDiv %15 %1759 %1760
               OpStore %1749 %1761
       %1762 = OpLoad %369 %656
       %1763 = OpLoad %15 %1749
       %1764 = OpImageSampleImplicitLod %37 %1762 %1763
               OpStore %104 %1764
               OpBranch %1650
       %1650 = OpLabel
       %1765 = OpLoad %6 %1646
       %1766 = OpIAdd %6 %1765 %258
               OpStore %1646 %1766
               OpBranch %1647
       %1649 = OpLabel
       %1767 = OpLoad %369 %371
       %1768 = OpLoad %37 %86
       %1769 = OpVectorShuffle %15 %1768 %1768 0 1
       %1770 = OpVectorTimesScalar %15 %1769 %375
       %1771 = OpImageSampleImplicitLod %37 %1767 %1770
               OpStore %92 %1771
               OpStore %1772 %1775
       %1777 = OpLoad %37 %122
       %1778 = OpVectorShuffle %15 %1777 %1777 0 1
       %1783 = OpAccessChain %1782 %1781 %64
       %1784 = OpLoad %15 %1783
       %1785 = OpFDiv %15 %1778 %1784
               OpStore %1776 %1785
       %1792 = OpLoad %15 %1776
               OpStore %1791 %1792
               OpStore %1793 %1787
               OpStore %1794 %1789
               OpStore %1795 %1790
       %1796 = OpFunctionCall %6 %35 %1791 %1793 %1794 %1795
       %1797 = OpIEqual %39 %1796 %258
       %1798 = OpLogicalNot %39 %1797
       %1799 = OpLogicalNot %39 %1798
               OpSelectionMerge %1801 None
               OpBranchConditional %1799 %1800 %1847
       %1800 = OpLabel
               OpStore %128 %1802
               OpStore %1803 %1806
       %1808 = OpLoad %15 %1803
       %1809 = OpFSub %15 %1808 %547
       %1811 = OpFMul %15 %1809 %1810
       %1812 = OpVectorTimesScalar %15 %1811 %553
       %1813 = OpConvertFToS %600 %1812
               OpStore %1807 %1813
       %1815 = OpAccessChain %7 %1807 %394
       %1816 = OpLoad %6 %1815
       %1817 = OpAccessChain %7 %1807 %398
       %1818 = OpLoad %6 %1817
       %1819 = OpBitwiseXor %6 %1816 %1818
       %1820 = OpAccessChain %7 %1807 %398
       %1821 = OpLoad %6 %1820
       %1822 = OpIMul %6 %1819 %1821
               OpStore %1814 %1822
       %1824 = OpLoad %6 %1814
       %1825 = OpShiftRightArithmetic %6 %1824 %63
       %1826 = OpBitwiseAnd %6 %1825 %258
       %1827 = OpINotEqual %39 %1826 %64
               OpStore %1823 %1827
       %1829 = OpLoad %6 %1814
       %1831 = OpShiftRightArithmetic %6 %1829 %1830
       %1832 = OpBitwiseAnd %6 %1831 %1448
       %1833 = OpINotEqual %39 %1832 %64
               OpStore %1828 %1833
       %1835 = OpLoad %6 %1814
       %1837 = OpShiftRightArithmetic %6 %1835 %1836
       %1838 = OpBitwiseAnd %6 %1837 %511
       %1839 = OpINotEqual %39 %1838 %64
               OpStore %1834 %1839
       %1840 = OpLoad %39 %1823
       %1841 = OpSelect %14 %1840 %478 %387
       %1842 = OpLoad %39 %1828
       %1843 = OpSelect %14 %1842 %478 %387
       %1844 = OpLoad %39 %1834
       %1845 = OpSelect %14 %1844 %478 %387
       %1846 = OpCompositeConstruct %37 %1841 %1843 %1845 %478
               OpStore %80 %1846
               OpBranch %1801
       %1847 = OpLabel
               OpStore %128 %1348
               OpStore %1848 %64
               OpStore %1849 %64
               OpBranch %1850
       %1850 = OpLabel
               OpLoopMerge %1852 %1853 None
               OpBranch %1854
       %1854 = OpLabel
       %1855 = OpLoad %6 %1849
       %1856 = OpSLessThan %39 %1855 %63
               OpBranchConditional %1856 %1851 %1852
       %1851 = OpLabel
       %1857 = OpLoad %6 %1848
       %1858 = OpSGreaterThanEqual %39 %1857 %274
               OpSelectionMerge %1860 None
               OpBranchConditional %1858 %1859 %1860
       %1859 = OpLabel
               OpBranch %1852
       %1860 = OpLabel
       %1862 = OpLoad %6 %1848
       %1863 = OpIAdd %6 %1862 %258
               OpStore %1848 %1863
       %1864 = OpLoad %6 %1849
       %1865 = OpExtInst %6 %1 SClamp %1864 %64 %282
       %1866 = OpLoad %6 %1849
       %1867 = OpExtInst %6 %1 SClamp %1866 %64 %282
       %1868 = OpAccessChain %284 %56 %1867
       %1869 = OpLoad %6 %1868
       %1870 = OpAccessChain %284 %66 %1865
               OpStore %1870 %1869
               OpBranch %1853
       %1853 = OpLabel
       %1871 = OpLoad %6 %1849
       %1872 = OpIAdd %6 %1871 %258
               OpStore %1849 %1872
               OpBranch %1850
       %1852 = OpLabel
               OpStore %1873 %1874
               OpStore %1875 %1876
               OpStore %1877 %1878
               OpStore %1879 %1880
               OpStore %1881 %64
               OpStore %1882 %64
               OpBranch %1883
       %1883 = OpLabel
               OpLoopMerge %1885 %1886 None
               OpBranch %1887
       %1887 = OpLabel
       %1888 = OpLoad %6 %1879
       %1889 = OpSLessThan %39 %1888 %63
       %1890 = OpLoad %6 %1879
       %1891 = OpLoad %6 %1877
       %1892 = OpSLessThanEqual %39 %1890 %1891
       %1893 = OpLogicalAnd %39 %1889 %1892
               OpBranchConditional %1893 %1884 %1885
       %1884 = OpLabel
       %1894 = OpLoad %6 %1882
       %1895 = OpSGreaterThanEqual %39 %1894 %274
               OpSelectionMerge %1897 None
               OpBranchConditional %1895 %1896 %1897
       %1896 = OpLabel
               OpBranch %1885
       %1897 = OpLabel
       %1899 = OpLoad %6 %1882
       %1900 = OpIAdd %6 %1899 %258
               OpStore %1882 %1900
       %1901 = OpLoad %6 %1881
       %1902 = OpIAdd %6 %1901 %258
               OpStore %1881 %1902
       %1903 = OpExtInst %6 %1 SClamp %1901 %64 %282
       %1904 = OpLoad %6 %1879
       %1905 = OpIAdd %6 %1904 %258
               OpStore %1879 %1905
       %1906 = OpExtInst %6 %1 SClamp %1904 %64 %282
       %1907 = OpAccessChain %284 %56 %1906
       %1908 = OpLoad %6 %1907
       %1909 = OpAccessChain %284 %66 %1903
               OpStore %1909 %1908
               OpBranch %1886
       %1886 = OpLabel
               OpBranch %1883
       %1885 = OpLabel
               OpStore %1910 %64
               OpBranch %1911
       %1911 = OpLabel
               OpLoopMerge %1913 %1914 None
               OpBranch %1915
       %1915 = OpLabel
       %1916 = OpLoad %6 %1875
       %1917 = OpSGreaterThan %39 %1916 %258
               OpBranchConditional %1917 %1912 %1913
       %1912 = OpLabel
       %1918 = OpLoad %6 %1910
       %1919 = OpSGreaterThanEqual %39 %1918 %752
               OpSelectionMerge %1921 None
               OpBranchConditional %1919 %1920 %1921
       %1920 = OpLabel
               OpBranch %1913
       %1921 = OpLabel
       %1923 = OpLoad %6 %1910
       %1924 = OpIAdd %6 %1923 %258
               OpStore %1910 %1924
       %1925 = OpLoad %6 %1875
       %1926 = OpBitwiseAnd %6 %1925 %258
       %1927 = OpIEqual %39 %1926 %258
               OpSelectionMerge %1929 None
               OpBranchConditional %1927 %1928 %1933
       %1928 = OpLabel
       %1930 = OpLoad %6 %1875
       %1931 = OpIMul %6 %1343 %1930
       %1932 = OpIAdd %6 %1931 %258
               OpStore %1875 %1932
               OpBranch %1929
       %1933 = OpLabel
       %1934 = OpLoad %6 %1875
       %1935 = OpSDiv %6 %1934 %434
               OpStore %1875 %1935
               OpBranch %1929
       %1929 = OpLabel
       %1936 = OpLoad %6 %1873
       %1937 = OpIAdd %6 %1936 %258
               OpStore %1873 %1937
               OpStore %1938 %64
       %1939 = OpLoad %6 %1938
       %1940 = OpSGreaterThanEqual %39 %1939 %274
               OpSelectionMerge %1942 None
               OpBranchConditional %1940 %1941 %1942
       %1941 = OpLabel
               OpBranch %1942
       %1942 = OpLabel
               OpBranch %1914
       %1914 = OpLabel
               OpBranch %1911
       %1913 = OpLabel
               OpBranch %1801
       %1801 = OpLabel
       %1944 = OpAccessChain %378 %1772 %398
       %1945 = OpLoad %14 %1944
       %1946 = OpSelect %14 %673 %1945 %1943
       %1947 = OpAccessChain %378 %1772 %398
       %1948 = OpLoad %14 %1947
       %1949 = OpExtInst %14 %1 FMin %1946 %1948
       %1950 = OpAccessChain %378 %1772 %394
       %1951 = OpLoad %14 %1950
       %1952 = OpFDiv %14 %1949 %1951
               OpStore %1616 %1952
       %1953 = OpAccessChain %284 %243 %752
       %1954 = OpLoad %6 %1953
       %1955 = OpConvertSToF %14 %1954
       %1956 = OpFDiv %14 %1955 %515
       %1957 = OpFAdd %14 %472 %1956
               OpStore %1583 %1957
               OpBranch %1615
       %1958 = OpLabel
       %1959 = OpAccessChain %503 %237 %398
       %1960 = OpLoad %14 %1959
       %1961 = OpConvertFToS %6 %1960
       %1962 = OpSLessThan %39 %1961 %762
               OpSelectionMerge %1964 None
               OpBranchConditional %1962 %1963 %2019
       %1963 = OpLabel
               OpStore %1965 %1966
               OpStore %1967 %63
               OpStore %1968 %1969
               OpStore %1970 %64
       %1972 = OpLoad %6 %1965
               OpStore %1971 %1972
               OpBranch %1973
       %1973 = OpLabel
               OpLoopMerge %1975 %1976 None
               OpBranch %1977
       %1977 = OpLabel
       %1978 = OpLoad %6 %1971
       %1979 = OpLoad %6 %1967
       %1980 = OpSLessThan %39 %1978 %1979
               OpBranchConditional %1980 %1974 %1975
       %1974 = OpLabel
       %1981 = OpLoad %6 %1970
       %1982 = OpSGreaterThanEqual %39 %1981 %274
               OpSelectionMerge %1984 None
               OpBranchConditional %1982 %1983 %1984
       %1983 = OpLabel
               OpBranch %1975
       %1984 = OpLabel
       %1986 = OpLoad %6 %1970
       %1987 = OpIAdd %6 %1986 %258
               OpStore %1970 %1987
       %1989 = OpLoad %6 %1971
               OpStore %1988 %1989
       %1991 = OpLoad %6 %1971
       %1992 = OpLoad %6 %1968
       %1993 = OpIAdd %6 %1991 %1992
       %1994 = OpISub %6 %1993 %258
               OpStore %1990 %1994
       %1996 = OpLoad %6 %1971
       %1997 = OpLoad %6 %1968
       %1998 = OpIMul %6 %434 %1997
       %1999 = OpIAdd %6 %1996 %1998
       %2000 = OpISub %6 %1999 %258
       %2001 = OpLoad %6 %1967
       %2002 = OpExtInst %6 %1 SMin %2000 %2001
               OpStore %1995 %2002
       %2004 = OpLoad %6 %1988
               OpStore %2003 %2004
       %2006 = OpLoad %6 %1990
               OpStore %2005 %2006
       %2008 = OpLoad %6 %1995
               OpStore %2007 %2008
       %2009 = OpFunctionCall %2 %12 %2003 %2005 %2007
               OpBranch %1976
       %1976 = OpLabel
       %2010 = OpLoad %6 %1968
       %2011 = OpIMul %6 %434 %2010
       %2012 = OpLoad %6 %1971
       %2013 = OpIAdd %6 %2012 %2011
               OpStore %1971 %2013
               OpBranch %1973
       %1975 = OpLabel
       %2014 = OpAccessChain %284 %243 %274
       %2015 = OpLoad %6 %2014
       %2016 = OpConvertSToF %14 %2015
       %2017 = OpFDiv %14 %2016 %515
       %2018 = OpFAdd %14 %472 %2017
               OpStore %1583 %2018
               OpBranch %1964
       %2019 = OpLabel
               OpStore %2020 %2021
       %2022 = OpAccessChain %503 %46 %398
       %2023 = OpLoad %14 %2022
       %2024 = OpConvertFToS %6 %2023
       %2026 = OpSLessThan %39 %2024 %2025
               OpSelectionMerge %2028 None
               OpBranchConditional %2026 %2027 %2034
       %2027 = OpLabel
       %2029 = OpAccessChain %284 %56 %613
       %2030 = OpLoad %6 %2029
       %2031 = OpConvertSToF %14 %2030
       %2032 = OpFDiv %14 %2031 %515
       %2033 = OpFAdd %14 %472 %2032
               OpStore %2020 %2033
               OpBranch %2028
       %2034 = OpLabel
       %2035 = OpAccessChain %503 %46 %398
       %2036 = OpLoad %14 %2035
       %2037 = OpConvertFToS %6 %2036
       %2038 = OpSLessThan %39 %2037 %748
               OpSelectionMerge %2040 None
               OpBranchConditional %2038 %2039 %2046
       %2039 = OpLabel
       %2041 = OpAccessChain %284 %56 %752
       %2042 = OpLoad %6 %2041
       %2043 = OpConvertSToF %14 %2042
       %2044 = OpFDiv %14 %2043 %515
       %2045 = OpFAdd %14 %472 %2044
               OpStore %2020 %2045
               OpBranch %2040
       %2046 = OpLabel
       %2047 = OpAccessChain %503 %46 %398
       %2048 = OpLoad %14 %2047
       %2049 = OpConvertFToS %6 %2048
       %2050 = OpSLessThan %39 %2049 %762
               OpSelectionMerge %2052 None
               OpBranchConditional %2050 %2051 %2058
       %2051 = OpLabel
       %2053 = OpAccessChain %284 %56 %274
       %2054 = OpLoad %6 %2053
       %2055 = OpConvertSToF %14 %2054
       %2056 = OpFDiv %14 %2055 %515
       %2057 = OpFAdd %14 %472 %2056
               OpStore %2020 %2057
               OpBranch %2052
       %2058 = OpLabel
       %2059 = OpAccessChain %503 %46 %398
       %2060 = OpLoad %14 %2059
       %2061 = OpConvertFToS %6 %2060
       %2062 = OpSLessThan %39 %2061 %507
               OpSelectionMerge %2064 None
               OpBranchConditional %2062 %2063 %2070
       %2063 = OpLabel
       %2065 = OpAccessChain %284 %56 %511
       %2066 = OpLoad %6 %2065
       %2067 = OpConvertSToF %14 %2066
       %2068 = OpFDiv %14 %2067 %515
       %2069 = OpFAdd %14 %472 %2068
               OpStore %2020 %2069
               OpBranch %2064
       %2070 = OpLabel
               OpBranch %2064
       %2064 = OpLabel
               OpBranch %2052
       %2052 = OpLabel
               OpBranch %2040
       %2040 = OpLabel
               OpBranch %2028
       %2028 = OpLabel
       %2071 = OpAccessChain %503 %237 %398
       %2072 = OpLoad %14 %2071
       %2073 = OpConvertFToS %6 %2072
       %2074 = OpSLessThan %39 %2073 %507
               OpSelectionMerge %2076 None
               OpBranchConditional %2074 %2075 %2087
       %2075 = OpLabel
       %2077 = OpAccessChain %284 %243 %511
       %2078 = OpLoad %6 %2077
       %2079 = OpConvertSToF %14 %2078
       %2080 = OpFDiv %14 %2079 %515
       %2081 = OpFAdd %14 %472 %2080
               OpStore %1583 %2081
       %2082 = OpLoad %369 %371
       %2083 = OpLoad %37 %86
       %2084 = OpVectorShuffle %15 %2083 %2083 0 1
       %2085 = OpVectorTimesScalar %15 %2084 %375
       %2086 = OpImageSampleImplicitLod %37 %2082 %2085
               OpStore %92 %2086
               OpBranch %2076
       %2087 = OpLabel
               OpStore %2088 %2090
               OpStore %2091 %2092
               OpStore %2093 %2097
               OpStore %2098 %64
       %2099 = OpLoad %369 %371
       %2100 = OpLoad %37 %86
       %2101 = OpVectorShuffle %15 %2100 %2100 0 1
       %2102 = OpVectorTimesScalar %15 %2101 %375
       %2103 = OpImageSampleImplicitLod %37 %2099 %2102
               OpStore %92 %2103
               OpStore %2104 %64
               OpStore %2105 %2106
       %2107 = OpLoad %6 %2104
       %2108 = OpSGreaterThanEqual %39 %2107 %274
               OpSelectionMerge %2110 None
               OpBranchConditional %2108 %2109 %2110
       %2109 = OpLabel
               OpBranch %2110
       %2110 = OpLabel
       %2111 = OpLoad %6 %2104
       %2112 = OpIAdd %6 %2111 %258
               OpStore %2104 %2112
       %2113 = OpLoad %6 %2105
       %2114 = OpExtInst %6 %1 SClamp %2113 %64 %282
       %2115 = OpLoad %6 %2105
       %2116 = OpExtInst %6 %1 SClamp %2115 %64 %282
       %2117 = OpAccessChain %284 %56 %2116
       %2118 = OpLoad %6 %2117
       %2119 = OpAccessChain %284 %66 %2114
               OpStore %2119 %2118
               OpStore %2091 %64
               OpBranch %2120
       %2120 = OpLabel
               OpLoopMerge %2122 %2123 None
               OpBranch %2124
       %2124 = OpLabel
       %2125 = OpLoad %6 %2091
       %2126 = OpSLessThan %39 %2125 %511
               OpBranchConditional %2126 %2121 %2122
       %2121 = OpLabel
       %2127 = OpLoad %6 %2098
       %2128 = OpSGreaterThanEqual %39 %2127 %752
               OpSelectionMerge %2130 None
               OpBranchConditional %2128 %2129 %2130
       %2129 = OpLabel
               OpStore %2131 %64
               OpStore %2132 %63
               OpStore %2133 %63
               OpStore %2134 %63
       %2135 = OpLoad %6 %2131
       %2136 = OpSGreaterThanEqual %39 %2135 %274
               OpSelectionMerge %2138 None
               OpBranchConditional %2136 %2137 %2138
       %2137 = OpLabel
               OpBranch %2138
       %2138 = OpLabel
       %2139 = OpLoad %6 %2131
       %2140 = OpIAdd %6 %2139 %258
               OpStore %2131 %2140
       %2142 = OpLoad %6 %2134
               OpStore %2141 %2142
       %2144 = OpLoad %6 %2134
       %2145 = OpLoad %6 %2133
       %2146 = OpIAdd %6 %2144 %2145
       %2147 = OpISub %6 %2146 %258
               OpStore %2143 %2147
       %2149 = OpLoad %6 %2134
       %2150 = OpLoad %6 %2133
       %2151 = OpIMul %6 %434 %2150
       %2152 = OpIAdd %6 %2149 %2151
       %2153 = OpISub %6 %2152 %258
       %2154 = OpLoad %6 %2132
       %2155 = OpExtInst %6 %1 SMin %2153 %2154
               OpStore %2148 %2155
       %2157 = OpLoad %6 %2141
               OpStore %2156 %2157
       %2159 = OpLoad %6 %2143
               OpStore %2158 %2159
       %2161 = OpLoad %6 %2148
               OpStore %2160 %2161
       %2162 = OpFunctionCall %2 %12 %2156 %2158 %2160
               OpStore %2163 %2166
       %2168 = OpLoad %369 %656
       %2169 = OpLoad %37 %98
       %2170 = OpVectorShuffle %15 %2169 %2169 0 1
       %2171 = OpVectorTimesScalar %15 %2170 %375
       %2172 = OpImageSampleImplicitLod %37 %2168 %2171
       %2173 = OpVectorShuffle %653 %2172 %2172 0 1 2
               OpStore %2167 %2173
       %2175 = OpLoad %653 %2167
       %2176 = OpVectorShuffle %15 %2175 %2175 0 2
       %2177 = OpLoad %653 %2167
       %2178 = OpVectorShuffle %15 %2177 %2177 1 1
       %2179 = OpFAdd %15 %2176 %2178
       %2180 = OpVectorTimesScalar %15 %2179 %472
       %2181 = OpFAdd %15 %2180 %671
               OpStore %2174 %2181
       %2182 = OpLoad %15 %2174
       %2183 = OpVectorTimesScalar %15 %2182 %553
       %2184 = OpExtInst %15 %1 Floor %2183
       %2185 = OpCompositeConstruct %15 %553 %553
       %2186 = OpFDiv %15 %2184 %2185
               OpStore %2174 %2186
       %2187 = OpLoad %369 %656
       %2188 = OpLoad %15 %2174
       %2189 = OpImageSampleImplicitLod %37 %2187 %2188
               OpStore %104 %2189
               OpStore %2190 %64
               OpStore %2191 %64
               OpBranch %2192
       %2192 = OpLabel
               OpLoopMerge %2194 %2195 None
               OpBranch %2196
       %2196 = OpLabel
       %2197 = OpLoad %6 %2191
       %2198 = OpSLessThan %39 %2197 %1343
               OpBranchConditional %2198 %2193 %2194
       %2193 = OpLabel
       %2199 = OpLoad %6 %2190
       %2200 = OpAccessChain %1015 %1014 %64 %394
       %2201 = OpLoad %14 %2200
       %2202 = OpConvertFToS %6 %2201
       %2203 = OpBitwiseOr %6 %752 %2202
       %2204 = OpSGreaterThanEqual %39 %2199 %2203
               OpSelectionMerge %2206 None
               OpBranchConditional %2204 %2205 %2206
       %2205 = OpLabel
               OpBranch %2194
       %2206 = OpLabel
       %2208 = OpLoad %6 %2190
       %2209 = OpIAdd %6 %2208 %258
               OpStore %2190 %2209
       %2210 = OpAccessChain %1015 %1014 %64 %394
       %2211 = OpLoad %14 %2210
       %2212 = OpConvertFToS %6 %2211
       %2213 = OpShiftLeftLogical %6 %2212 %434
       %2214 = OpBitwiseXor %6 %2208 %2213
               OpStore %2215 %64
               OpStore %2216 %63
       %2217 = OpLoad %6 %2215
       %2218 = OpSGreaterThanEqual %39 %2217 %274
               OpSelectionMerge %2220 None
               OpBranchConditional %2218 %2219 %2220
       %2219 = OpLabel
               OpBranch %2220
       %2220 = OpLabel
       %2221 = OpLoad %6 %2215
       %2222 = OpIAdd %6 %2221 %258
               OpStore %2215 %2222
       %2223 = OpLoad %6 %2216
       %2224 = OpExtInst %6 %1 SClamp %2223 %64 %282
       %2225 = OpLoad %6 %2216
       %2226 = OpExtInst %6 %1 SClamp %2225 %64 %282
       %2227 = OpAccessChain %284 %66 %2226
       %2228 = OpLoad %6 %2227
       %2229 = OpAccessChain %284 %56 %2224
               OpStore %2229 %2228
       %2230 = OpLoad %6 %2191
       %2231 = OpExtInst %6 %1 SClamp %2230 %64 %434
       %2232 = OpAccessChain %378 %2163 %2231
       %2233 = OpLoad %14 %2232
       %2237 = OpExtInst %14 %1 Determinant %2236
       %2239 = OpCompositeConstruct %653 %478 %478 %478
       %2240 = OpCompositeConstruct %653 %2237 %387 %387
       %2241 = OpCompositeConstruct %2238 %2239 %2240
       %2242 = OpCompositeExtract %14 %2241 0 0
       %2243 = OpExtInst %14 %1 FMax %2242 %478
       %2244 = OpFOrdGreaterThanEqual %39 %2233 %2243
               OpSelectionMerge %2246 None
               OpBranchConditional %2244 %2245 %2246
       %2245 = OpLabel
       %2247 = OpLoad %6 %2191
       %2248 = OpExtInst %6 %1 SClamp %2247 %64 %434
       %2249 = OpLoad %6 %2191
       %2250 = OpExtInst %6 %1 SClamp %2249 %64 %434
       %2251 = OpAccessChain %378 %2163 %2250
       %2252 = OpLoad %14 %2251
       %2253 = OpLoad %6 %2191
       %2254 = OpExtInst %6 %1 SClamp %2253 %64 %434
       %2255 = OpAccessChain %378 %2163 %2254
       %2256 = OpLoad %14 %2255
       %2257 = OpFMul %14 %2252 %2256
       %2258 = OpAccessChain %378 %2163 %2248
               OpStore %2258 %2257
       %2259 = OpFMul %14 %2257 %478
               OpBranch %2246
       %2246 = OpLabel
               OpBranch %2195
       %2195 = OpLabel
       %2260 = OpLoad %6 %2191
       %2261 = OpIAdd %6 %2260 %258
               OpStore %2191 %2261
               OpBranch %2192
       %2194 = OpLabel
               OpStore %2262 %2263
       %2264 = OpAccessChain %284 %56 %1343
       %2265 = OpLoad %6 %2264
       %2266 = OpConvertSToF %14 %2265
       %2267 = OpFDiv %14 %2266 %515
       %2268 = OpFAdd %14 %472 %2267
               OpStore %2262 %2268
               OpBranch %2122
       %2130 = OpLabel
       %2270 = OpLoad %6 %2098
       %2271 = OpIAdd %6 %2270 %258
               OpStore %2098 %2271
       %2289 = OpLoad %6 %2091
       %2290 = OpExtInst %6 %1 SClamp %2289 %64 %274
       %2292 = OpLoad %15 %2088
               OpStore %2291 %2292
               OpStore %2295 %2288
       %2296 = OpAccessChain %38 %2295 %2290
       %2297 = OpLoad %37 %2296
               OpStore %2293 %2297
       %2298 = OpFunctionCall %39 %43 %2291 %2293
       %2299 = OpLogicalNot %39 %2298
       %2300 = OpLogicalNot %39 %2299
               OpSelectionMerge %2302 None
               OpBranchConditional %2300 %2301 %2302
       %2301 = OpLabel
       %2319 = OpLoad %6 %2091
       %2320 = OpExtInst %6 %1 SClamp %2319 %64 %274
               OpStore %2321 %2288
       %2322 = OpAccessChain %378 %2321 %2320 %394
       %2323 = OpLoad %14 %2322
       %2324 = OpConvertFToS %6 %2323
       %2325 = OpLoad %6 %2091
       %2326 = OpExtInst %6 %1 SClamp %2325 %64 %274
               OpStore %2327 %2288
       %2328 = OpAccessChain %378 %2327 %2326 %398
       %2329 = OpLoad %14 %2328
       %2330 = OpConvertFToS %6 %2329
       %2331 = OpIMul %6 %2324 %2330
       %2332 = OpLoad %6 %2091
       %2333 = OpIMul %6 %2332 %282
       %2334 = OpIAdd %6 %2331 %2333
       %2335 = OpIAdd %6 %2334 %1830
       %2336 = OpSMod %6 %2335 %1355
       %2338 = OpExtInst %6 %1 SClamp %2336 %64 %2337
       %2339 = OpNot %6 %2338
       %2340 = OpNot %6 %2339
       %2341 = OpIAdd %6 %2340 %64
               OpStore %2343 %2318
       %2344 = OpAccessChain %38 %2343 %2341
       %2345 = OpLoad %37 %2344
               OpStore %2093 %2345
               OpStore %2346 %2347
               OpStore %2349 %2351
       %2354 = OpAccessChain %1015 %1014 %64 %398
       %2355 = OpLoad %14 %2354
       %2356 = OpConvertFToS %6 %2355
       %2357 = OpCompositeConstruct %1338 %2353 %64 %2356 %64
       %2358 = OpCompositeExtract %6 %2357 0
               OpStore %2352 %2358
               OpStore %2359 %64
               OpStore %2360 %64
               OpStore %2361 %2364
               OpStore %2365 %2370
               OpStore %2371 %64
               OpBranch %2372
       %2372 = OpLabel
               OpLoopMerge %2374 %2375 None
               OpBranch %2376
       %2376 = OpLabel
       %2377 = OpAccessChain %378 %2365 %394
       %2378 = OpLoad %14 %2377
       %2379 = OpAccessChain %378 %2365 %398
       %2380 = OpLoad %14 %2379
       %2381 = OpFAdd %14 %2378 %2380
       %2382 = OpAccessChain %378 %2365 %1378
       %2383 = OpLoad %14 %2382
       %2384 = OpFAdd %14 %2381 %2383
       %2385 = OpFOrdGreaterThan %39 %2384 %478
       %2386 = OpLoad %6 %2360
       %2387 = OpSLessThan %39 %2386 %1355
       %2388 = OpLogicalAnd %39 %2385 %2387
       %2389 = OpLogicalNot %39 %2388
       %2390 = OpLogicalNot %39 %2389
               OpBranchConditional %2390 %2373 %2374
       %2373 = OpLabel
       %2391 = OpLoad %6 %2371
       %2392 = OpSGreaterThanEqual %39 %2391 %1448
               OpSelectionMerge %2394 None
               OpBranchConditional %2392 %2393 %2394
       %2393 = OpLabel
               OpBranch %2374
       %2394 = OpLabel
       %2396 = OpLoad %6 %2371
       %2397 = OpIAdd %6 %2396 %258
               OpStore %2371 %2397
       %2398 = OpLoad %37 %2365
       %2399 = OpVectorShuffle %15 %2398 %2398 0 2
       %2400 = OpLoad %37 %2365
       %2401 = OpVectorShuffle %15 %2400 %2400 1 1
       %2402 = OpFAdd %15 %2399 %2401
               OpStore %2361 %2402
       %2403 = OpLoad %15 %2361
       %2404 = OpVectorTimesScalar %15 %2403 %553
       %2405 = OpExtInst %15 %1 Floor %2404
       %2406 = OpCompositeConstruct %15 %553 %553
       %2407 = OpFDiv %15 %2405 %2406
               OpStore %2361 %2407
       %2408 = OpLoad %369 %1479
       %2409 = OpLoad %15 %2361
       %2410 = OpImageSampleImplicitLod %37 %2408 %2409
               OpStore %2365 %2410
       %2411 = OpLoad %6 %2360
       %2412 = OpIAdd %6 %2411 %258
               OpStore %2360 %2412
               OpBranch %2375
       %2375 = OpLabel
               OpBranch %2372
       %2374 = OpLabel
               OpBranch %2413
       %2413 = OpLabel
               OpLoopMerge %2415 %2416 None
               OpBranch %2417
       %2417 = OpLabel
       %2418 = OpLoad %6 %2352
       %2419 = OpINotEqual %39 %2418 %220
               OpBranchConditional %2419 %2414 %2415
       %2414 = OpLabel
       %2420 = OpLoad %6 %2359
       %2421 = OpSGreaterThanEqual %39 %2420 %274
               OpSelectionMerge %2423 None
               OpBranchConditional %2421 %2422 %2423
       %2422 = OpLabel
               OpBranch %2415
       %2423 = OpLabel
               OpStore %2425 %2426
               OpStore %2427 %63
               OpStore %2428 %64
               OpStore %2429 %64
               OpBranch %2430
       %2430 = OpLabel
               OpLoopMerge %2432 %2433 None
               OpBranch %2434
       %2434 = OpLabel
       %2435 = OpLoad %6 %2427
       %2436 = OpSLessThan %39 %2435 %63
       %2437 = OpLoad %6 %2427
       %2438 = OpLoad %6 %2425
       %2439 = OpSLessThanEqual %39 %2437 %2438
       %2440 = OpLogicalAnd %39 %2436 %2439
               OpBranchConditional %2440 %2431 %2432
       %2431 = OpLabel
       %2441 = OpLoad %6 %2429
       %2442 = OpSGreaterThanEqual %39 %2441 %274
               OpSelectionMerge %2444 None
               OpBranchConditional %2442 %2443 %2444
       %2443 = OpLabel
               OpBranch %2432
       %2444 = OpLabel
       %2446 = OpLoad %6 %2429
       %2447 = OpIAdd %6 %2446 %258
               OpStore %2429 %2447
       %2448 = OpLoad %6 %2428
       %2449 = OpIAdd %6 %2448 %258
               OpStore %2428 %2449
       %2450 = OpExtInst %6 %1 SClamp %2448 %64 %282
       %2451 = OpLoad %6 %2427
       %2452 = OpIAdd %6 %2451 %258
               OpStore %2427 %2452
       %2453 = OpExtInst %6 %1 SClamp %2451 %64 %282
       %2454 = OpAccessChain %284 %56 %2453
       %2455 = OpLoad %6 %2454
       %2456 = OpAccessChain %284 %66 %2450
               OpStore %2456 %2455
               OpBranch %2433
       %2433 = OpLabel
               OpBranch %2430
       %2432 = OpLabel
       %2457 = OpLoad %6 %2359
       %2458 = OpIAdd %6 %2457 %258
               OpStore %2359 %2458
       %2459 = OpLoad %6 %2352
       %2460 = OpExtInst %6 %1 SClamp %2459 %64 %282
       %2462 = OpAccessChain %2461 %137 %2460
       %2463 = OpLoad %134 %2462
               OpStore %2349 %2463
               OpStore %2464 %2465
               OpStore %2466 %2467
       %2468 = OpAccessChain %503 %46 %398
       %2469 = OpLoad %14 %2468
       %2470 = OpConvertFToS %6 %2469
       %2472 = OpSLessThan %39 %2470 %2471
               OpSelectionMerge %2474 None
               OpBranchConditional %2472 %2473 %2475
       %2473 = OpLabel
               OpBranch %2474
       %2475 = OpLabel
       %2476 = OpAccessChain %503 %46 %398
       %2477 = OpLoad %14 %2476
       %2478 = OpConvertFToS %6 %2477
       %2479 = OpSLessThan %39 %2478 %2025
               OpSelectionMerge %2481 None
               OpBranchConditional %2479 %2480 %2487
       %2480 = OpLabel
       %2482 = OpAccessChain %284 %56 %613
       %2483 = OpLoad %6 %2482
       %2484 = OpConvertSToF %14 %2483
       %2485 = OpFDiv %14 %2484 %515
       %2486 = OpFAdd %14 %472 %2485
               OpStore %2466 %2486
               OpBranch %2481
       %2487 = OpLabel
       %2488 = OpAccessChain %503 %46 %398
       %2489 = OpLoad %14 %2488
       %2490 = OpConvertFToS %6 %2489
       %2491 = OpSLessThan %39 %2490 %748
               OpSelectionMerge %2493 None
               OpBranchConditional %2491 %2492 %2499
       %2492 = OpLabel
       %2494 = OpAccessChain %284 %56 %752
       %2495 = OpLoad %6 %2494
       %2496 = OpConvertSToF %14 %2495
       %2497 = OpFDiv %14 %2496 %515
       %2498 = OpFAdd %14 %472 %2497
               OpStore %2466 %2498
               OpBranch %2493
       %2499 = OpLabel
       %2500 = OpAccessChain %503 %46 %398
       %2501 = OpLoad %14 %2500
       %2502 = OpConvertFToS %6 %2501
       %2503 = OpSLessThan %39 %2502 %762
               OpSelectionMerge %2505 None
               OpBranchConditional %2503 %2504 %2511
       %2504 = OpLabel
       %2506 = OpAccessChain %284 %56 %274
       %2507 = OpLoad %6 %2506
       %2508 = OpConvertSToF %14 %2507
       %2509 = OpFDiv %14 %2508 %515
       %2510 = OpFAdd %14 %472 %2509
               OpStore %2466 %2510
               OpBranch %2505
       %2511 = OpLabel
       %2512 = OpAccessChain %503 %46 %398
       %2513 = OpLoad %14 %2512
       %2514 = OpConvertFToS %6 %2513
       %2515 = OpSLessThan %39 %2514 %507
               OpSelectionMerge %2517 None
               OpBranchConditional %2515 %2516 %2523
       %2516 = OpLabel
       %2518 = OpAccessChain %284 %56 %511
       %2519 = OpLoad %6 %2518
       %2520 = OpConvertSToF %14 %2519
       %2521 = OpFDiv %14 %2520 %515
       %2522 = OpFAdd %14 %472 %2521
               OpStore %2466 %2522
               OpBranch %2517
       %2523 = OpLabel
               OpBranch %2517
       %2517 = OpLabel
               OpBranch %2505
       %2505 = OpLabel
               OpBranch %2493
       %2493 = OpLabel
               OpBranch %2481
       %2481 = OpLabel
               OpBranch %2474
       %2474 = OpLabel
               OpStore %2524 %2525
               OpStore %2526 %2527
               OpStore %2528 %64
               OpBranch %2529
       %2529 = OpLabel
               OpLoopMerge %2531 %2532 None
               OpBranch %2533
       %2533 = OpLabel
       %2534 = OpLoad %6 %2526
       %2535 = OpSGreaterThan %39 %2534 %258
               OpBranchConditional %2535 %2530 %2531
       %2530 = OpLabel
       %2536 = OpLoad %6 %2528
       %2537 = OpSGreaterThanEqual %39 %2536 %752
               OpSelectionMerge %2539 None
               OpBranchConditional %2537 %2538 %2539
       %2538 = OpLabel
               OpBranch %2531
       %2539 = OpLabel
       %2541 = OpLoad %6 %2528
       %2542 = OpIAdd %6 %2541 %258
               OpStore %2528 %2542
       %2543 = OpLoad %6 %2526
       %2544 = OpBitwiseAnd %6 %2543 %258
       %2545 = OpIEqual %39 %2544 %258
               OpSelectionMerge %2547 None
               OpBranchConditional %2545 %2546 %2551
       %2546 = OpLabel
       %2548 = OpLoad %6 %2526
       %2549 = OpIMul %6 %1343 %2548
       %2550 = OpIAdd %6 %2549 %258
               OpStore %2526 %2550
               OpBranch %2547
       %2551 = OpLabel
       %2552 = OpLoad %6 %2526
       %2553 = OpSDiv %6 %2552 %434
               OpStore %2526 %2553
               OpBranch %2547
       %2547 = OpLabel
       %2554 = OpLoad %6 %2524
       %2555 = OpIAdd %6 %2554 %258
               OpStore %2524 %2555
               OpBranch %2532
       %2532 = OpLabel
               OpBranch %2529
       %2531 = OpLabel
               OpStore %2556 %2559
               OpStore %2560 %2564
               OpStore %2565 %64
       %2566 = OpLoad %6 %2565
       %2567 = OpSGreaterThanEqual %39 %2566 %1448
               OpSelectionMerge %2569 None
               OpBranchConditional %2567 %2568 %2569
       %2568 = OpLabel
               OpBranch %2569
       %2569 = OpLabel
       %2570 = OpLoad %6 %2565
       %2571 = OpIAdd %6 %2570 %258
               OpStore %2565 %2571
       %2572 = OpLoad %37 %2560
       %2573 = OpVectorShuffle %15 %2572 %2572 0 2
       %2574 = OpLoad %37 %2560
       %2575 = OpVectorShuffle %15 %2574 %2574 1 1
       %2576 = OpFAdd %15 %2573 %2575
               OpStore %2556 %2576
       %2577 = OpLoad %15 %2556
       %2578 = OpVectorTimesScalar %15 %2577 %553
       %2579 = OpExtInst %15 %1 Floor %2578
       %2580 = OpCompositeConstruct %15 %553 %553
       %2581 = OpFDiv %15 %2579 %2580
               OpStore %2556 %2581
               OpStore %2582 %64
               OpStore %2583 %63
               OpStore %2584 %63
               OpStore %2585 %2586
               OpBranch %2587
       %2587 = OpLabel
               OpLoopMerge %2589 %2590 None
               OpBranch %2591
       %2591 = OpLabel
       %2592 = OpLoad %6 %2584
       %2593 = OpSLessThan %39 %2592 %63
       %2594 = OpLoad %6 %2584
       %2595 = OpLoad %6 %2583
       %2596 = OpSLessThanEqual %39 %2594 %2595
       %2597 = OpLogicalAnd %39 %2593 %2596
               OpBranchConditional %2597 %2588 %2589
       %2588 = OpLabel
       %2598 = OpLoad %6 %2582
       %2599 = OpSGreaterThanEqual %39 %2598 %274
               OpSelectionMerge %2601 None
               OpBranchConditional %2599 %2600 %2601
       %2600 = OpLabel
               OpBranch %2589
       %2601 = OpLabel
       %2603 = OpLoad %6 %2582
       %2604 = OpIAdd %6 %2603 %258
               OpStore %2582 %2604
       %2605 = OpLoad %6 %2585
       %2606 = OpIAdd %6 %2605 %258
               OpStore %2585 %2606
       %2607 = OpExtInst %6 %1 SClamp %2605 %64 %282
       %2608 = OpLoad %6 %2584
       %2609 = OpIAdd %6 %2608 %258
               OpStore %2584 %2609
       %2610 = OpExtInst %6 %1 SClamp %2608 %64 %282
       %2611 = OpAccessChain %284 %56 %2610
       %2612 = OpLoad %6 %2611
       %2613 = OpAccessChain %284 %66 %2607
               OpStore %2613 %2612
               OpBranch %2590
       %2590 = OpLabel
               OpBranch %2587
       %2589 = OpLabel
       %2614 = OpLoad %369 %1479
       %2615 = OpLoad %15 %2556
       %2616 = OpImageSampleImplicitLod %37 %2614 %2615
               OpStore %2560 %2616
       %2617 = OpLoad %6 %2464
       %2618 = OpIAdd %6 %2617 %258
               OpStore %2464 %2618
       %2619 = OpAccessChain %7 %2349 %64
       %2620 = OpLoad %6 %2619
       %2621 = OpLoad %6 %2346
       %2622 = OpIEqual %39 %2620 %2621
               OpSelectionMerge %2624 None
               OpBranchConditional %2622 %2623 %2624
       %2623 = OpLabel
               OpStore %2625 %64
               OpStore %2626 %2629
               OpBranch %2630
       %2630 = OpLabel
               OpLoopMerge %2632 %2633 None
               OpBranch %2634
       %2634 = OpLabel
       %2635 = OpAccessChain %7 %2626 %398
       %2636 = OpLoad %6 %2635
       %2638 = OpINotEqual %39 %2636 %2637
               OpBranchConditional %2638 %2631 %2632
       %2631 = OpLabel
       %2639 = OpLoad %6 %2625
       %2640 = OpSGreaterThanEqual %39 %2639 %1448
               OpSelectionMerge %2642 None
               OpBranchConditional %2640 %2641 %2642
       %2641 = OpLabel
               OpBranch %2632
       %2642 = OpLabel
               OpStore %2644 %2647
       %2649 = OpLoad %15 %2644
       %2650 = OpFSub %15 %2649 %604
       %2651 = OpFMul %15 %2650 %606
       %2652 = OpVectorTimesScalar %15 %2651 %553
       %2653 = OpConvertFToS %600 %2652
               OpStore %2648 %2653
       %2655 = OpAccessChain %7 %2648 %394
       %2656 = OpLoad %6 %2655
       %2657 = OpShiftRightArithmetic %6 %2656 %613
       %2658 = OpBitwiseAnd %6 %2657 %258
       %2659 = OpCompositeConstruct %1338 %2658 %64 %64 %258
       %2660 = OpAccessChain %7 %2648 %394
       %2661 = OpLoad %6 %2660
       %2662 = OpShiftRightArithmetic %6 %2661 %613
       %2663 = OpBitwiseAnd %6 %2662 %258
       %2664 = OpCompositeConstruct %1338 %2663 %64 %64 %258
       %2665 = OpAccessChain %7 %2648 %394
       %2666 = OpLoad %6 %2665
       %2667 = OpShiftRightArithmetic %6 %2666 %613
       %2668 = OpBitwiseAnd %6 %2667 %258
       %2669 = OpCompositeConstruct %1338 %2668 %64 %64 %258
       %2670 = OpExtInst %1338 %1 SClamp %2659 %2664 %2669
       %2671 = OpCompositeExtract %6 %2670 0
       %2672 = OpAccessChain %7 %2648 %394
       %2673 = OpLoad %6 %2672
       %2674 = OpShiftRightArithmetic %6 %2673 %613
       %2675 = OpBitwiseAnd %6 %2674 %258
       %2676 = OpCompositeConstruct %1338 %2675 %64 %64 %258
       %2677 = OpAccessChain %7 %2648 %394
       %2678 = OpLoad %6 %2677
       %2679 = OpShiftRightArithmetic %6 %2678 %613
       %2680 = OpBitwiseAnd %6 %2679 %258
       %2681 = OpCompositeConstruct %1338 %2680 %64 %64 %258
       %2682 = OpAccessChain %7 %2648 %394
       %2683 = OpLoad %6 %2682
       %2684 = OpShiftRightArithmetic %6 %2683 %613
       %2685 = OpBitwiseAnd %6 %2684 %258
       %2686 = OpCompositeConstruct %1338 %2685 %64 %64 %258
       %2687 = OpExtInst %1338 %1 SClamp %2676 %2681 %2686
       %2688 = OpCompositeExtract %6 %2687 0
       %2689 = OpAccessChain %7 %2648 %394
       %2690 = OpLoad %6 %2689
       %2691 = OpShiftRightArithmetic %6 %2690 %613
       %2692 = OpBitwiseAnd %6 %2691 %258
       %2693 = OpCompositeConstruct %1338 %2692 %64 %64 %258
       %2694 = OpAccessChain %7 %2648 %394
       %2695 = OpLoad %6 %2694
       %2696 = OpShiftRightArithmetic %6 %2695 %613
       %2697 = OpBitwiseAnd %6 %2696 %258
       %2698 = OpCompositeConstruct %1338 %2697 %64 %64 %258
       %2699 = OpAccessChain %7 %2648 %394
       %2700 = OpLoad %6 %2699
       %2701 = OpShiftRightArithmetic %6 %2700 %613
       %2702 = OpBitwiseAnd %6 %2701 %258
       %2703 = OpCompositeConstruct %1338 %2702 %64 %64 %258
       %2704 = OpExtInst %1338 %1 SClamp %2693 %2698 %2703
       %2705 = OpCompositeExtract %6 %2704 0
       %2706 = OpExtInst %6 %1 SClamp %2671 %2688 %2705
       %2707 = OpAccessChain %7 %2648 %398
       %2708 = OpLoad %6 %2707
       %2709 = OpBitwiseAnd %6 %2708 %618
       %2710 = OpShiftRightArithmetic %6 %2709 %613
       %2711 = OpBitwiseXor %6 %2706 %2710
               OpStore %2654 %2711
       %2713 = OpAccessChain %7 %2648 %398
       %2714 = OpLoad %6 %2713
       %2715 = OpAccessChain %7 %2648 %398
       %2716 = OpLoad %6 %2715
       %2717 = OpIMul %6 %2714 %2716
       %2718 = OpShiftRightArithmetic %6 %2717 %63
       %2719 = OpBitwiseAnd %6 %2718 %258
               OpStore %2712 %2719
       %2721 = OpAccessChain %7 %2648 %394
       %2722 = OpLoad %6 %2721
       %2723 = OpAccessChain %7 %2648 %398
       %2724 = OpLoad %6 %2723
       %2725 = OpIMul %6 %2722 %2724
       %2726 = OpShiftRightArithmetic %6 %2725 %282
       %2727 = OpBitwiseAnd %6 %2726 %258
               OpStore %2720 %2727
       %2728 = OpLoad %6 %2720
       %2729 = OpLoad %6 %2712
       %2730 = OpBitwiseXor %6 %2728 %2729
       %2731 = OpConvertSToF %14 %2730
       %2732 = OpLoad %6 %2712
       %2733 = OpLoad %6 %2654
       %2734 = OpBitwiseAnd %6 %2732 %2733
       %2735 = OpConvertSToF %14 %2734
       %2736 = OpLoad %6 %2720
       %2737 = OpLoad %6 %2654
       %2738 = OpBitwiseOr %6 %2736 %2737
       %2739 = OpConvertSToF %14 %2738
       %2740 = OpCompositeConstruct %37 %2731 %2735 %2739 %478
               OpStore %80 %2740
               OpStore %2741 %64
               OpStore %2742 %2743
               OpStore %2744 %63
               OpStore %2745 %258
               OpBranch %2746
       %2746 = OpLabel
               OpLoopMerge %2748 %2749 None
               OpBranch %2750
       %2750 = OpLabel
       %2751 = OpLoad %6 %2745
       %2752 = OpLoad %6 %2744
       %2753 = OpSLessThanEqual %39 %2751 %2752
               OpBranchConditional %2753 %2747 %2748
       %2747 = OpLabel
       %2754 = OpLoad %6 %2741
       %2755 = OpSGreaterThanEqual %39 %2754 %274
               OpSelectionMerge %2757 None
               OpBranchConditional %2755 %2756 %2757
       %2756 = OpLabel
               OpBranch %2748
       %2757 = OpLabel
       %2759 = OpLoad %6 %2741
       %2760 = OpIAdd %6 %2759 %258
               OpStore %2741 %2760
               OpStore %2761 %64
       %2763 = OpLoad %6 %2742
               OpStore %2762 %2763
               OpBranch %2764
       %2764 = OpLabel
               OpLoopMerge %2766 %2767 None
               OpBranch %2768
       %2768 = OpLabel
       %2769 = OpLoad %6 %2762
       %2770 = OpLoad %6 %2744
       %2771 = OpSLessThan %39 %2769 %2770
               OpBranchConditional %2771 %2765 %2766
       %2765 = OpLabel
       %2772 = OpLoad %6 %2761
       %2773 = OpSGreaterThanEqual %39 %2772 %274
               OpSelectionMerge %2775 None
               OpBranchConditional %2773 %2774 %2775
       %2774 = OpLabel
               OpBranch %2766
       %2775 = OpLabel
       %2777 = OpLoad %6 %2761
       %2778 = OpIAdd %6 %2777 %258
               OpStore %2761 %2778
       %2780 = OpLoad %6 %2762
               OpStore %2779 %2780
       %2782 = OpLoad %6 %2762
       %2783 = OpLoad %6 %2745
       %2784 = OpIAdd %6 %2782 %2783
       %2785 = OpISub %6 %2784 %258
               OpStore %2781 %2785
       %2787 = OpLoad %6 %2762
       %2788 = OpLoad %6 %2745
       %2789 = OpIMul %6 %434 %2788
       %2790 = OpIAdd %6 %2787 %2789
       %2791 = OpISub %6 %2790 %258
       %2792 = OpLoad %6 %2744
       %2793 = OpExtInst %6 %1 SMin %2791 %2792
               OpStore %2786 %2793
       %2795 = OpLoad %6 %2779
               OpStore %2794 %2795
       %2797 = OpLoad %6 %2781
               OpStore %2796 %2797
       %2799 = OpLoad %6 %2786
               OpStore %2798 %2799
       %2800 = OpFunctionCall %2 %12 %2794 %2796 %2798
               OpBranch %2767
       %2767 = OpLabel
       %2801 = OpLoad %6 %2745
       %2802 = OpIMul %6 %434 %2801
       %2803 = OpLoad %6 %2762
       %2804 = OpIAdd %6 %2803 %2802
               OpStore %2762 %2804
               OpBranch %2764
       %2766 = OpLabel
               OpBranch %2749
       %2749 = OpLabel
       %2805 = OpLoad %6 %2745
       %2806 = OpIMul %6 %434 %2805
               OpStore %2745 %2806
               OpBranch %2746
       %2748 = OpLabel
       %2807 = OpLoad %6 %2625
       %2808 = OpIAdd %6 %2807 %258
               OpStore %2625 %2808
       %2809 = OpAccessChain %7 %2626 %394
       %2810 = OpLoad %6 %2809
       %2958 = OpAccessChain %7 %2626 %398
       %2959 = OpLoad %6 %2958
       %2960 = OpExtInst %6 %1 SClamp %2959 %64 %1358
               OpStore %2962 %2957
       %2963 = OpAccessChain %7 %2962 %2960
       %2964 = OpLoad %6 %2963
       %2965 = OpIAdd %6 %2964 %2337
       %2966 = OpSLessThan %39 %2810 %2965
               OpSelectionMerge %2968 None
               OpBranchConditional %2966 %2967 %2968
       %2967 = OpLabel
       %2969 = OpAccessChain %7 %2626 %394
       %2970 = OpLoad %6 %2969
       %2971 = OpAccessChain %7 %2626 %398
       %2972 = OpLoad %6 %2971
       %2973 = OpExtInst %6 %1 SClamp %2972 %64 %1358
               OpStore %2974 %2957
       %2975 = OpAccessChain %7 %2974 %2973
       %2976 = OpLoad %6 %2975
       %2977 = OpISub %6 %2976 %2337
       %2978 = OpSGreaterThan %39 %2970 %2977
               OpBranch %2968
       %2968 = OpLabel
       %2979 = OpPhi %39 %2966 %2748 %2978 %2967
               OpSelectionMerge %2981 None
               OpBranchConditional %2979 %2980 %2981
       %2980 = OpLabel
       %2982 = OpLoad %369 %371
       %2983 = OpLoad %37 %86
       %2984 = OpVectorShuffle %15 %2983 %2983 0 1
       %2985 = OpVectorTimesScalar %15 %2984 %375
       %2986 = OpImageSampleImplicitLod %37 %2982 %2985
               OpStore %92 %2986
       %2989 = OpAccessChain %7 %2626 %394
       %2990 = OpLoad %6 %2989
       %2991 = OpAccessChain %7 %2626 %398
       %2992 = OpLoad %6 %2991
       %2993 = OpExtInst %6 %1 SClamp %2992 %64 %1358
               OpStore %2994 %2957
       %2995 = OpAccessChain %7 %2994 %2993
       %2996 = OpLoad %6 %2995
       %2997 = OpISub %6 %2990 %2996
       %2998 = OpConvertSToF %14 %2997
       %2999 = OpExtInst %14 %1 FAbs %2998
       %3000 = OpFSub %14 %2988 %2999
       %3002 = OpSelect %14 %1311 %3001 %3000
       %3003 = OpFDiv %14 %3002 %2988
               OpStore %2987 %3003
       %3004 = OpLoad %14 %2987
       %3005 = OpLoad %14 %2987
       %3006 = OpLoad %14 %2987
       %3007 = OpCompositeConstruct %37 %3004 %3005 %3006 %478
               OpBranch %2981
       %2981 = OpLabel
       %3008 = OpAccessChain %7 %2626 %398
       %3009 = OpLoad %6 %3008
       %3010 = OpIAdd %6 %3009 %258
               OpStore %3008 %3010
               OpBranch %2633
       %2633 = OpLabel
               OpBranch %2630
       %2632 = OpLabel
               OpBranch %2624
       %2624 = OpLabel
               OpStore %3011 %3012
       %3013 = OpAccessChain %503 %46 %398
       %3014 = OpLoad %14 %3013
       %3015 = OpConvertFToS %6 %3014
       %3016 = OpSLessThan %39 %3015 %2956
               OpSelectionMerge %3018 None
               OpBranchConditional %3016 %3017 %3024
       %3017 = OpLabel
       %3019 = OpAccessChain %284 %56 %258
       %3020 = OpLoad %6 %3019
       %3021 = OpConvertSToF %14 %3020
       %3022 = OpFDiv %14 %3021 %515
       %3023 = OpFAdd %14 %472 %3022
               OpStore %3011 %3023
               OpBranch %3018
       %3024 = OpLabel
       %3025 = OpAccessChain %503 %46 %398
       %3026 = OpLoad %14 %3025
       %3027 = OpConvertFToS %6 %3026
       %3028 = OpSLessThan %39 %3027 %2942
               OpSelectionMerge %3030 None
               OpBranchConditional %3028 %3029 %3036
       %3029 = OpLabel
       %3031 = OpAccessChain %284 %56 %434
       %3032 = OpLoad %6 %3031
       %3033 = OpConvertSToF %14 %3032
       %3034 = OpFDiv %14 %3033 %515
       %3035 = OpFAdd %14 %472 %3034
               OpStore %3011 %3035
               OpBranch %3030
       %3036 = OpLabel
       %3037 = OpAccessChain %503 %46 %398
       %3038 = OpLoad %14 %3037
       %3039 = OpConvertFToS %6 %3038
       %3040 = OpSLessThan %39 %3039 %2827
               OpSelectionMerge %3042 None
               OpBranchConditional %3040 %3041 %3048
       %3041 = OpLabel
       %3043 = OpAccessChain %284 %56 %1343
       %3044 = OpLoad %6 %3043
       %3045 = OpConvertSToF %14 %3044
       %3046 = OpFDiv %14 %3045 %515
       %3047 = OpFAdd %14 %472 %3046
               OpStore %3011 %3047
               OpBranch %3042
       %3048 = OpLabel
       %3049 = OpAccessChain %503 %46 %398
       %3050 = OpLoad %14 %3049
       %3051 = OpConvertFToS %6 %3050
       %3052 = OpSLessThan %39 %3051 %2471
               OpSelectionMerge %3054 None
               OpBranchConditional %3052 %3053 %3055
       %3053 = OpLabel
               OpBranch %3054
       %3055 = OpLabel
       %3056 = OpAccessChain %503 %46 %398
       %3057 = OpLoad %14 %3056
       %3058 = OpConvertFToS %6 %3057
       %3059 = OpSLessThan %39 %3058 %2025
               OpSelectionMerge %3061 None
               OpBranchConditional %3059 %3060 %3067
       %3060 = OpLabel
       %3062 = OpAccessChain %284 %56 %613
       %3063 = OpLoad %6 %3062
       %3064 = OpConvertSToF %14 %3063
       %3065 = OpFDiv %14 %3064 %515
       %3066 = OpFAdd %14 %472 %3065
               OpStore %3011 %3066
               OpBranch %3061
       %3067 = OpLabel
       %3068 = OpAccessChain %503 %46 %398
       %3069 = OpLoad %14 %3068
       %3070 = OpConvertFToS %6 %3069
       %3071 = OpSLessThan %39 %3070 %748
               OpSelectionMerge %3073 None
               OpBranchConditional %3071 %3072 %3079
       %3072 = OpLabel
       %3074 = OpAccessChain %284 %56 %752
       %3075 = OpLoad %6 %3074
       %3076 = OpConvertSToF %14 %3075
       %3077 = OpFDiv %14 %3076 %515
       %3078 = OpFAdd %14 %472 %3077
               OpStore %3011 %3078
               OpBranch %3073
       %3079 = OpLabel
       %3080 = OpAccessChain %503 %46 %398
       %3081 = OpLoad %14 %3080
       %3082 = OpConvertFToS %6 %3081
       %3083 = OpSLessThan %39 %3082 %762
               OpSelectionMerge %3085 None
               OpBranchConditional %3083 %3084 %3091
       %3084 = OpLabel
       %3086 = OpAccessChain %284 %56 %274
       %3087 = OpLoad %6 %3086
       %3088 = OpConvertSToF %14 %3087
       %3089 = OpFDiv %14 %3088 %515
       %3090 = OpFAdd %14 %472 %3089
               OpStore %3011 %3090
               OpBranch %3085
       %3091 = OpLabel
       %3092 = OpAccessChain %503 %46 %398
       %3093 = OpLoad %14 %3092
       %3094 = OpConvertFToS %6 %3093
       %3095 = OpSLessThan %39 %3094 %507
               OpSelectionMerge %3097 None
               OpBranchConditional %3095 %3096 %3103
       %3096 = OpLabel
       %3098 = OpAccessChain %284 %56 %511
       %3099 = OpLoad %6 %3098
       %3100 = OpConvertSToF %14 %3099
       %3101 = OpFDiv %14 %3100 %515
       %3102 = OpFAdd %14 %472 %3101
               OpStore %3011 %3102
               OpBranch %3097
       %3103 = OpLabel
               OpBranch %3097
       %3097 = OpLabel
               OpBranch %3085
       %3085 = OpLabel
               OpBranch %3073
       %3073 = OpLabel
               OpBranch %3061
       %3061 = OpLabel
               OpBranch %3054
       %3054 = OpLabel
               OpBranch %3042
       %3042 = OpLabel
               OpBranch %3030
       %3030 = OpLabel
               OpBranch %3018
       %3018 = OpLabel
       %3104 = OpLoad %369 %371
       %3105 = OpLoad %37 %86
       %3106 = OpVectorShuffle %15 %3105 %3105 0 1
       %3107 = OpVectorTimesScalar %15 %3106 %375
       %3108 = OpImageSampleImplicitLod %37 %3104 %3107
               OpStore %92 %3108
       %3109 = OpLoad %6 %2346
       %3110 = OpAccessChain %7 %2349 %64
       %3111 = OpLoad %6 %3110
       %3112 = OpSGreaterThan %39 %3109 %3111
               OpSelectionMerge %3115 None
               OpBranchConditional %3112 %3114 %3118
       %3114 = OpLabel
       %3116 = OpAccessChain %7 %2349 %434
       %3117 = OpLoad %6 %3116
               OpStore %3113 %3117
               OpBranch %3115
       %3118 = OpLabel
       %3119 = OpAccessChain %7 %2349 %258
       %3120 = OpLoad %6 %3119
               OpStore %3113 %3120
               OpBranch %3115
       %3115 = OpLabel
       %3121 = OpLoad %6 %3113
               OpStore %2352 %3121
               OpBranch %2416
       %2416 = OpLabel
               OpBranch %2413
       %2415 = OpLabel
               OpBranch %2302
       %2302 = OpLabel
               OpBranch %2123
       %2123 = OpLabel
       %3122 = OpLoad %6 %2091
       %3123 = OpIAdd %6 %3122 %258
               OpStore %2091 %3123
       %3124 = OpISub %6 %3122 %64
       %3125 = OpShiftLeftLogical %6 %3124 %64
               OpBranch %2120
       %2122 = OpLabel
               OpStore %3128 %3135
               OpSelectionMerge %3137 None
               OpBranchConditional %673 %3136 %3137
       %3136 = OpLabel
       %3138 = OpAccessChain %503 %225 %394
       %3139 = OpLoad %14 %3138
       %3144 = OpAccessChain %3143 %3142 %64 %394
       %3145 = OpLoad %14 %3144
       %3146 = OpFDiv %14 %3145 %1943
       %3147 = OpFOrdLessThan %39 %3139 %3146
               OpBranch %3137
       %3137 = OpLabel
       %3148 = OpPhi %39 %673 %2122 %3147 %3136
               OpSelectionMerge %3150 None
               OpBranchConditional %3148 %3149 %3676
       %3149 = OpLabel
       %3151 = OpAccessChain %378 %3128 %64
       %3152 = OpLoad %14 %3151
       %3153 = OpFDiv %14 %3152 %515
       %3154 = OpAccessChain %378 %3128 %613
       %3155 = OpLoad %14 %3154
       %3156 = OpFDiv %14 %3155 %515
               OpSelectionMerge %3159 None
               OpBranchConditional %673 %3158 %3168
       %3158 = OpLabel
               OpSelectionMerge %3162 None
               OpBranchConditional %673 %3161 %3165
       %3161 = OpLabel
       %3163 = OpAccessChain %378 %3128 %282
       %3164 = OpLoad %14 %3163
               OpStore %3160 %3164
               OpBranch %3162
       %3165 = OpLabel
               OpStore %3160 %3166
               OpBranch %3162
       %3162 = OpLabel
       %3167 = OpLoad %14 %3160
               OpStore %3157 %3167
               OpBranch %3159
       %3168 = OpLabel
       %3169 = OpLoad %37 %225
       %3170 = OpExtInst %14 %1 Length %3169
               OpStore %3157 %3170
               OpBranch %3159
       %3159 = OpLabel
       %3171 = OpLoad %14 %3157
       %3172 = OpFSub %14 %3171 %387
       %3173 = OpFDiv %14 %3172 %515
       %3174 = OpCompositeConstruct %37 %3153 %3156 %3173 %478
               OpStore %231 %3174
               OpStore %3175 %3176
               OpStore %3177 %63
               OpStore %3178 %63
               OpStore %3179 %64
               OpStore %3177 %64
               OpBranch %3180
       %3180 = OpLabel
               OpLoopMerge %3182 %3183 None
               OpBranch %3184
       %3184 = OpLabel
       %3185 = OpLoad %6 %3177
       %3186 = OpLoad %6 %3178
       %3187 = OpSLessThan %39 %3185 %3186
               OpBranchConditional %3187 %3181 %3182
       %3181 = OpLabel
       %3188 = OpLoad %6 %3179
       %3189 = OpSGreaterThanEqual %39 %3188 %1448
       %3190 = OpLogicalAnd %39 %3189 %673
               OpSelectionMerge %3192 None
               OpBranchConditional %3190 %3191 %3192
       %3191 = OpLabel
               OpBranch %3182
       %3192 = OpLabel
       %3194 = OpLoad %6 %3179
       %3195 = OpIAdd %6 %3194 %258
               OpStore %3179 %3195
               OpStore %3196 %2426
               OpStore %3197 %3198
               OpStore %3199 %3200
       %3202 = OpLoad %6 %3199
               OpStore %3201 %3202
       %3204 = OpLoad %6 %3199
               OpStore %3203 %3204
       %3206 = OpLoad %6 %3197
       %3207 = OpIAdd %6 %3206 %258
               OpStore %3205 %3207
               OpStore %3208 %64
               OpBranch %3209
       %3209 = OpLabel
               OpLoopMerge %3211 %3212 None
               OpBranch %3213
       %3213 = OpLabel
       %3214 = OpLoad %6 %3203
       %3215 = OpLoad %6 %3197
       %3216 = OpSLessThanEqual %39 %3214 %3215
       %3217 = OpLoad %6 %3205
       %3218 = OpLoad %6 %3196
       %3219 = OpSLessThanEqual %39 %3217 %3218
       %3220 = OpLogicalAnd %39 %3216 %3219
               OpBranchConditional %3220 %3210 %3211
       %3210 = OpLabel
       %3221 = OpLoad %6 %3208
       %3222 = OpSGreaterThanEqual %39 %3221 %274
               OpSelectionMerge %3224 None
               OpBranchConditional %3222 %3223 %3224
       %3223 = OpLabel
               OpBranch %3211
       %3224 = OpLabel
       %3226 = OpLoad %6 %3208
       %3227 = OpIAdd %6 %3226 %258
               OpStore %3208 %3227
       %3228 = OpLoad %6 %3203
       %3229 = OpExtInst %6 %1 SClamp %3228 %64 %282
       %3230 = OpAccessChain %284 %56 %3229
       %3231 = OpLoad %6 %3230
       %3232 = OpLoad %6 %3205
       %3233 = OpExtInst %6 %1 SClamp %3232 %64 %282
       %3234 = OpAccessChain %284 %56 %3233
       %3235 = OpLoad %6 %3234
       %3236 = OpSLessThan %39 %3231 %3235
               OpSelectionMerge %3238 None
               OpBranchConditional %3236 %3237 %3248
       %3237 = OpLabel
       %3239 = OpLoad %6 %3201
       %3240 = OpIAdd %6 %3239 %258
               OpStore %3201 %3240
       %3241 = OpExtInst %6 %1 SClamp %3239 %64 %282
       %3242 = OpLoad %6 %3203
       %3243 = OpIAdd %6 %3242 %258
               OpStore %3203 %3243
       %3244 = OpExtInst %6 %1 SClamp %3242 %64 %282
       %3245 = OpAccessChain %284 %56 %3244
       %3246 = OpLoad %6 %3245
       %3247 = OpAccessChain %284 %66 %3241
               OpStore %3247 %3246
               OpBranch %3238
       %3248 = OpLabel
       %3249 = OpLoad %6 %3201
       %3250 = OpIAdd %6 %3249 %258
               OpStore %3201 %3250
       %3251 = OpExtInst %6 %1 SClamp %3249 %64 %282
       %3252 = OpLoad %6 %3205
       %3253 = OpIAdd %6 %3252 %258
               OpStore %3205 %3253
       %3254 = OpExtInst %6 %1 SClamp %3252 %64 %282
       %3255 = OpAccessChain %284 %56 %3254
       %3256 = OpLoad %6 %3255
       %3257 = OpAccessChain %284 %66 %3251
               OpStore %3257 %3256
               OpBranch %3238
       %3238 = OpLabel
               OpBranch %3212
       %3212 = OpLabel
               OpBranch %3209
       %3211 = OpLabel
               OpStore %3258 %64
               OpBranch %3259
       %3259 = OpLabel
               OpLoopMerge %3261 %3262 None
               OpBranch %3263
       %3263 = OpLabel
       %3264 = OpLoad %6 %3203
       %3265 = OpSLessThan %39 %3264 %63
       %3266 = OpLoad %6 %3203
       %3267 = OpLoad %6 %3197
       %3268 = OpSLessThanEqual %39 %3266 %3267
       %3269 = OpLogicalAnd %39 %3265 %3268
               OpBranchConditional %3269 %3260 %3261
       %3260 = OpLabel
       %3270 = OpLoad %6 %3258
       %3271 = OpSGreaterThanEqual %39 %3270 %274
               OpSelectionMerge %3273 None
               OpBranchConditional %3271 %3272 %3273
       %3272 = OpLabel
               OpBranch %3261
       %3273 = OpLabel
       %3275 = OpLoad %6 %3258
       %3276 = OpIAdd %6 %3275 %258
               OpStore %3258 %3276
       %3277 = OpLoad %6 %3201
       %3278 = OpIAdd %6 %3277 %258
               OpStore %3201 %3278
       %3279 = OpExtInst %6 %1 SClamp %3277 %64 %282
       %3280 = OpLoad %6 %3203
       %3281 = OpIAdd %6 %3280 %258
               OpStore %3203 %3281
       %3282 = OpExtInst %6 %1 SClamp %3280 %64 %282
       %3283 = OpAccessChain %284 %56 %3282
       %3284 = OpLoad %6 %3283
       %3285 = OpAccessChain %284 %66 %3279
               OpStore %3285 %3284
               OpBranch %3262
       %3262 = OpLabel
               OpBranch %3259
       %3261 = OpLabel
               OpStore %3286 %64
       %3288 = OpLoad %6 %3199
               OpStore %3287 %3288
               OpBranch %3289
       %3289 = OpLabel
               OpLoopMerge %3291 %3292 None
               OpBranch %3293
       %3293 = OpLabel
       %3294 = OpLoad %6 %3287
       %3295 = OpLoad %6 %3196
       %3296 = OpSLessThanEqual %39 %3294 %3295
               OpBranchConditional %3296 %3290 %3291
       %3290 = OpLabel
       %3297 = OpLoad %6 %3286
       %3298 = OpSGreaterThanEqual %39 %3297 %274
               OpSelectionMerge %3300 None
               OpBranchConditional %3298 %3299 %3300
       %3299 = OpLabel
               OpBranch %3291
       %3300 = OpLabel
       %3302 = OpLoad %6 %3286
       %3303 = OpIAdd %6 %3302 %258
               OpStore %3286 %3303
       %3304 = OpLoad %6 %3287
       %3305 = OpExtInst %6 %1 SClamp %3304 %64 %282
       %3306 = OpLoad %6 %3287
       %3307 = OpExtInst %6 %1 SClamp %3306 %64 %282
       %3308 = OpAccessChain %284 %66 %3307
       %3309 = OpLoad %6 %3308
       %3310 = OpAccessChain %284 %56 %3305
               OpStore %3310 %3309
               OpBranch %3292
       %3292 = OpLabel
       %3311 = OpLoad %6 %3287
       %3312 = OpIAdd %6 %3311 %258
               OpStore %3287 %3312
               OpBranch %3289
       %3291 = OpLabel
       %3313 = OpLoad %6 %3175
       %3314 = OpIMul %6 %1448 %3313
       %3316 = OpLoad %6 %3175
       %3317 = OpISub %6 %3315 %3316
       %3318 = OpIMul %6 %3314 %3317
       %3319 = OpSDiv %6 %3318 %3315
               OpStore %3175 %3319
               OpBranch %3183
       %3183 = OpLabel
       %3320 = OpLoad %6 %3177
       %3321 = OpIAdd %6 %3320 %258
               OpStore %3177 %3321
               OpBranch %3180
       %3182 = OpLabel
               OpStore %3322 %3323
               OpStore %3324 %3327
       %3328 = OpAccessChain %378 %3324 %398
       %3329 = OpLoad %14 %3328
       %3330 = OpAccessChain %378 %3324 %398
       %3331 = OpLoad %14 %3330
       %3332 = OpExtInst %14 %1 FMax %3329 %3331
       %3333 = OpAccessChain %378 %3324 %394
       %3334 = OpLoad %14 %3333
       %3335 = OpFOrdLessThan %39 %3332 %3334
               OpSelectionMerge %3337 None
               OpBranchConditional %3335 %3336 %3337
       %3336 = OpLabel
       %3338 = OpLoad %14 %3322
       %3339 = OpFSub %14 %472 %3338
               OpStore %3322 %3339
               OpBranch %3337
       %3337 = OpLabel
               OpStore %3340 %3341
       %3342 = OpAccessChain %284 %56 %64
       %3343 = OpLoad %6 %3342
       %3344 = OpConvertSToF %14 %3343
       %3345 = OpFDiv %14 %3344 %515
       %3346 = OpFAdd %14 %472 %3345
               OpStore %3340 %3346
               OpStore %3347 %3350
       %3351 = OpAccessChain %378 %3347 %398
       %3352 = OpLoad %14 %3351
       %3353 = OpFOrdLessThan %39 %3352 %538
               OpSelectionMerge %3355 None
               OpBranchConditional %3353 %3354 %3404
       %3354 = OpLabel
       %3358 = OpLoad %15 %3347
       %3359 = OpLoad %15 %3347
       %3360 = OpExtInst %15 %1 FMin %3358 %3359
       %3361 = OpFAdd %15 %3357 %3360
       %3362 = OpFMul %15 %682 %3361
       %3363 = OpFSub %15 %3362 %547
       %3364 = OpFMul %15 %3363 %551
       %3365 = OpVectorTimesScalar %15 %3364 %553
       %3366 = OpConvertFToU %542 %3365
               OpStore %3356 %3366
       %3368 = OpAccessChain %556 %3356 %394
       %3369 = OpLoad %52 %3368
       %3370 = OpAccessChain %556 %3356 %398
       %3371 = OpLoad %52 %3370
       %3372 = OpIMul %52 %3369 %3371
       %3373 = OpAccessChain %556 %3356 %394
       %3374 = OpLoad %52 %3373
       %3375 = OpBitwiseAnd %52 %3374 %565
       %3376 = OpShiftRightLogical %52 %3372 %3375
       %3377 = OpBitwiseAnd %52 %3376 %568
               OpStore %3367 %3377
       %3379 = OpAccessChain %556 %3356 %394
       %3380 = OpLoad %52 %3379
       %3381 = OpAccessChain %556 %3356 %398
       %3382 = OpLoad %52 %3381
       %3383 = OpIMul %52 %3380 %3382
       %3384 = OpAccessChain %556 %3356 %394
       %3385 = OpLoad %52 %3384
       %3386 = OpBitwiseAnd %52 %3385 %565
       %3387 = OpShiftLeftLogical %52 %3383 %3386
       %3388 = OpBitwiseAnd %52 %3387 %568
               OpStore %3378 %3388
       %3390 = OpLoad %52 %3378
       %3391 = OpBitwiseAnd %52 %3390 %585
       %3392 = OpINotEqual %39 %3391 %394
       %3393 = OpSelect %52 %3392 %398 %394
       %3394 = OpLoad %52 %3367
       %3395 = OpBitwiseAnd %52 %3394 %398
       %3396 = OpINotEqual %39 %3395 %394
       %3397 = OpSelect %52 %3396 %398 %394
       %3398 = OpBitwiseXor %52 %3393 %3397
       %3399 = OpConvertUToF %14 %3398
               OpStore %3389 %3399
       %3400 = OpLoad %14 %3389
       %3401 = OpLoad %14 %3389
       %3402 = OpLoad %14 %3389
       %3403 = OpCompositeConstruct %37 %3400 %3401 %3402 %478
               OpStore %80 %3403
               OpBranch %3355
       %3404 = OpLabel
       %3406 = OpLoad %15 %3347
       %3407 = OpFSub %15 %3406 %604
       %3408 = OpFMul %15 %3407 %606
       %3409 = OpVectorTimesScalar %15 %3408 %553
       %3410 = OpConvertFToS %600 %3409
               OpStore %3405 %3410
       %3412 = OpAccessChain %7 %3405 %394
       %3413 = OpLoad %6 %3412
       %3414 = OpShiftRightArithmetic %6 %3413 %613
       %3415 = OpBitwiseAnd %6 %3414 %258
       %3416 = OpAccessChain %7 %3405 %398
       %3417 = OpLoad %6 %3416
       %3418 = OpBitwiseAnd %6 %3417 %618
       %3419 = OpShiftRightArithmetic %6 %3418 %613
       %3420 = OpBitwiseXor %6 %3415 %3419
               OpStore %3411 %3420
       %3422 = OpAccessChain %7 %3405 %398
       %3423 = OpLoad %6 %3422
       %3424 = OpAccessChain %7 %3405 %398
       %3425 = OpLoad %6 %3424
       %3426 = OpIMul %6 %3423 %3425
       %3427 = OpShiftRightArithmetic %6 %3426 %63
       %3428 = OpBitwiseAnd %6 %3427 %258
               OpStore %3421 %3428
       %3430 = OpAccessChain %7 %3405 %394
       %3431 = OpLoad %6 %3430
       %3432 = OpAccessChain %7 %3405 %398
       %3433 = OpLoad %6 %3432
       %3434 = OpIMul %6 %3431 %3433
       %3435 = OpShiftRightArithmetic %6 %3434 %282
       %3436 = OpBitwiseAnd %6 %3435 %258
               OpStore %3429 %3436
       %3437 = OpLoad %6 %3429
       %3438 = OpLoad %6 %3421
       %3439 = OpBitwiseXor %6 %3437 %3438
       %3440 = OpConvertSToF %14 %3439
       %3441 = OpLoad %6 %3421
       %3442 = OpLoad %6 %3411
       %3443 = OpBitwiseAnd %6 %3441 %3442
       %3444 = OpConvertSToF %14 %3443
       %3445 = OpLoad %6 %3429
       %3446 = OpLoad %6 %3411
       %3447 = OpBitwiseOr %6 %3445 %3446
       %3448 = OpConvertSToF %14 %3447
       %3449 = OpCompositeConstruct %37 %3440 %3444 %3448 %478
               OpStore %80 %3449
               OpBranch %3355
       %3355 = OpLabel
               OpStore %3450 %3451
       %3452 = OpAccessChain %503 %46 %398
       %3453 = OpLoad %14 %3452
       %3454 = OpConvertFToS %6 %3453
       %3455 = OpSLessThan %39 %3454 %2956
               OpSelectionMerge %3457 None
               OpBranchConditional %3455 %3456 %3463
       %3456 = OpLabel
       %3458 = OpAccessChain %284 %56 %258
       %3459 = OpLoad %6 %3458
       %3460 = OpConvertSToF %14 %3459
       %3461 = OpFDiv %14 %3460 %515
       %3462 = OpFAdd %14 %472 %3461
               OpStore %3450 %3462
               OpBranch %3457
       %3463 = OpLabel
       %3464 = OpAccessChain %503 %46 %398
       %3465 = OpLoad %14 %3464
       %3466 = OpConvertFToS %6 %3465
       %3467 = OpSLessThan %39 %3466 %2942
               OpSelectionMerge %3469 None
               OpBranchConditional %3467 %3468 %3475
       %3468 = OpLabel
       %3470 = OpAccessChain %284 %56 %434
       %3471 = OpLoad %6 %3470
       %3472 = OpConvertSToF %14 %3471
       %3473 = OpFDiv %14 %3472 %515
       %3474 = OpFAdd %14 %472 %3473
               OpStore %3450 %3474
               OpBranch %3469
       %3475 = OpLabel
       %3476 = OpAccessChain %503 %46 %398
       %3477 = OpLoad %14 %3476
       %3478 = OpConvertFToS %6 %3477
       %3479 = OpSLessThan %39 %3478 %2827
               OpSelectionMerge %3481 None
               OpBranchConditional %3479 %3480 %3487
       %3480 = OpLabel
       %3482 = OpAccessChain %284 %56 %1343
       %3483 = OpLoad %6 %3482
       %3484 = OpConvertSToF %14 %3483
       %3485 = OpFDiv %14 %3484 %515
       %3486 = OpFAdd %14 %472 %3485
               OpStore %3450 %3486
               OpBranch %3481
       %3487 = OpLabel
       %3488 = OpAccessChain %503 %46 %398
       %3489 = OpLoad %14 %3488
       %3490 = OpConvertFToS %6 %3489
       %3491 = OpSLessThan %39 %3490 %2471
               OpSelectionMerge %3493 None
               OpBranchConditional %3491 %3492 %3494
       %3492 = OpLabel
               OpBranch %3493
       %3494 = OpLabel
       %3495 = OpAccessChain %503 %46 %398
       %3496 = OpLoad %14 %3495
       %3497 = OpConvertFToS %6 %3496
       %3498 = OpSLessThan %39 %3497 %2025
               OpSelectionMerge %3500 None
               OpBranchConditional %3498 %3499 %3506
       %3499 = OpLabel
       %3501 = OpAccessChain %284 %56 %613
       %3502 = OpLoad %6 %3501
       %3503 = OpConvertSToF %14 %3502
       %3504 = OpFDiv %14 %3503 %515
       %3505 = OpFAdd %14 %472 %3504
               OpStore %3450 %3505
               OpBranch %3500
       %3506 = OpLabel
       %3507 = OpAccessChain %503 %46 %398
       %3508 = OpLoad %14 %3507
       %3509 = OpConvertFToS %6 %3508
       %3510 = OpSLessThan %39 %3509 %748
               OpSelectionMerge %3512 None
               OpBranchConditional %3510 %3511 %3518
       %3511 = OpLabel
       %3513 = OpAccessChain %284 %56 %752
       %3514 = OpLoad %6 %3513
       %3515 = OpConvertSToF %14 %3514
       %3516 = OpFDiv %14 %3515 %515
       %3517 = OpFAdd %14 %472 %3516
               OpStore %3450 %3517
               OpBranch %3512
       %3518 = OpLabel
       %3519 = OpAccessChain %503 %46 %398
       %3520 = OpLoad %14 %3519
       %3521 = OpConvertFToS %6 %3520
       %3522 = OpSLessThan %39 %3521 %762
               OpSelectionMerge %3524 None
               OpBranchConditional %3522 %3523 %3530
       %3523 = OpLabel
       %3525 = OpAccessChain %284 %56 %274
       %3526 = OpLoad %6 %3525
       %3527 = OpConvertSToF %14 %3526
       %3528 = OpFDiv %14 %3527 %515
       %3529 = OpFAdd %14 %472 %3528
               OpStore %3450 %3529
               OpBranch %3524
       %3530 = OpLabel
       %3531 = OpAccessChain %503 %46 %398
       %3532 = OpLoad %14 %3531
       %3533 = OpConvertFToS %6 %3532
       %3534 = OpSLessThan %39 %3533 %507
               OpSelectionMerge %3536 None
               OpBranchConditional %3534 %3535 %3542
       %3535 = OpLabel
       %3537 = OpAccessChain %284 %56 %511
       %3538 = OpLoad %6 %3537
       %3539 = OpConvertSToF %14 %3538
       %3540 = OpFDiv %14 %3539 %515
       %3541 = OpFAdd %14 %472 %3540
               OpStore %3450 %3541
               OpBranch %3536
       %3542 = OpLabel
               OpBranch %3536
       %3536 = OpLabel
               OpBranch %3524
       %3524 = OpLabel
               OpBranch %3512
       %3512 = OpLabel
               OpBranch %3500
       %3500 = OpLabel
               OpBranch %3493
       %3493 = OpLabel
               OpBranch %3481
       %3481 = OpLabel
               OpBranch %3469
       %3469 = OpLabel
               OpBranch %3457
       %3457 = OpLabel
               OpStore %3543 %3546
       %3548 = OpLoad %369 %656
       %3549 = OpLoad %37 %98
       %3550 = OpVectorShuffle %15 %3549 %3549 0 1
       %3551 = OpVectorTimesScalar %15 %3550 %375
       %3552 = OpImageSampleImplicitLod %37 %3548 %3551
       %3553 = OpVectorShuffle %653 %3552 %3552 0 1 2
               OpStore %3547 %3553
       %3555 = OpLoad %653 %3547
       %3556 = OpVectorShuffle %15 %3555 %3555 0 2
       %3557 = OpLoad %653 %3547
       %3558 = OpVectorShuffle %15 %3557 %3557 1 1
       %3559 = OpFAdd %15 %3556 %3558
       %3560 = OpVectorTimesScalar %15 %3559 %472
       %3561 = OpFAdd %15 %3560 %671
               OpStore %3554 %3561
       %3562 = OpLoad %15 %3554
       %3563 = OpVectorTimesScalar %15 %3562 %553
       %3564 = OpExtInst %15 %1 Floor %3563
       %3565 = OpCompositeConstruct %15 %553 %553
       %3566 = OpFDiv %15 %3564 %3565
               OpStore %3554 %3566
       %3567 = OpLoad %369 %656
       %3568 = OpLoad %15 %3554
       %3569 = OpImageSampleImplicitLod %37 %3567 %3568
               OpStore %104 %3569
       %3571 = OpLoad %15 %3543
               OpStore %3570 %3571
               OpStore %3572 %1787
               OpStore %3573 %1789
               OpStore %3574 %1790
       %3575 = OpFunctionCall %6 %35 %3570 %3572 %3573 %3574
       %3576 = OpIEqual %39 %3575 %258
               OpSelectionMerge %3578 None
               OpBranchConditional %3576 %3577 %3579
       %3577 = OpLabel
               OpStore %128 %1802
               OpBranch %3578
       %3579 = OpLabel
               OpStore %128 %1348
               OpBranch %3578
       %3578 = OpLabel
       %3581 = OpLoad %369 %656
       %3582 = OpLoad %37 %98
       %3583 = OpVectorShuffle %15 %3582 %3582 0 1
       %3584 = OpVectorTimesScalar %15 %3583 %375
       %3585 = OpImageSampleImplicitLod %37 %3581 %3584
       %3586 = OpVectorShuffle %653 %3585 %3585 0 1 2
               OpStore %3580 %3586
       %3588 = OpLoad %653 %3580
       %3589 = OpVectorShuffle %15 %3588 %3588 0 2
       %3590 = OpLoad %653 %3580
       %3591 = OpVectorShuffle %15 %3590 %3590 1 1
       %3592 = OpFAdd %15 %3589 %3591
       %3593 = OpVectorTimesScalar %15 %3592 %472
       %3594 = OpFAdd %15 %3593 %671
               OpStore %3587 %3594
       %3595 = OpLoad %15 %3587
       %3596 = OpVectorTimesScalar %15 %3595 %553
       %3597 = OpExtInst %15 %1 Floor %3596
       %3598 = OpCompositeConstruct %15 %553 %553
       %3599 = OpFDiv %15 %3597 %3598
               OpStore %3587 %3599
       %3600 = OpLoad %369 %656
       %3601 = OpLoad %15 %3587
       %3602 = OpImageSampleImplicitLod %37 %3600 %3601
               OpStore %104 %3602
               OpStore %3603 %64
       %3604 = OpLoad %6 %3603
       %3605 = OpSGreaterThanEqual %39 %3604 %613
               OpSelectionMerge %3607 None
               OpBranchConditional %3605 %3606 %3607
       %3606 = OpLabel
               OpBranch %3607
       %3607 = OpLabel
               OpStore %3608 %64
               OpStore %3609 %64
               OpStore %3610 %63
               OpStore %3611 %63
               OpStore %3612 %3613
       %3614 = OpLoad %6 %3609
       %3615 = OpSGreaterThanEqual %39 %3614 %274
               OpSelectionMerge %3617 None
               OpBranchConditional %3615 %3616 %3617
       %3616 = OpLabel
               OpBranch %3617
       %3617 = OpLabel
       %3618 = OpLoad %6 %3609
       %3619 = OpIAdd %6 %3618 %258
               OpStore %3609 %3619
       %3621 = OpLoad %6 %3612
               OpStore %3620 %3621
       %3623 = OpLoad %6 %3612
       %3624 = OpLoad %6 %3611
       %3625 = OpIAdd %6 %3623 %3624
       %3626 = OpISub %6 %3625 %258
               OpStore %3622 %3626
       %3628 = OpLoad %6 %3612
       %3629 = OpLoad %6 %3611
       %3630 = OpIMul %6 %434 %3629
       %3631 = OpIAdd %6 %3628 %3630
       %3632 = OpISub %6 %3631 %258
       %3633 = OpLoad %6 %3610
       %3634 = OpExtInst %6 %1 SMin %3632 %3633
               OpStore %3627 %3634
       %3636 = OpLoad %6 %3620
               OpStore %3635 %3636
       %3638 = OpLoad %6 %3622
               OpStore %3637 %3638
       %3640 = OpLoad %6 %3627
               OpStore %3639 %3640
       %3641 = OpFunctionCall %2 %12 %3635 %3637 %3639
               OpStore %3642 %3643
               OpStore %3644 %64
               OpStore %3645 %3646
       %3648 = OpLoad %6 %3645
               OpStore %3647 %3648
               OpBranch %3649
       %3649 = OpLabel
               OpLoopMerge %3651 %3652 None
               OpBranch %3653
       %3653 = OpLabel
       %3654 = OpLoad %6 %3647
       %3655 = OpLoad %6 %3642
       %3656 = OpSLessThanEqual %39 %3654 %3655
               OpBranchConditional %3656 %3650 %3651
       %3650 = OpLabel
       %3657 = OpLoad %6 %3644
       %3658 = OpSGreaterThanEqual %39 %3657 %274
               OpSelectionMerge %3660 None
               OpBranchConditional %3658 %3659 %3660
       %3659 = OpLabel
               OpBranch %3651
       %3660 = OpLabel
       %3662 = OpLoad %6 %3644
       %3663 = OpIAdd %6 %3662 %258
               OpStore %3644 %3663
       %3664 = OpLoad %6 %3647
       %3665 = OpExtInst %6 %1 SClamp %3664 %64 %282
       %3666 = OpLoad %6 %3647
       %3667 = OpExtInst %6 %1 SClamp %3666 %64 %282
       %3668 = OpAccessChain %284 %66 %3667
       %3669 = OpLoad %6 %3668
       %3670 = OpAccessChain %284 %56 %3665
               OpStore %3670 %3669
               OpBranch %3652
       %3652 = OpLabel
       %3671 = OpLoad %6 %3647
       %3672 = OpIAdd %6 %3671 %258
               OpStore %3647 %3672
               OpBranch %3649
       %3651 = OpLabel
       %3673 = OpLoad %6 %3608
       %3674 = OpIMul %6 %1343 %3673
       %3675 = OpIAdd %6 %3674 %258
               OpStore %3608 %3675
               OpBranch %3150
       %3676 = OpLabel
       %3677 = OpAccessChain %378 %3128 %613
       %3678 = OpLoad %14 %3677
       %3679 = OpFDiv %14 %3678 %515
       %3680 = OpAccessChain %378 %3128 %282
       %3681 = OpLoad %14 %3680
       %3682 = OpFDiv %14 %3681 %515
       %3683 = OpFAdd %14 %3682 %387
       %3684 = OpAccessChain %378 %3128 %64
       %3685 = OpLoad %14 %3684
       %3687 = OpCompositeConstruct %37 %3685 %478 %478 %387
       %3688 = OpCompositeConstruct %37 %387 %478 %478 %478
       %3689 = OpCompositeConstruct %37 %478 %478 %478 %478
       %3690 = OpCompositeConstruct %3686 %3687 %3688 %3689
       %3691 = OpCompositeExtract %14 %3690 0 0
       %3692 = OpFDiv %14 %3691 %515
       %3693 = OpCompositeConstruct %37 %3679 %3683 %3692 %478
               OpStore %231 %3693
               OpBranch %3150
       %3150 = OpLabel
               OpStore %3694 %3697
               OpStore %3698 %63
               OpStore %3699 %64
               OpStore %3700 %63
               OpStore %3701 %64
       %3703 = OpLoad %6 %3698
               OpStore %3702 %3703
               OpBranch %3704
       %3704 = OpLabel
               OpLoopMerge %3706 %3707 None
               OpBranch %3708
       %3708 = OpLabel
       %3709 = OpLoad %6 %3702
       %3710 = OpLoad %6 %3699
       %3711 = OpSLessThan %39 %3709 %3710
               OpBranchConditional %3711 %3705 %3706
       %3705 = OpLabel
       %3712 = OpLoad %6 %3701
       %3713 = OpSGreaterThanEqual %39 %3712 %274
               OpSelectionMerge %3715 None
               OpBranchConditional %3713 %3714 %3715
       %3714 = OpLabel
               OpBranch %3706
       %3715 = OpLabel
       %3717 = OpLoad %6 %3701
       %3718 = OpIAdd %6 %3717 %258
               OpStore %3701 %3718
       %3720 = OpLoad %6 %3702
               OpStore %3719 %3720
       %3722 = OpLoad %6 %3702
       %3723 = OpLoad %6 %3700
       %3724 = OpIAdd %6 %3722 %3723
       %3725 = OpISub %6 %3724 %258
               OpStore %3721 %3725
       %3727 = OpLoad %6 %3702
       %3728 = OpLoad %6 %3700
       %3729 = OpIMul %6 %434 %3728
       %3730 = OpIAdd %6 %3727 %3729
       %3731 = OpISub %6 %3730 %258
       %3732 = OpLoad %6 %3699
       %3733 = OpExtInst %6 %1 SMin %3731 %3732
               OpStore %3726 %3733
       %3735 = OpLoad %6 %3719
               OpStore %3734 %3735
       %3737 = OpLoad %6 %3721
               OpStore %3736 %3737
       %3739 = OpLoad %6 %3726
               OpStore %3738 %3739
       %3740 = OpFunctionCall %2 %12 %3734 %3736 %3738
               OpBranch %3707
       %3707 = OpLabel
       %3741 = OpLoad %6 %3700
       %3742 = OpIMul %6 %434 %3741
       %3743 = OpLoad %6 %3702
       %3744 = OpIAdd %6 %3743 %3742
               OpStore %3702 %3744
               OpBranch %3704
       %3706 = OpLabel
               OpStore %3745 %3746
               OpStore %3747 %3748
               OpStore %3749 %64
               OpStore %3750 %3751
               OpStore %3752 %64
       %3753 = OpLoad %6 %3752
       %3754 = OpSGreaterThanEqual %39 %3753 %274
               OpSelectionMerge %3756 None
               OpBranchConditional %3754 %3755 %3756
       %3755 = OpLabel
               OpBranch %3756
       %3756 = OpLabel
       %3758 = OpLoad %37 %122
       %3759 = OpFAdd %37 %3758 %1609
       %3760 = OpVectorShuffle %15 %3759 %3759 0 1
       %3761 = OpAccessChain %1782 %1781 %64
       %3762 = OpLoad %15 %3761
       %3763 = OpFDiv %15 %3760 %3762
               OpStore %3757 %3763
       %3765 = OpLoad %15 %3757
               OpStore %3764 %3765
               OpStore %3766 %1787
               OpStore %3767 %1789
               OpStore %3768 %1790
       %3769 = OpFunctionCall %6 %35 %3764 %3766 %3767 %3768
       %3770 = OpIEqual %39 %3769 %258
               OpSelectionMerge %3772 None
               OpBranchConditional %3770 %3771 %3773
       %3771 = OpLabel
               OpStore %128 %1802
               OpBranch %3772
       %3773 = OpLabel
               OpStore %128 %1348
               OpBranch %3772
       %3772 = OpLabel
               OpStore %3774 %3775
       %3776 = OpLoad %6 %3774
       %3777 = OpSDiv %6 %3776 %434
               OpStore %3774 %3777
               OpStore %3778 %64
               OpStore %3779 %3780
               OpStore %3781 %3782
       %3783 = OpLoad %6 %3778
       %3784 = OpSGreaterThanEqual %39 %3783 %274
               OpSelectionMerge %3786 None
               OpBranchConditional %3784 %3785 %3786
       %3785 = OpLabel
               OpBranch %3786
       %3786 = OpLabel
       %3787 = OpLoad %6 %3778
       %3788 = OpIAdd %6 %3787 %258
               OpStore %3778 %3788
       %3789 = OpLoad %6 %3781
       %3790 = OpIAdd %6 %3789 %258
               OpStore %3781 %3790
       %3791 = OpExtInst %6 %1 SClamp %3789 %64 %282
       %3792 = OpLoad %6 %3779
       %3793 = OpIAdd %6 %3792 %258
               OpStore %3779 %3793
       %3794 = OpExtInst %6 %1 SClamp %3792 %64 %282
       %3795 = OpAccessChain %284 %56 %3794
       %3796 = OpLoad %6 %3795
       %3797 = OpAccessChain %284 %66 %3791
               OpStore %3797 %3796
               OpStore %3798 %3799
               OpStore %3800 %3803
       %3804 = OpAccessChain %7 %3800 %394
       %3805 = OpLoad %6 %3804
       %3806 = OpAccessChain %7 %3800 %394
       %3807 = OpLoad %6 %3806
       %3808 = OpAccessChain %7 %3800 %394
       %3809 = OpLoad %6 %3808
       %3810 = OpExtInst %6 %1 SClamp %3805 %3807 %3809
       %3811 = OpNot %6 %3810
       %3812 = OpNot %6 %3811
       %3813 = OpSGreaterThan %39 %3812 %64
               OpSelectionMerge %3815 None
               OpBranchConditional %3813 %3814 %3815
       %3814 = OpLabel
       %3816 = OpAccessChain %7 %3800 %394
       %3817 = OpLoad %6 %3816
       %3818 = OpISub %6 %3817 %434
       %3819 = OpAccessChain %7 %3800 %398
       %3820 = OpLoad %6 %3819
       %3821 = OpIMul %6 %3820 %1355
       %3822 = OpIAdd %6 %3818 %3821
       %3823 = OpExtInst %6 %1 SClamp %3822 %64 %1358
       %3824 = OpAccessChain %284 %188 %3823
       %3825 = OpLoad %6 %3824
       %3826 = OpIEqual %39 %3825 %64
               OpBranch %3815
       %3815 = OpLabel
       %3827 = OpPhi %39 %3813 %3786 %3826 %3814
               OpSelectionMerge %3829 None
               OpBranchConditional %3827 %3828 %3829
       %3828 = OpLabel
       %3830 = OpLoad %6 %3798
       %3831 = OpIAdd %6 %3830 %258
               OpStore %3798 %3831
               OpStore %3832 %63
               OpStore %3833 %3834
               OpStore %3835 %63
               OpStore %3836 %64
       %3838 = OpLoad %6 %3832
               OpStore %3837 %3838
               OpBranch %3839
       %3839 = OpLabel
               OpLoopMerge %3841 %3842 None
               OpBranch %3843
       %3843 = OpLabel
       %3844 = OpLoad %6 %3837
       %3845 = OpLoad %6 %3833
       %3846 = OpSLessThan %39 %3844 %3845
               OpBranchConditional %3846 %3840 %3841
       %3840 = OpLabel
       %3847 = OpLoad %6 %3836
       %3848 = OpSGreaterThanEqual %39 %3847 %274
               OpSelectionMerge %3850 None
               OpBranchConditional %3848 %3849 %3850
       %3849 = OpLabel
               OpBranch %3841
       %3850 = OpLabel
       %3852 = OpLoad %6 %3836
       %3853 = OpIAdd %6 %3852 %258
               OpStore %3836 %3853
       %3855 = OpLoad %6 %3837
               OpStore %3854 %3855
       %3857 = OpLoad %6 %3837
       %3858 = OpLoad %6 %3835
       %3859 = OpIAdd %6 %3857 %3858
       %3860 = OpISub %6 %3859 %258
               OpStore %3856 %3860
       %3862 = OpLoad %6 %3837
       %3863 = OpLoad %6 %3835
       %3864 = OpIMul %6 %434 %3863
       %3865 = OpIAdd %6 %3862 %3864
       %3866 = OpISub %6 %3865 %258
       %3867 = OpLoad %6 %3833
       %3868 = OpExtInst %6 %1 SMin %3866 %3867
               OpStore %3861 %3868
       %3870 = OpLoad %6 %3854
               OpStore %3869 %3870
       %3872 = OpLoad %6 %3856
               OpStore %3871 %3872
       %3874 = OpLoad %6 %3861
               OpStore %3873 %3874
       %3875 = OpFunctionCall %2 %12 %3869 %3871 %3873
               OpBranch %3842
       %3842 = OpLabel
       %3876 = OpLoad %6 %3835
       %3877 = OpIMul %6 %434 %3876
       %3878 = OpLoad %6 %3837
       %3879 = OpIAdd %6 %3878 %3877
               OpStore %3837 %3879
               OpBranch %3839
       %3841 = OpLabel
               OpBranch %3829
       %3829 = OpLabel
               OpStore %3880 %3883
       %3886 = OpLoad %14 %3747
       %3887 = OpSelect %14 %673 %3885 %3886
               OpStore %3884 %3887
       %3888 = OpLoad %6 %3749
       %3889 = OpBitwiseOr %6 %3888 %64
       %3890 = OpSGreaterThanEqual %39 %3889 %613
               OpSelectionMerge %3892 None
               OpBranchConditional %3890 %3891 %3892
       %3891 = OpLabel
               OpBranch %3892
       %3892 = OpLabel
       %3894 = OpLoad %369 %656
       %3895 = OpLoad %37 %98
       %3896 = OpVectorShuffle %15 %3895 %3895 0 1
       %3897 = OpVectorTimesScalar %15 %3896 %375
       %3898 = OpImageSampleImplicitLod %37 %3894 %3897
       %3899 = OpVectorShuffle %653 %3898 %3898 0 1 2
               OpStore %3893 %3899
       %3901 = OpLoad %653 %3893
       %3902 = OpVectorShuffle %15 %3901 %3901 0 2
       %3903 = OpLoad %653 %3893
       %3904 = OpVectorShuffle %15 %3903 %3903 1 1
       %3905 = OpFAdd %15 %3902 %3904
       %3906 = OpVectorTimesScalar %15 %3905 %472
       %3907 = OpFAdd %15 %3906 %671
               OpStore %3900 %3907
       %3908 = OpLoad %15 %3900
       %3909 = OpVectorTimesScalar %15 %3908 %553
       %3910 = OpExtInst %15 %1 Floor %3909
       %3911 = OpCompositeConstruct %15 %553 %553
       %3912 = OpFDiv %15 %3910 %3911
               OpStore %3900 %3912
       %3913 = OpLoad %369 %656
       %3914 = OpLoad %15 %3900
       %3915 = OpImageSampleImplicitLod %37 %3913 %3914
               OpStore %104 %3915
               OpStore %3916 %3917
       %3918 = OpAccessChain %503 %46 %398
       %3919 = OpLoad %14 %3918
       %3920 = OpConvertFToS %6 %3919
       %3921 = OpSLessThan %39 %3920 %748
               OpSelectionMerge %3923 None
               OpBranchConditional %3921 %3922 %3929
       %3922 = OpLabel
       %3924 = OpAccessChain %284 %56 %752
       %3925 = OpLoad %6 %3924
       %3926 = OpConvertSToF %14 %3925
       %3927 = OpFDiv %14 %3926 %515
       %3928 = OpFAdd %14 %472 %3927
               OpStore %3916 %3928
               OpBranch %3923
       %3929 = OpLabel
       %3930 = OpAccessChain %503 %46 %398
       %3931 = OpLoad %14 %3930
       %3932 = OpConvertFToS %6 %3931
       %3933 = OpSLessThan %39 %3932 %762
               OpSelectionMerge %3935 None
               OpBranchConditional %3933 %3934 %3941
       %3934 = OpLabel
       %3936 = OpAccessChain %284 %56 %274
       %3937 = OpLoad %6 %3936
       %3938 = OpConvertSToF %14 %3937
       %3939 = OpFDiv %14 %3938 %515
       %3940 = OpFAdd %14 %472 %3939
               OpStore %3916 %3940
               OpBranch %3935
       %3941 = OpLabel
       %3942 = OpAccessChain %503 %46 %398
       %3943 = OpLoad %14 %3942
       %3944 = OpConvertFToS %6 %3943
       %3945 = OpSLessThan %39 %3944 %507
               OpSelectionMerge %3947 None
               OpBranchConditional %3945 %3946 %3953
       %3946 = OpLabel
       %3948 = OpAccessChain %284 %56 %511
       %3949 = OpLoad %6 %3948
       %3950 = OpConvertSToF %14 %3949
       %3951 = OpFDiv %14 %3950 %515
       %3952 = OpFAdd %14 %472 %3951
               OpStore %3916 %3952
               OpBranch %3947
       %3953 = OpLabel
               OpBranch %3947
       %3947 = OpLabel
               OpBranch %3935
       %3935 = OpLabel
               OpBranch %3923
       %3923 = OpLabel
               OpStore %3954 %63
               OpStore %3955 %64
               OpStore %3956 %3958
               OpStore %3959 %220
       %3961 = OpLoad %37 %110
       %3962 = OpVectorShuffle %15 %3961 %3961 0 1
       %3963 = OpVectorTimesScalar %15 %3962 %375
               OpStore %3960 %3963
               OpSelectionMerge %3966 None
               OpBranchConditional %673 %3965 %3970
       %3965 = OpLabel
       %3968 = OpLoad %15 %3960
               OpStore %3967 %3968
       %3969 = OpFunctionCall %15 %23 %3967
               OpStore %3960 %3969
               OpStore %3964 %3969
               OpBranch %3966
       %3970 = OpLabel
               OpStore %3964 %3973
               OpBranch %3966
       %3966 = OpLabel
               OpStore %3974 %3975
       %3976 = OpAccessChain %284 %56 %64
       %3977 = OpLoad %6 %3976
       %3978 = OpConvertSToF %14 %3977
       %3979 = OpFDiv %14 %3978 %515
       %3980 = OpFAdd %14 %472 %3979
               OpStore %3974 %3980
       %3981 = OpLoad %15 %3960
       %3982 = OpVectorTimesScalar %15 %3981 %553
       %3983 = OpExtInst %15 %1 Floor %3982
       %3984 = OpCompositeConstruct %15 %553 %553
       %3985 = OpFDiv %15 %3983 %3984
               OpStore %3960 %3985
       %3987 = OpLoad %369 %3986
       %3988 = OpLoad %15 %3960
       %3989 = OpImageSampleImplicitLod %37 %3987 %3988
       %3990 = OpVectorShuffle %653 %3989 %3989 0 1 2
       %3991 = OpCompositeExtract %14 %3990 0
       %3992 = OpCompositeExtract %14 %3990 1
       %3993 = OpCompositeExtract %14 %3990 2
       %3994 = OpCompositeConstruct %37 %3991 %3992 %3993 %478
               OpStore %116 %3994
               OpStore %3995 %3996
               OpStore %3997 %3998
               OpStore %3999 %64
               OpStore %4000 %258
               OpBranch %4001
       %4001 = OpLabel
               OpLoopMerge %4003 %4004 None
               OpBranch %4005
       %4005 = OpLabel
       %4006 = OpLoad %6 %4000
       %4007 = OpLoad %6 %3997
       %4008 = OpSLessThanEqual %39 %4006 %4007
               OpBranchConditional %4008 %4002 %4003
       %4002 = OpLabel
       %4009 = OpLoad %6 %3999
       %4010 = OpSGreaterThanEqual %39 %4009 %274
               OpSelectionMerge %4012 None
               OpBranchConditional %4010 %4011 %4012
       %4011 = OpLabel
               OpBranch %4003
       %4012 = OpLabel
       %4014 = OpLoad %6 %3999
       %4015 = OpIAdd %6 %4014 %258
               OpStore %3999 %4015
               OpStore %4016 %64
       %4018 = OpLoad %6 %3995
               OpStore %4017 %4018
               OpBranch %4019
       %4019 = OpLabel
               OpLoopMerge %4021 %4022 None
               OpBranch %4023
       %4023 = OpLabel
       %4024 = OpLoad %6 %4017
       %4025 = OpLoad %6 %3997
       %4026 = OpSLessThan %39 %4024 %4025
               OpBranchConditional %4026 %4020 %4021
       %4020 = OpLabel
       %4027 = OpLoad %6 %4016
       %4028 = OpSGreaterThanEqual %39 %4027 %274
               OpSelectionMerge %4030 None
               OpBranchConditional %4028 %4029 %4030
       %4029 = OpLabel
               OpBranch %4021
       %4030 = OpLabel
       %4032 = OpLoad %6 %4016
       %4033 = OpIAdd %6 %4032 %258
               OpStore %4016 %4033
       %4035 = OpLoad %6 %4017
               OpStore %4034 %4035
       %4037 = OpLoad %6 %4017
       %4038 = OpLoad %6 %4000
       %4039 = OpIAdd %6 %4037 %4038
       %4040 = OpISub %6 %4039 %258
               OpStore %4036 %4040
       %4042 = OpLoad %6 %4017
       %4043 = OpLoad %6 %4000
       %4044 = OpIMul %6 %434 %4043
       %4045 = OpIAdd %6 %4042 %4044
       %4046 = OpISub %6 %4045 %258
       %4047 = OpLoad %6 %3997
       %4048 = OpExtInst %6 %1 SMin %4046 %4047
               OpStore %4041 %4048
       %4050 = OpLoad %6 %4034
               OpStore %4049 %4050
       %4052 = OpLoad %6 %4036
               OpStore %4051 %4052
       %4054 = OpLoad %6 %4041
               OpStore %4053 %4054
       %4055 = OpFunctionCall %2 %12 %4049 %4051 %4053
               OpBranch %4022
       %4022 = OpLabel
       %4056 = OpLoad %6 %4000
       %4057 = OpIMul %6 %434 %4056
       %4058 = OpLoad %6 %4017
       %4059 = OpIAdd %6 %4058 %4057
               OpStore %4017 %4059
               OpBranch %4019
       %4021 = OpLabel
               OpBranch %4004
       %4004 = OpLabel
       %4060 = OpLoad %6 %4000
       %4061 = OpIMul %6 %434 %4060
               OpStore %4000 %4061
               OpBranch %4001
       %4003 = OpLabel
       %4062 = OpLoad %6 %3955
       %4063 = OpSGreaterThanEqual %39 %4062 %274
               OpSelectionMerge %4065 None
               OpBranchConditional %4063 %4064 %4065
       %4064 = OpLabel
               OpBranch %4065
       %4065 = OpLabel
       %4066 = OpLoad %6 %3955
       %4067 = OpIAdd %6 %4066 %258
               OpStore %3955 %4067
       %4068 = OpLoad %6 %3959
       %4069 = OpExtInst %6 %1 SClamp %4068 %64 %282
       %4070 = OpAccessChain %2461 %137 %4069
       %4071 = OpLoad %134 %4070
               OpStore %3956 %4071
       %4072 = OpAccessChain %7 %3956 %64
       %4073 = OpLoad %6 %4072
       %4074 = OpLoad %6 %3954
       %4075 = OpIEqual %39 %4073 %4074
               OpSelectionMerge %4077 None
               OpBranchConditional %4075 %4076 %4077
       %4076 = OpLabel
               OpBranch %4077
       %4077 = OpLabel
       %4078 = OpLoad %6 %3954
       %4079 = OpAccessChain %7 %3956 %64
       %4080 = OpLoad %6 %4079
       %4081 = OpSGreaterThan %39 %4078 %4080
               OpSelectionMerge %4084 None
               OpBranchConditional %4081 %4083 %4087
       %4083 = OpLabel
       %4085 = OpAccessChain %7 %3956 %434
       %4086 = OpLoad %6 %4085
               OpStore %4082 %4086
               OpBranch %4084
       %4087 = OpLabel
       %4088 = OpAccessChain %7 %3956 %258
       %4089 = OpLoad %6 %4088
               OpStore %4082 %4089
               OpBranch %4084
       %4084 = OpLabel
       %4090 = OpLoad %6 %4082
               OpStore %3959 %4090
               OpStore %4091 %4092
       %4093 = OpAccessChain %503 %46 %398
       %4094 = OpLoad %14 %4093
       %4095 = OpConvertFToS %6 %4094
       %4096 = OpSLessThan %39 %4095 %2471
               OpSelectionMerge %4098 None
               OpBranchConditional %4096 %4097 %4099
       %4097 = OpLabel
               OpBranch %4098
       %4099 = OpLabel
       %4100 = OpAccessChain %503 %46 %398
       %4101 = OpLoad %14 %4100
       %4102 = OpConvertFToS %6 %4101
       %4103 = OpSLessThan %39 %4102 %2025
               OpSelectionMerge %4105 None
               OpBranchConditional %4103 %4104 %4111
       %4104 = OpLabel
       %4106 = OpAccessChain %284 %56 %613
       %4107 = OpLoad %6 %4106
       %4108 = OpConvertSToF %14 %4107
       %4109 = OpFDiv %14 %4108 %515
       %4110 = OpFAdd %14 %472 %4109
               OpStore %4091 %4110
               OpBranch %4105
       %4111 = OpLabel
       %4112 = OpAccessChain %503 %46 %398
       %4113 = OpLoad %14 %4112
       %4114 = OpConvertFToS %6 %4113
       %4115 = OpSLessThan %39 %4114 %748
               OpSelectionMerge %4117 None
               OpBranchConditional %4115 %4116 %4123
       %4116 = OpLabel
       %4118 = OpAccessChain %284 %56 %752
       %4119 = OpLoad %6 %4118
       %4120 = OpConvertSToF %14 %4119
       %4121 = OpFDiv %14 %4120 %515
       %4122 = OpFAdd %14 %472 %4121
               OpStore %4091 %4122
               OpBranch %4117
       %4123 = OpLabel
       %4124 = OpAccessChain %503 %46 %398
       %4125 = OpLoad %14 %4124
       %4126 = OpConvertFToS %6 %4125
       %4127 = OpSLessThan %39 %4126 %762
               OpSelectionMerge %4129 None
               OpBranchConditional %4127 %4128 %4135
       %4128 = OpLabel
       %4130 = OpAccessChain %284 %56 %274
       %4131 = OpLoad %6 %4130
       %4132 = OpConvertSToF %14 %4131
       %4133 = OpFDiv %14 %4132 %515
       %4134 = OpFAdd %14 %472 %4133
               OpStore %4091 %4134
               OpBranch %4129
       %4135 = OpLabel
       %4136 = OpAccessChain %503 %46 %398
       %4137 = OpLoad %14 %4136
       %4138 = OpConvertFToS %6 %4137
       %4139 = OpSLessThan %39 %4138 %507
               OpSelectionMerge %4141 None
               OpBranchConditional %4139 %4140 %4147
       %4140 = OpLabel
       %4142 = OpAccessChain %284 %56 %511
       %4143 = OpLoad %6 %4142
       %4144 = OpConvertSToF %14 %4143
       %4145 = OpFDiv %14 %4144 %515
       %4146 = OpFAdd %14 %472 %4145
               OpStore %4091 %4146
               OpBranch %4141
       %4147 = OpLabel
               OpBranch %4141
       %4141 = OpLabel
               OpBranch %4129
       %4129 = OpLabel
               OpBranch %4117
       %4117 = OpLabel
               OpBranch %4105
       %4105 = OpLabel
               OpBranch %4098
       %4098 = OpLabel
       %4148 = OpLoad %6 %3749
       %4149 = OpIAdd %6 %4148 %258
               OpStore %3749 %4149
               OpStore %4150 %64
       %4151 = OpLoad %6 %4150
       %4152 = OpSGreaterThanEqual %39 %4151 %274
               OpSelectionMerge %4154 None
               OpBranchConditional %4152 %4153 %4154
       %4153 = OpLabel
               OpBranch %4154
       %4154 = OpLabel
       %4155 = OpLoad %15 %3694
       %4156 = OpLoad %15 %3880
       %4157 = OpFSub %15 %4156 %4155
               OpStore %3880 %4157
       %4158 = OpLoad %14 %3750
       %4159 = OpLoad %14 %3884
       %4160 = OpFAdd %14 %4159 %4158
               OpStore %3884 %4160
       %4161 = OpFDiv %14 %4160 %478
       %4163 = OpLoad %369 %4162
       %4164 = OpLoad %15 %3880
       %4165 = OpImageSampleImplicitLod %37 %4163 %4164
       %4166 = OpCompositeExtract %14 %4165 1
               OpStore %3747 %4166
       %4167 = OpLoad %6 %3745
       %4168 = OpIAdd %6 %4167 %258
               OpStore %3745 %4168
               OpStore %4169 %4173
       %4174 = OpAccessChain %284 %212 %64 %258
       %4175 = OpLoad %6 %4174
       %4176 = OpConvertSToF %14 %4175
       %4177 = OpAccessChain %378 %4169 %394
       %4178 = OpLoad %14 %4177
       %4179 = OpFAdd %14 %4178 %4176
       %4180 = OpAccessChain %378 %4169 %394
               OpStore %4180 %4179
               OpStore %4181 %4182
       %4183 = OpAccessChain %503 %46 %398
       %4184 = OpLoad %14 %4183
       %4185 = OpConvertFToS %6 %4184
       %4186 = OpSLessThan %39 %4185 %762
               OpSelectionMerge %4188 None
               OpBranchConditional %4186 %4187 %4194
       %4187 = OpLabel
       %4189 = OpAccessChain %284 %56 %274
       %4190 = OpLoad %6 %4189
       %4191 = OpConvertSToF %14 %4190
       %4192 = OpFDiv %14 %4191 %515
       %4193 = OpFAdd %14 %472 %4192
               OpStore %4181 %4193
               OpBranch %4188
       %4194 = OpLabel
       %4195 = OpAccessChain %503 %46 %398
       %4196 = OpLoad %14 %4195
       %4197 = OpConvertFToS %6 %4196
       %4198 = OpSLessThan %39 %4197 %507
               OpSelectionMerge %4200 None
               OpBranchConditional %4198 %4199 %4206
       %4199 = OpLabel
       %4201 = OpAccessChain %284 %56 %511
       %4202 = OpLoad %6 %4201
       %4203 = OpConvertSToF %14 %4202
       %4204 = OpFDiv %14 %4203 %515
       %4205 = OpFAdd %14 %472 %4204
               OpStore %4181 %4205
               OpBranch %4200
       %4206 = OpLabel
               OpBranch %4200
       %4200 = OpLabel
               OpBranch %4188
       %4188 = OpLabel
               OpStore %4207 %64
       %4208 = OpLoad %6 %4207
       %4209 = OpSGreaterThanEqual %39 %4208 %274
               OpSelectionMerge %4211 None
               OpBranchConditional %4209 %4210 %4211
       %4210 = OpLabel
               OpBranch %4211
       %4211 = OpLabel
               OpKill
       %2076 = OpLabel
               OpBranch %1964
       %1964 = OpLabel
               OpBranch %1615
       %1615 = OpLabel
               OpBranch %1582
       %1582 = OpLabel
               OpStore %5410 %5411
               OpStore %5412 %5413
               OpStore %5414 %63
       %5415 = OpLoad %6 %5410
       %5416 = OpExtInst %6 %1 SClamp %5415 %64 %282
       %5417 = OpAccessChain %284 %56 %5416
       %5418 = OpLoad %6 %5417
       %5419 = OpLoad %6 %5412
       %5420 = OpExtInst %6 %1 SClamp %5419 %64 %282
       %5421 = OpAccessChain %284 %56 %5420
       %5422 = OpLoad %6 %5421
       %5423 = OpSLessThan %39 %5418 %5422
               OpSelectionMerge %5425 None
               OpBranchConditional %5423 %5424 %5435
       %5424 = OpLabel
       %5426 = OpLoad %6 %5414
       %5427 = OpIAdd %6 %5426 %258
               OpStore %5414 %5427
       %5428 = OpExtInst %6 %1 SClamp %5426 %64 %282
       %5429 = OpLoad %6 %5410
       %5430 = OpIAdd %6 %5429 %258
               OpStore %5410 %5430
       %5431 = OpExtInst %6 %1 SClamp %5429 %64 %282
       %5432 = OpAccessChain %284 %56 %5431
       %5433 = OpLoad %6 %5432
       %5434 = OpAccessChain %284 %66 %5428
               OpStore %5434 %5433
               OpBranch %5425
       %5435 = OpLabel
       %5436 = OpLoad %6 %5414
       %5437 = OpIAdd %6 %5436 %258
               OpStore %5414 %5437
       %5438 = OpExtInst %6 %1 SClamp %5436 %64 %282
       %5439 = OpLoad %6 %5412
       %5440 = OpIAdd %6 %5439 %258
               OpStore %5412 %5440
       %5441 = OpExtInst %6 %1 SClamp %5439 %64 %282
       %5442 = OpAccessChain %284 %56 %5441
       %5443 = OpLoad %6 %5442
       %5444 = OpAccessChain %284 %66 %5438
               OpStore %5444 %5443
               OpBranch %5425
       %5425 = OpLabel
       %5446 = OpLoad %37 %122
       %5447 = OpVectorShuffle %15 %5446 %5446 0 1
       %5448 = OpAccessChain %1782 %1781 %64
       %5449 = OpLoad %15 %5448
       %5450 = OpFDiv %15 %5447 %5449
       %5451 = OpFAdd %15 %3357 %5450
               OpStore %5445 %5451
       %5453 = OpLoad %15 %5445
               OpStore %5452 %5453
               OpStore %5454 %1787
               OpStore %5455 %1789
               OpStore %5456 %1790
       %5457 = OpFunctionCall %6 %35 %5452 %5454 %5455 %5456
       %5458 = OpIEqual %39 %5457 %258
               OpSelectionMerge %5460 None
               OpBranchConditional %5458 %5459 %5490
       %5459 = OpLabel
               OpSelectionMerge %5464 None
               OpBranchConditional %1311 %5463 %5466
       %5463 = OpLabel
       %5465 = OpLoad %37 %98
               OpStore %5462 %5465
               OpBranch %5464
       %5466 = OpLabel
       %5467 = OpLoad %369 %656
       %5468 = OpLoad %37 %98
       %5469 = OpVectorShuffle %15 %5468 %5468 0 1
       %5470 = OpVectorTimesScalar %15 %5469 %375
       %5471 = OpImageSampleImplicitLod %37 %5467 %5470
               OpStore %5462 %5471
               OpBranch %5464
       %5464 = OpLabel
       %5472 = OpLoad %37 %5462
       %5473 = OpVectorShuffle %653 %5472 %5472 0 1 2
               OpStore %5461 %5473
       %5475 = OpLoad %653 %5461
       %5476 = OpVectorShuffle %15 %5475 %5475 0 2
       %5477 = OpLoad %653 %5461
       %5478 = OpVectorShuffle %15 %5477 %5477 1 1
       %5479 = OpFAdd %15 %5476 %5478
       %5480 = OpVectorTimesScalar %15 %5479 %472
       %5481 = OpFAdd %15 %5480 %671
               OpStore %5474 %5481
       %5482 = OpLoad %15 %5474
       %5483 = OpVectorTimesScalar %15 %5482 %553
       %5484 = OpExtInst %15 %1 Floor %5483
       %5485 = OpCompositeConstruct %15 %553 %553
       %5486 = OpFDiv %15 %5484 %5485
               OpStore %5474 %5486
       %5487 = OpLoad %369 %656
       %5488 = OpLoad %15 %5474
       %5489 = OpImageSampleImplicitLod %37 %5487 %5488
               OpStore %104 %5489
               OpStore %128 %1802
               OpBranch %5460
       %5490 = OpLabel
               OpStore %128 %1348
               OpBranch %5460
       %5460 = OpLabel
               OpStore %5491 %5494
       %5495 = OpAccessChain %378 %5491 %398
       %5496 = OpLoad %14 %5495
       %5497 = OpFOrdGreaterThan %39 %5496 %478
               OpSelectionMerge %5499 None
               OpBranchConditional %5497 %5498 %5499
       %5498 = OpLabel
       %5500 = OpAccessChain %378 %5491 %398
       %5501 = OpLoad %14 %5500
       %5502 = OpFSub %14 %5501 %478
       %5503 = OpAccessChain %378 %5491 %398
               OpStore %5503 %5502
               OpBranch %5499
       %5499 = OpLabel
               OpBranch %1498
       %1498 = OpLabel
               OpBranch %1495
       %1497 = OpLabel
               OpStore %5504 %5505
               OpStore %5506 %5509
       %5510 = OpAccessChain %378 %5506 %398
       %5511 = OpLoad %14 %5510
       %5512 = OpAccessChain %378 %5506 %394
       %5513 = OpLoad %14 %5512
       %5514 = OpFOrdLessThan %39 %5511 %5513
               OpSelectionMerge %5516 None
               OpBranchConditional %5514 %5515 %5516
       %5515 = OpLabel
       %5517 = OpLoad %14 %5504
       %5518 = OpFSub %14 %472 %5517
               OpStore %5504 %5518
               OpBranch %5516
       %5516 = OpLabel
       %5519 = OpLoad %37 %1490
               OpStore %1511 %5519
               OpReturn
               OpFunctionEnd
         %12 = OpFunction %2 None %8
          %9 = OpFunctionParameter %7
         %10 = OpFunctionParameter %7
         %11 = OpFunctionParameter %7
         %13 = OpLabel
        %252 = OpVariable %7 Function
        %254 = OpVariable %7 Function
        %256 = OpVariable %7 Function
        %260 = OpVariable %7 Function
        %313 = OpVariable %7 Function
        %341 = OpVariable %7 Function
        %342 = OpVariable %7 Function
        %253 = OpLoad %6 %9
               OpStore %252 %253
        %255 = OpLoad %6 %9
               OpStore %254 %255
        %257 = OpLoad %6 %10
        %259 = OpIAdd %6 %257 %258
               OpStore %256 %259
               OpStore %260 %64
               OpBranch %261
        %261 = OpLabel
               OpLoopMerge %263 %264 None
               OpBranch %265
        %265 = OpLabel
        %266 = OpLoad %6 %254
        %267 = OpLoad %6 %10
        %268 = OpSLessThanEqual %39 %266 %267
        %269 = OpLoad %6 %256
        %270 = OpLoad %6 %11
        %271 = OpSLessThanEqual %39 %269 %270
        %272 = OpLogicalAnd %39 %268 %271
               OpBranchConditional %272 %262 %263
        %262 = OpLabel
        %273 = OpLoad %6 %260
        %275 = OpSGreaterThanEqual %39 %273 %274
               OpSelectionMerge %277 None
               OpBranchConditional %275 %276 %277
        %276 = OpLabel
               OpBranch %263
        %277 = OpLabel
        %279 = OpLoad %6 %260
        %280 = OpIAdd %6 %279 %258
               OpStore %260 %280
        %281 = OpLoad %6 %254
        %283 = OpExtInst %6 %1 SClamp %281 %64 %282
        %285 = OpAccessChain %284 %56 %283
        %286 = OpLoad %6 %285
        %287 = OpLoad %6 %256
        %288 = OpExtInst %6 %1 SClamp %287 %64 %282
        %289 = OpAccessChain %284 %56 %288
        %290 = OpLoad %6 %289
        %291 = OpSLessThan %39 %286 %290
               OpSelectionMerge %293 None
               OpBranchConditional %291 %292 %303
        %292 = OpLabel
        %294 = OpLoad %6 %252
        %295 = OpIAdd %6 %294 %258
               OpStore %252 %295
        %296 = OpExtInst %6 %1 SClamp %294 %64 %282
        %297 = OpLoad %6 %254
        %298 = OpIAdd %6 %297 %258
               OpStore %254 %298
        %299 = OpExtInst %6 %1 SClamp %297 %64 %282
        %300 = OpAccessChain %284 %56 %299
        %301 = OpLoad %6 %300
        %302 = OpAccessChain %284 %66 %296
               OpStore %302 %301
               OpBranch %293
        %303 = OpLabel
        %304 = OpLoad %6 %252
        %305 = OpIAdd %6 %304 %258
               OpStore %252 %305
        %306 = OpExtInst %6 %1 SClamp %304 %64 %282
        %307 = OpLoad %6 %256
        %308 = OpIAdd %6 %307 %258
               OpStore %256 %308
        %309 = OpExtInst %6 %1 SClamp %307 %64 %282
        %310 = OpAccessChain %284 %56 %309
        %311 = OpLoad %6 %310
        %312 = OpAccessChain %284 %66 %306
               OpStore %312 %311
               OpBranch %293
        %293 = OpLabel
               OpBranch %264
        %264 = OpLabel
               OpBranch %261
        %263 = OpLabel
               OpStore %313 %64
               OpBranch %314
        %314 = OpLabel
               OpLoopMerge %316 %317 None
               OpBranch %318
        %318 = OpLabel
        %319 = OpLoad %6 %254
        %320 = OpSLessThan %39 %319 %63
        %321 = OpLoad %6 %254
        %322 = OpLoad %6 %10
        %323 = OpSLessThanEqual %39 %321 %322
        %324 = OpLogicalAnd %39 %320 %323
               OpBranchConditional %324 %315 %316
        %315 = OpLabel
        %325 = OpLoad %6 %313
        %326 = OpSGreaterThanEqual %39 %325 %274
               OpSelectionMerge %328 None
               OpBranchConditional %326 %327 %328
        %327 = OpLabel
               OpBranch %316
        %328 = OpLabel
        %330 = OpLoad %6 %313
        %331 = OpIAdd %6 %330 %258
               OpStore %313 %331
        %332 = OpLoad %6 %252
        %333 = OpIAdd %6 %332 %258
               OpStore %252 %333
        %334 = OpExtInst %6 %1 SClamp %332 %64 %282
        %335 = OpLoad %6 %254
        %336 = OpIAdd %6 %335 %258
               OpStore %254 %336
        %337 = OpExtInst %6 %1 SClamp %335 %64 %282
        %338 = OpAccessChain %284 %56 %337
        %339 = OpLoad %6 %338
        %340 = OpAccessChain %284 %66 %334
               OpStore %340 %339
               OpBranch %317
        %317 = OpLabel
               OpBranch %314
        %316 = OpLabel
               OpStore %341 %64
        %343 = OpLoad %6 %9
               OpStore %342 %343
               OpBranch %344
        %344 = OpLabel
               OpLoopMerge %346 %347 None
               OpBranch %348
        %348 = OpLabel
        %349 = OpLoad %6 %342
        %350 = OpLoad %6 %11
        %351 = OpSLessThanEqual %39 %349 %350
               OpBranchConditional %351 %345 %346
        %345 = OpLabel
        %352 = OpLoad %6 %341
        %353 = OpSGreaterThanEqual %39 %352 %274
               OpSelectionMerge %355 None
               OpBranchConditional %353 %354 %355
        %354 = OpLabel
               OpBranch %346
        %355 = OpLabel
        %357 = OpLoad %6 %341
        %358 = OpIAdd %6 %357 %258
               OpStore %341 %358
        %359 = OpLoad %6 %342
        %360 = OpExtInst %6 %1 SClamp %359 %64 %282
        %361 = OpLoad %6 %342
        %362 = OpExtInst %6 %1 SClamp %361 %64 %282
        %363 = OpAccessChain %284 %66 %362
        %364 = OpLoad %6 %363
        %365 = OpAccessChain %284 %56 %360
               OpStore %365 %364
               OpBranch %347
        %347 = OpLabel
        %366 = OpLoad %6 %342
        %367 = OpIAdd %6 %366 %258
               OpStore %342 %367
               OpBranch %344
        %346 = OpLabel
               OpReturn
               OpFunctionEnd
         %19 = OpFunction %14 None %17
         %18 = OpFunctionParameter %16
         %20 = OpLabel
        %379 = OpVariable %378 Function
        %389 = OpVariable %16 Function
        %392 = OpVariable %378 Function
        %412 = OpVariable %7 Function
        %413 = OpVariable %7 Function
        %415 = OpVariable %7 Function
        %417 = OpVariable %7 Function
        %425 = OpVariable %7 Function
        %427 = OpVariable %7 Function
        %432 = OpVariable %7 Function
        %441 = OpVariable %7 Function
        %443 = OpVariable %7 Function
        %445 = OpVariable %7 Function
        %453 = OpVariable %378 Function
        %501 = OpVariable %378 Function
        %532 = OpVariable %16 Function
        %544 = OpVariable %543 Function
        %557 = OpVariable %556 Function
        %570 = OpVariable %556 Function
        %583 = OpVariable %378 Function
        %602 = OpVariable %601 Function
        %610 = OpVariable %7 Function
        %622 = OpVariable %7 Function
        %630 = OpVariable %7 Function
        %655 = OpVariable %654 Function
        %663 = OpVariable %16 Function
        %674 = OpVariable %16 Function
        %372 = OpLoad %369 %371
        %373 = OpLoad %37 %86
        %374 = OpVectorShuffle %15 %373 %373 0 1
        %376 = OpVectorTimesScalar %15 %374 %375
        %377 = OpImageSampleImplicitLod %37 %372 %376
               OpStore %92 %377
               OpStore %379 %380
        %381 = OpLoad %15 %18
        %382 = OpExtInst %14 %1 Length %381
        %384 = OpFOrdLessThan %39 %382 %383
               OpSelectionMerge %386 None
               OpBranchConditional %384 %385 %386
        %385 = OpLabel
               OpReturnValue %387
        %386 = OpLabel
        %390 = OpLoad %15 %18
        %391 = OpExtInst %15 %1 FAbs %390
               OpStore %389 %391
        %395 = OpAccessChain %378 %389 %394
        %396 = OpLoad %14 %395
        %397 = OpExtInst %14 %1 FMin %393 %396
               OpStore %392 %397
        %399 = OpAccessChain %378 %389 %398
        %400 = OpLoad %14 %399
        %401 = OpAccessChain %378 %389 %394
        %402 = OpLoad %14 %401
        %403 = OpFOrdGreaterThan %39 %400 %402
               OpSelectionMerge %405 None
               OpBranchConditional %403 %404 %411
        %404 = OpLabel
        %406 = OpAccessChain %378 %389 %394
        %407 = OpLoad %14 %406
        %408 = OpAccessChain %378 %389 %398
        %409 = OpLoad %14 %408
        %410 = OpFDiv %14 %407 %409
               OpStore %392 %410
               OpBranch %405
        %411 = OpLabel
               OpStore %412 %64
               OpStore %413 %414
               OpStore %415 %416
               OpStore %417 %418
        %419 = OpLoad %6 %412
        %420 = OpSGreaterThanEqual %39 %419 %274
               OpSelectionMerge %422 None
               OpBranchConditional %420 %421 %422
        %421 = OpLabel
               OpBranch %422
        %422 = OpLabel
        %423 = OpLoad %6 %412
        %424 = OpIAdd %6 %423 %258
               OpStore %412 %424
        %426 = OpLoad %6 %417
               OpStore %425 %426
        %428 = OpLoad %6 %417
        %429 = OpLoad %6 %415
        %430 = OpIAdd %6 %428 %429
        %431 = OpISub %6 %430 %258
               OpStore %427 %431
        %433 = OpLoad %6 %417
        %435 = OpLoad %6 %415
        %436 = OpIMul %6 %434 %435
        %437 = OpIAdd %6 %433 %436
        %438 = OpISub %6 %437 %258
        %439 = OpLoad %6 %413
        %440 = OpExtInst %6 %1 SMin %438 %439
               OpStore %432 %440
        %442 = OpLoad %6 %425
               OpStore %441 %442
        %444 = OpLoad %6 %427
               OpStore %443 %444
        %446 = OpLoad %6 %432
               OpStore %445 %446
        %447 = OpFunctionCall %2 %12 %441 %443 %445
        %448 = OpAccessChain %378 %389 %398
        %449 = OpLoad %14 %448
        %450 = OpAccessChain %378 %389 %394
        %451 = OpLoad %14 %450
        %452 = OpFDiv %14 %449 %451
               OpStore %392 %452
               OpBranch %405
        %405 = OpLabel
        %456 = OpLoad %14 %392
        %457 = OpFMul %14 %455 %456
        %458 = OpLoad %14 %392
        %459 = OpFMul %14 %457 %458
        %460 = OpFSub %14 %454 %459
        %461 = OpLoad %14 %392
        %462 = OpFMul %14 %460 %461
        %463 = OpLoad %14 %379
        %464 = OpFMul %14 %462 %463
               OpStore %453 %464
        %465 = OpAccessChain %378 %389 %398
        %466 = OpLoad %14 %465
        %467 = OpAccessChain %378 %389 %394
        %468 = OpLoad %14 %467
        %469 = OpFOrdLessThan %39 %466 %468
               OpSelectionMerge %471 None
               OpBranchConditional %469 %470 %471
        %470 = OpLabel
        %473 = OpLoad %14 %453
        %474 = OpFSub %14 %472 %473
               OpStore %453 %474
        %475 = OpFAdd %14 %474 %387
               OpBranch %471
        %471 = OpLabel
        %476 = OpAccessChain %378 %18 %394
        %477 = OpLoad %14 %476
        %480 = OpCompositeConstruct %15 %477 %387
        %481 = OpCompositeConstruct %15 %478 %387
        %482 = OpCompositeConstruct %15 %387 %478
        %483 = OpCompositeConstruct %15 %387 %478
        %484 = OpCompositeConstruct %479 %480 %481 %482 %483
        %485 = OpCompositeExtract %15 %484 0
        %486 = OpCompositeExtract %15 %484 1
        %487 = OpCompositeExtract %15 %484 2
        %488 = OpCompositeExtract %15 %484 3
        %489 = OpCompositeConstruct %479 %485 %486 %487 %488
        %490 = OpCompositeExtract %15 %489 0
        %491 = OpCompositeExtract %15 %489 1
        %492 = OpCompositeExtract %15 %489 2
        %493 = OpCompositeExtract %15 %489 3
        %494 = OpCompositeConstruct %479 %490 %491 %492 %493
        %495 = OpCompositeExtract %14 %494 0 0
        %496 = OpFOrdLessThan %39 %495 %387
               OpSelectionMerge %498 None
               OpBranchConditional %496 %497 %498
        %497 = OpLabel
        %499 = OpLoad %14 %453
        %500 = OpFSub %14 %478 %499
               OpStore %453 %500
               OpStore %501 %502
        %504 = OpAccessChain %503 %46 %398
        %505 = OpLoad %14 %504
        %506 = OpConvertFToS %6 %505
        %508 = OpSLessThan %39 %506 %507
               OpSelectionMerge %510 None
               OpBranchConditional %508 %509 %518
        %509 = OpLabel
        %512 = OpAccessChain %284 %56 %511
        %513 = OpLoad %6 %512
        %514 = OpConvertSToF %14 %513
        %516 = OpFDiv %14 %514 %515
        %517 = OpFAdd %14 %472 %516
               OpStore %501 %517
               OpBranch %510
        %518 = OpLabel
               OpBranch %510
        %510 = OpLabel
               OpBranch %498
        %498 = OpLabel
        %519 = OpAccessChain %378 %18 %398
        %520 = OpLoad %14 %519
        %521 = OpFOrdLessThan %39 %520 %387
               OpSelectionMerge %523 None
               OpBranchConditional %521 %522 %523
        %522 = OpLabel
        %524 = OpLoad %14 %453
        %525 = OpFNegate %14 %524
               OpStore %453 %525
        %526 = OpFAdd %14 %387 %525
        %527 = OpLoad %369 %371
        %528 = OpLoad %37 %86
        %529 = OpVectorShuffle %15 %528 %528 0 1
        %530 = OpVectorTimesScalar %15 %529 %375
        %531 = OpImageSampleImplicitLod %37 %527 %530
               OpStore %92 %531
               OpBranch %523
        %523 = OpLabel
               OpStore %532 %535
        %536 = OpAccessChain %378 %532 %398
        %537 = OpLoad %14 %536
        %539 = OpFOrdLessThan %39 %537 %538
               OpSelectionMerge %541 None
               OpBranchConditional %539 %540 %599
        %540 = OpLabel
        %545 = OpLoad %15 %532
        %548 = OpFSub %15 %545 %547
        %552 = OpFMul %15 %548 %551
        %554 = OpVectorTimesScalar %15 %552 %553
        %555 = OpConvertFToU %542 %554
               OpStore %544 %555
        %558 = OpAccessChain %556 %544 %394
        %559 = OpLoad %52 %558
        %560 = OpAccessChain %556 %544 %398
        %561 = OpLoad %52 %560
        %562 = OpIMul %52 %559 %561
        %563 = OpAccessChain %556 %544 %394
        %564 = OpLoad %52 %563
        %566 = OpBitwiseAnd %52 %564 %565
        %567 = OpShiftRightLogical %52 %562 %566
        %569 = OpBitwiseAnd %52 %567 %568
               OpStore %557 %569
        %571 = OpAccessChain %556 %544 %394
        %572 = OpLoad %52 %571
        %573 = OpAccessChain %556 %544 %398
        %574 = OpLoad %52 %573
        %575 = OpIMul %52 %572 %574
        %576 = OpAccessChain %556 %544 %394
        %577 = OpLoad %52 %576
        %578 = OpBitwiseAnd %52 %577 %565
        %579 = OpShiftLeftLogical %52 %575 %578
        %580 = OpBitwiseAnd %52 %579 %568
        %581 = OpUDiv %52 %580 %398
        %582 = OpIAdd %52 %394 %581
               OpStore %570 %582
        %584 = OpLoad %52 %570
        %586 = OpBitwiseAnd %52 %584 %585
        %587 = OpINotEqual %39 %586 %394
        %588 = OpSelect %52 %587 %398 %394
        %589 = OpLoad %52 %557
        %590 = OpBitwiseAnd %52 %589 %398
        %591 = OpINotEqual %39 %590 %394
        %592 = OpSelect %52 %591 %398 %394
        %593 = OpBitwiseXor %52 %588 %592
        %594 = OpConvertUToF %14 %593
               OpStore %583 %594
        %595 = OpLoad %14 %583
        %596 = OpLoad %14 %583
        %597 = OpLoad %14 %583
        %598 = OpCompositeConstruct %37 %595 %596 %597 %478
               OpStore %80 %598
               OpBranch %541
        %599 = OpLabel
        %603 = OpLoad %15 %532
        %605 = OpFSub %15 %603 %604
        %607 = OpFMul %15 %605 %606
        %608 = OpVectorTimesScalar %15 %607 %553
        %609 = OpConvertFToS %600 %608
               OpStore %602 %609
        %611 = OpAccessChain %7 %602 %394
        %612 = OpLoad %6 %611
        %614 = OpShiftRightArithmetic %6 %612 %613
        %615 = OpBitwiseAnd %6 %614 %258
        %616 = OpAccessChain %7 %602 %398
        %617 = OpLoad %6 %616
        %619 = OpBitwiseAnd %6 %617 %618
        %620 = OpShiftRightArithmetic %6 %619 %613
        %621 = OpBitwiseXor %6 %615 %620
               OpStore %610 %621
        %623 = OpAccessChain %7 %602 %398
        %624 = OpLoad %6 %623
        %625 = OpAccessChain %7 %602 %398
        %626 = OpLoad %6 %625
        %627 = OpIMul %6 %624 %626
        %628 = OpShiftRightArithmetic %6 %627 %63
        %629 = OpBitwiseAnd %6 %628 %258
               OpStore %622 %629
        %631 = OpAccessChain %7 %602 %394
        %632 = OpLoad %6 %631
        %633 = OpAccessChain %7 %602 %398
        %634 = OpLoad %6 %633
        %635 = OpIMul %6 %632 %634
        %636 = OpShiftRightArithmetic %6 %635 %282
        %637 = OpBitwiseAnd %6 %636 %258
               OpStore %630 %637
        %638 = OpLoad %6 %630
        %639 = OpLoad %6 %622
        %640 = OpBitwiseXor %6 %638 %639
        %641 = OpConvertSToF %14 %640
        %642 = OpLoad %6 %622
        %643 = OpLoad %6 %610
        %644 = OpBitwiseAnd %6 %642 %643
        %645 = OpConvertSToF %14 %644
        %646 = OpLoad %6 %630
        %647 = OpLoad %6 %610
        %648 = OpBitwiseOr %6 %646 %647
        %649 = OpConvertSToF %14 %648
        %650 = OpCompositeConstruct %37 %641 %645 %649 %478
               OpStore %80 %650
               OpBranch %541
        %541 = OpLabel
        %651 = OpLoad %14 %453
               OpReturnValue %651
               OpFunctionEnd
         %23 = OpFunction %15 None %21
         %22 = OpFunctionParameter %16
         %24 = OpLabel
        %690 = OpVariable %16 Function
        %699 = OpVariable %543 Function
        %705 = OpVariable %556 Function
        %716 = OpVariable %556 Function
        %727 = OpVariable %378 Function
        %743 = OpVariable %378 Function
        %784 = OpVariable %601 Function
        %790 = OpVariable %7 Function
        %800 = OpVariable %7 Function
        %808 = OpVariable %7 Function
        %813 = OpVariable %7 Function
        %834 = OpVariable %378 Function
        %836 = OpVariable %16 Function
        %840 = OpVariable %378 Function
        %843 = OpVariable %16 Function
        %845 = OpVariable %543 Function
        %851 = OpVariable %7 Function
        %852 = OpVariable %7 Function
        %876 = OpVariable %556 Function
        %887 = OpVariable %556 Function
        %898 = OpVariable %378 Function
        %915 = OpVariable %7 Function
        %916 = OpVariable %7 Function
        %918 = OpVariable %7 Function
        %920 = OpVariable %7 Function
        %922 = OpVariable %7 Function
        %939 = OpVariable %7 Function
        %941 = OpVariable %7 Function
        %946 = OpVariable %7 Function
        %954 = OpVariable %7 Function
        %956 = OpVariable %7 Function
        %958 = OpVariable %7 Function
        %969 = OpVariable %378 Function
        %970 = OpVariable %16 Function
        %973 = OpVariable %16 Function
        %982 = OpVariable %7 Function
        %983 = OpVariable %7 Function
       %1007 = OpVariable %543 Function
       %1023 = OpVariable %556 Function
       %1034 = OpVariable %556 Function
       %1045 = OpVariable %378 Function
       %1061 = OpVariable %601 Function
       %1067 = OpVariable %7 Function
       %1077 = OpVariable %7 Function
       %1086 = OpVariable %7 Function
               OpStore %690 %693
        %694 = OpAccessChain %378 %690 %398
        %695 = OpLoad %14 %694
        %696 = OpFOrdLessThan %39 %695 %538
               OpSelectionMerge %698 None
               OpBranchConditional %696 %697 %742
        %697 = OpLabel
        %700 = OpLoad %15 %690
        %701 = OpFSub %15 %700 %547
        %702 = OpFMul %15 %701 %551
        %703 = OpVectorTimesScalar %15 %702 %553
        %704 = OpConvertFToU %542 %703
               OpStore %699 %704
        %706 = OpAccessChain %556 %699 %394
        %707 = OpLoad %52 %706
        %708 = OpAccessChain %556 %699 %398
        %709 = OpLoad %52 %708
        %710 = OpIMul %52 %707 %709
        %711 = OpAccessChain %556 %699 %394
        %712 = OpLoad %52 %711
        %713 = OpBitwiseAnd %52 %712 %565
        %714 = OpShiftRightLogical %52 %710 %713
        %715 = OpBitwiseAnd %52 %714 %568
               OpStore %705 %715
        %717 = OpAccessChain %556 %699 %394
        %718 = OpLoad %52 %717
        %719 = OpAccessChain %556 %699 %398
        %720 = OpLoad %52 %719
        %721 = OpIMul %52 %718 %720
        %722 = OpAccessChain %556 %699 %394
        %723 = OpLoad %52 %722
        %724 = OpBitwiseAnd %52 %723 %565
        %725 = OpShiftLeftLogical %52 %721 %724
        %726 = OpBitwiseAnd %52 %725 %568
               OpStore %716 %726
        %728 = OpLoad %52 %716
        %729 = OpBitwiseAnd %52 %728 %585
        %730 = OpINotEqual %39 %729 %394
        %731 = OpSelect %52 %730 %398 %394
        %732 = OpLoad %52 %705
        %733 = OpBitwiseAnd %52 %732 %398
        %734 = OpINotEqual %39 %733 %394
        %735 = OpSelect %52 %734 %398 %394
        %736 = OpBitwiseXor %52 %731 %735
        %737 = OpConvertUToF %14 %736
               OpStore %727 %737
        %738 = OpLoad %14 %727
        %739 = OpLoad %14 %727
        %740 = OpLoad %14 %727
        %741 = OpCompositeConstruct %37 %738 %739 %740 %478
               OpStore %80 %741
               OpBranch %698
        %742 = OpLabel
               OpStore %743 %744
        %745 = OpAccessChain %503 %46 %398
        %746 = OpLoad %14 %745
        %747 = OpConvertFToS %6 %746
        %749 = OpSLessThan %39 %747 %748
               OpSelectionMerge %751 None
               OpBranchConditional %749 %750 %758
        %750 = OpLabel
        %753 = OpAccessChain %284 %56 %752
        %754 = OpLoad %6 %753
        %755 = OpConvertSToF %14 %754
        %756 = OpFDiv %14 %755 %515
        %757 = OpFAdd %14 %472 %756
               OpStore %743 %757
               OpBranch %751
        %758 = OpLabel
        %759 = OpAccessChain %503 %46 %398
        %760 = OpLoad %14 %759
        %761 = OpConvertFToS %6 %760
        %763 = OpSLessThan %39 %761 %762
               OpSelectionMerge %765 None
               OpBranchConditional %763 %764 %771
        %764 = OpLabel
        %766 = OpAccessChain %284 %56 %274
        %767 = OpLoad %6 %766
        %768 = OpConvertSToF %14 %767
        %769 = OpFDiv %14 %768 %515
        %770 = OpFAdd %14 %472 %769
               OpStore %743 %770
               OpBranch %765
        %771 = OpLabel
        %772 = OpAccessChain %503 %46 %398
        %773 = OpLoad %14 %772
        %774 = OpConvertFToS %6 %773
        %775 = OpSLessThan %39 %774 %507
               OpSelectionMerge %777 None
               OpBranchConditional %775 %776 %783
        %776 = OpLabel
        %778 = OpAccessChain %284 %56 %511
        %779 = OpLoad %6 %778
        %780 = OpConvertSToF %14 %779
        %781 = OpFDiv %14 %780 %515
        %782 = OpFAdd %14 %472 %781
               OpStore %743 %782
               OpBranch %777
        %783 = OpLabel
               OpBranch %777
        %777 = OpLabel
               OpBranch %765
        %765 = OpLabel
               OpBranch %751
        %751 = OpLabel
        %785 = OpLoad %15 %690
        %786 = OpFSub %15 %785 %604
        %787 = OpFMul %15 %786 %606
        %788 = OpVectorTimesScalar %15 %787 %553
        %789 = OpConvertFToS %600 %788
               OpStore %784 %789
        %791 = OpAccessChain %7 %784 %394
        %792 = OpLoad %6 %791
        %793 = OpShiftRightArithmetic %6 %792 %613
        %794 = OpBitwiseAnd %6 %793 %258
        %795 = OpAccessChain %7 %784 %398
        %796 = OpLoad %6 %795
        %797 = OpBitwiseAnd %6 %796 %618
        %798 = OpShiftRightArithmetic %6 %797 %613
        %799 = OpBitwiseXor %6 %794 %798
               OpStore %790 %799
        %801 = OpAccessChain %7 %784 %398
        %802 = OpLoad %6 %801
        %803 = OpAccessChain %7 %784 %398
        %804 = OpLoad %6 %803
        %805 = OpIMul %6 %802 %804
        %806 = OpShiftRightArithmetic %6 %805 %63
        %807 = OpBitwiseAnd %6 %806 %258
               OpStore %800 %807
               OpStore %808 %64
        %809 = OpLoad %6 %808
        %810 = OpSGreaterThanEqual %39 %809 %274
               OpSelectionMerge %812 None
               OpBranchConditional %810 %811 %812
        %811 = OpLabel
               OpBranch %812
        %812 = OpLabel
        %814 = OpAccessChain %7 %784 %394
        %815 = OpLoad %6 %814
        %816 = OpAccessChain %7 %784 %398
        %817 = OpLoad %6 %816
        %818 = OpIMul %6 %815 %817
        %819 = OpShiftRightArithmetic %6 %818 %282
        %820 = OpBitwiseAnd %6 %819 %258
               OpStore %813 %820
        %821 = OpLoad %6 %813
        %822 = OpLoad %6 %800
        %823 = OpBitwiseXor %6 %821 %822
        %824 = OpConvertSToF %14 %823
        %825 = OpLoad %6 %800
        %826 = OpLoad %6 %790
        %827 = OpBitwiseAnd %6 %825 %826
        %828 = OpConvertSToF %14 %827
        %829 = OpLoad %6 %813
        %830 = OpLoad %6 %790
        %831 = OpBitwiseOr %6 %829 %830
        %832 = OpConvertSToF %14 %831
        %833 = OpCompositeConstruct %37 %824 %828 %832 %478
               OpStore %80 %833
               OpBranch %698
        %698 = OpLabel
               OpStore %834 %835
        %837 = OpLoad %15 %22
        %839 = OpFSub %15 %837 %838
               OpStore %836 %839
        %841 = OpLoad %15 %836
        %842 = OpExtInst %14 %1 Length %841
               OpStore %840 %842
               OpStore %843 %844
        %846 = OpLoad %15 %843
        %847 = OpFSub %15 %846 %547
        %848 = OpFMul %15 %847 %551
        %849 = OpVectorTimesScalar %15 %848 %553
        %850 = OpConvertFToU %542 %849
               OpStore %845 %850
               OpStore %851 %64
               OpStore %852 %64
               OpBranch %853
        %853 = OpLabel
               OpLoopMerge %855 %856 None
               OpBranch %857
        %857 = OpLabel
        %858 = OpLoad %6 %852
        %859 = OpSLessThan %39 %858 %63
               OpBranchConditional %859 %854 %855
        %854 = OpLabel
        %860 = OpLoad %6 %851
        %861 = OpSGreaterThanEqual %39 %860 %274
               OpSelectionMerge %863 None
               OpBranchConditional %861 %862 %863
        %862 = OpLabel
               OpBranch %855
        %863 = OpLabel
        %865 = OpLoad %6 %851
        %866 = OpIAdd %6 %865 %258
               OpStore %851 %866
        %867 = OpLoad %6 %852
        %868 = OpExtInst %6 %1 SClamp %867 %64 %282
        %869 = OpLoad %6 %852
        %870 = OpExtInst %6 %1 SClamp %869 %64 %282
        %871 = OpAccessChain %284 %56 %870
        %872 = OpLoad %6 %871
        %873 = OpAccessChain %284 %66 %868
               OpStore %873 %872
               OpBranch %856
        %856 = OpLabel
        %874 = OpLoad %6 %852
        %875 = OpIAdd %6 %874 %258
               OpStore %852 %875
               OpBranch %853
        %855 = OpLabel
        %877 = OpAccessChain %556 %845 %394
        %878 = OpLoad %52 %877
        %879 = OpAccessChain %556 %845 %398
        %880 = OpLoad %52 %879
        %881 = OpIMul %52 %878 %880
        %882 = OpAccessChain %556 %845 %394
        %883 = OpLoad %52 %882
        %884 = OpBitwiseAnd %52 %883 %565
        %885 = OpShiftRightLogical %52 %881 %884
        %886 = OpBitwiseAnd %52 %885 %568
               OpStore %876 %886
        %888 = OpAccessChain %556 %845 %394
        %889 = OpLoad %52 %888
        %890 = OpAccessChain %556 %845 %398
        %891 = OpLoad %52 %890
        %892 = OpIMul %52 %889 %891
        %893 = OpAccessChain %556 %845 %394
        %894 = OpLoad %52 %893
        %895 = OpBitwiseAnd %52 %894 %565
        %896 = OpShiftLeftLogical %52 %892 %895
        %897 = OpBitwiseAnd %52 %896 %568
               OpStore %887 %897
        %899 = OpLoad %52 %887
        %900 = OpBitwiseAnd %52 %899 %585
        %901 = OpINotEqual %39 %900 %394
        %902 = OpSelect %52 %901 %398 %394
        %903 = OpISub %52 %902 %394
        %904 = OpLoad %52 %887
        %905 = OpBitwiseAnd %52 %904 %585
        %906 = OpINotEqual %39 %905 %394
        %907 = OpSelect %52 %906 %398 %394
        %908 = OpExtInst %52 %1 UMax %903 %907
        %909 = OpLoad %52 %876
        %910 = OpBitwiseAnd %52 %909 %398
        %911 = OpINotEqual %39 %910 %394
        %912 = OpSelect %52 %911 %398 %394
        %913 = OpBitwiseXor %52 %908 %912
        %914 = OpConvertUToF %14 %913
               OpStore %898 %914
               OpStore %915 %64
               OpStore %916 %917
               OpStore %918 %919
               OpStore %920 %921
        %923 = OpLoad %6 %916
               OpStore %922 %923
               OpBranch %924
        %924 = OpLabel
               OpLoopMerge %926 %927 None
               OpBranch %928
        %928 = OpLabel
        %929 = OpLoad %6 %922
        %930 = OpLoad %6 %918
        %931 = OpSLessThan %39 %929 %930
               OpBranchConditional %931 %925 %926
        %925 = OpLabel
        %932 = OpLoad %6 %915
        %933 = OpSGreaterThanEqual %39 %932 %274
               OpSelectionMerge %935 None
               OpBranchConditional %933 %934 %935
        %934 = OpLabel
               OpBranch %926
        %935 = OpLabel
        %937 = OpLoad %6 %915
        %938 = OpIAdd %6 %937 %258
               OpStore %915 %938
        %940 = OpLoad %6 %922
               OpStore %939 %940
        %942 = OpLoad %6 %922
        %943 = OpLoad %6 %920
        %944 = OpIAdd %6 %942 %943
        %945 = OpISub %6 %944 %258
               OpStore %941 %945
        %947 = OpLoad %6 %922
        %948 = OpLoad %6 %920
        %949 = OpIMul %6 %434 %948
        %950 = OpIAdd %6 %947 %949
        %951 = OpISub %6 %950 %258
        %952 = OpLoad %6 %918
        %953 = OpExtInst %6 %1 SMin %951 %952
               OpStore %946 %953
        %955 = OpLoad %6 %939
               OpStore %954 %955
        %957 = OpLoad %6 %941
               OpStore %956 %957
        %959 = OpLoad %6 %946
               OpStore %958 %959
        %960 = OpFunctionCall %2 %12 %954 %956 %958
               OpBranch %927
        %927 = OpLabel
        %961 = OpLoad %6 %920
        %962 = OpIMul %6 %434 %961
        %963 = OpLoad %6 %922
        %964 = OpIAdd %6 %963 %962
               OpStore %922 %964
               OpBranch %924
        %926 = OpLabel
        %965 = OpLoad %14 %898
        %966 = OpLoad %14 %898
        %967 = OpLoad %14 %898
        %968 = OpCompositeConstruct %37 %965 %966 %967 %478
               OpStore %80 %968
        %971 = OpLoad %15 %836
               OpStore %970 %971
        %972 = OpFunctionCall %14 %19 %970
               OpStore %969 %972
               OpStore %973 %976
        %977 = OpAccessChain %378 %973 %398
        %978 = OpLoad %14 %977
        %979 = OpFOrdLessThan %39 %978 %538
               OpSelectionMerge %981 None
               OpBranchConditional %979 %980 %1060
        %980 = OpLabel
               OpStore %982 %64
               OpStore %983 %64
               OpBranch %984
        %984 = OpLabel
               OpLoopMerge %986 %987 None
               OpBranch %988
        %988 = OpLabel
        %989 = OpLoad %6 %983
        %990 = OpSLessThan %39 %989 %63
               OpBranchConditional %990 %985 %986
        %985 = OpLabel
        %991 = OpLoad %6 %982
        %992 = OpSGreaterThanEqual %39 %991 %274
               OpSelectionMerge %994 None
               OpBranchConditional %992 %993 %994
        %993 = OpLabel
               OpBranch %986
        %994 = OpLabel
        %996 = OpLoad %6 %982
        %997 = OpIAdd %6 %996 %258
               OpStore %982 %997
        %998 = OpLoad %6 %983
        %999 = OpExtInst %6 %1 SClamp %998 %64 %282
       %1000 = OpLoad %6 %983
       %1001 = OpExtInst %6 %1 SClamp %1000 %64 %282
       %1002 = OpAccessChain %284 %56 %1001
       %1003 = OpLoad %6 %1002
       %1004 = OpAccessChain %284 %66 %999
               OpStore %1004 %1003
               OpBranch %987
        %987 = OpLabel
       %1005 = OpLoad %6 %983
       %1006 = OpIAdd %6 %1005 %258
               OpStore %983 %1006
               OpBranch %984
        %986 = OpLabel
       %1008 = OpLoad %15 %973
       %1009 = OpFSub %15 %1008 %547
       %1010 = OpFMul %15 %1009 %551
       %1011 = OpVectorTimesScalar %15 %1010 %553
       %1016 = OpAccessChain %1015 %1014 %64 %394
       %1017 = OpLoad %14 %1016
       %1018 = OpAccessChain %1015 %1014 %64 %394
       %1019 = OpLoad %14 %1018
       %1020 = OpCompositeConstruct %15 %1017 %1019
       %1021 = OpFAdd %15 %1011 %1020
       %1022 = OpConvertFToU %542 %1021
               OpStore %1007 %1022
       %1024 = OpAccessChain %556 %1007 %394
       %1025 = OpLoad %52 %1024
       %1026 = OpAccessChain %556 %1007 %398
       %1027 = OpLoad %52 %1026
       %1028 = OpIMul %52 %1025 %1027
       %1029 = OpAccessChain %556 %1007 %394
       %1030 = OpLoad %52 %1029
       %1031 = OpBitwiseAnd %52 %1030 %565
       %1032 = OpShiftRightLogical %52 %1028 %1031
       %1033 = OpBitwiseAnd %52 %1032 %568
               OpStore %1023 %1033
       %1035 = OpAccessChain %556 %1007 %394
       %1036 = OpLoad %52 %1035
       %1037 = OpAccessChain %556 %1007 %398
       %1038 = OpLoad %52 %1037
       %1039 = OpIMul %52 %1036 %1038
       %1040 = OpAccessChain %556 %1007 %394
       %1041 = OpLoad %52 %1040
       %1042 = OpBitwiseAnd %52 %1041 %565
       %1043 = OpShiftLeftLogical %52 %1039 %1042
       %1044 = OpBitwiseAnd %52 %1043 %568
               OpStore %1034 %1044
       %1046 = OpLoad %52 %1034
       %1047 = OpBitwiseAnd %52 %1046 %585
       %1048 = OpINotEqual %39 %1047 %394
       %1049 = OpSelect %52 %1048 %398 %394
       %1050 = OpLoad %52 %1023
       %1051 = OpBitwiseAnd %52 %1050 %398
       %1052 = OpINotEqual %39 %1051 %394
       %1053 = OpSelect %52 %1052 %398 %394
       %1054 = OpBitwiseXor %52 %1049 %1053
       %1055 = OpConvertUToF %14 %1054
               OpStore %1045 %1055
       %1056 = OpLoad %14 %1045
       %1057 = OpLoad %14 %1045
       %1058 = OpLoad %14 %1045
       %1059 = OpCompositeConstruct %37 %1056 %1057 %1058 %478
               OpStore %80 %1059
               OpBranch %981
       %1060 = OpLabel
       %1062 = OpLoad %15 %973
       %1063 = OpFSub %15 %1062 %604
       %1064 = OpFMul %15 %1063 %606
       %1065 = OpVectorTimesScalar %15 %1064 %553
       %1066 = OpConvertFToS %600 %1065
               OpStore %1061 %1066
       %1068 = OpAccessChain %7 %1061 %394
       %1069 = OpLoad %6 %1068
       %1070 = OpShiftRightArithmetic %6 %1069 %613
       %1071 = OpBitwiseAnd %6 %1070 %258
       %1072 = OpAccessChain %7 %1061 %398
       %1073 = OpLoad %6 %1072
       %1074 = OpBitwiseAnd %6 %1073 %618
       %1075 = OpShiftRightArithmetic %6 %1074 %613
       %1076 = OpBitwiseXor %6 %1071 %1075
               OpStore %1067 %1076
       %1078 = OpAccessChain %7 %1061 %398
       %1079 = OpLoad %6 %1078
       %1080 = OpAccessChain %7 %1061 %398
       %1081 = OpLoad %6 %1080
       %1082 = OpIMul %6 %1079 %1081
       %1083 = OpShiftRightArithmetic %6 %1082 %63
       %1084 = OpShiftRightArithmetic %6 %1083 %64
       %1085 = OpBitwiseAnd %6 %1084 %258
               OpStore %1077 %1085
       %1087 = OpAccessChain %7 %1061 %394
       %1088 = OpLoad %6 %1087
       %1089 = OpAccessChain %7 %1061 %398
       %1090 = OpLoad %6 %1089
       %1091 = OpIMul %6 %1088 %1090
       %1092 = OpShiftRightArithmetic %6 %1091 %282
       %1093 = OpBitwiseAnd %6 %1092 %258
               OpStore %1086 %1093
       %1094 = OpLoad %6 %1086
       %1095 = OpLoad %6 %1077
       %1096 = OpBitwiseXor %6 %1094 %1095
       %1097 = OpConvertSToF %14 %1096
       %1098 = OpLoad %6 %1077
       %1099 = OpLoad %6 %1067
       %1100 = OpBitwiseAnd %6 %1098 %1099
       %1101 = OpConvertSToF %14 %1100
       %1102 = OpLoad %6 %1086
       %1103 = OpLoad %6 %1067
       %1104 = OpBitwiseOr %6 %1102 %1103
       %1105 = OpConvertSToF %14 %1104
       %1106 = OpCompositeConstruct %37 %1097 %1101 %1105 %478
               OpStore %80 %1106
               OpBranch %981
        %981 = OpLabel
       %1107 = OpLoad %14 %840
       %1108 = OpLoad %14 %840
       %1109 = OpExtInst %14 %1 FMin %1107 %1108
       %1110 = OpLoad %14 %840
       %1111 = OpLoad %14 %840
       %1112 = OpExtInst %14 %1 FClamp %1109 %1110 %1111
       %1113 = OpLoad %14 %969
       %1114 = OpCompositeConstruct %15 %1112 %1113
               OpReturnValue %1114
               OpFunctionEnd
         %28 = OpFunction %14 None %25
         %26 = OpFunctionParameter %16
         %27 = OpFunctionParameter %16
         %29 = OpLabel
       %1117 = OpAccessChain %378 %26 %394
       %1118 = OpLoad %14 %1117
       %1119 = OpAccessChain %378 %27 %398
       %1120 = OpLoad %14 %1119
       %1121 = OpFMul %14 %1118 %1120
       %1122 = OpAccessChain %378 %27 %394
       %1123 = OpLoad %14 %1122
       %1124 = OpAccessChain %378 %26 %398
       %1125 = OpLoad %14 %1124
       %1126 = OpFMul %14 %1123 %1125
       %1127 = OpFSub %14 %1121 %1126
               OpReturnValue %1127
               OpFunctionEnd
         %35 = OpFunction %6 None %30
         %31 = OpFunctionParameter %16
         %32 = OpFunctionParameter %16
         %33 = OpFunctionParameter %16
         %34 = OpFunctionParameter %16
         %36 = OpLabel
       %1130 = OpVariable %378 Function
       %1178 = OpVariable %16 Function
       %1179 = OpVariable %16 Function
       %1181 = OpVariable %378 Function
       %1204 = OpVariable %16 Function
       %1205 = OpVariable %16 Function
       %1225 = OpVariable %378 Function
       %1281 = OpVariable %16 Function
       %1282 = OpVariable %16 Function
       %1131 = OpAccessChain %378 %31 %394
       %1132 = OpLoad %14 %1131
       %1136 = OpAccessChain %1135 %1134 %394
       %1137 = OpLoad %14 %1136
       %1138 = OpFOrdLessThan %39 %1137 %387
       %1142 = OpLoad %15 %32
       %1144 = OpCompositeConstruct %1143 %1138 %1138
       %1145 = OpSelect %15 %1144 %1141 %1142
       %1146 = OpCompositeExtract %14 %1145 0
       %1147 = OpFSub %14 %1132 %1146
       %1148 = OpAccessChain %378 %31 %398
       %1149 = OpLoad %14 %1148
       %1150 = OpAccessChain %378 %32 %398
       %1151 = OpLoad %14 %1150
       %1152 = OpFSub %14 %1149 %1151
       %1153 = OpCompositeConstruct %15 %1147 %1152
       %1155 = OpAccessChain %378 %33 %394
       %1156 = OpLoad %14 %1155
       %1157 = OpAccessChain %378 %32 %394
       %1158 = OpLoad %14 %1157
       %1159 = OpFSub %14 %1156 %1158
       %1160 = OpAccessChain %378 %33 %394
       %1161 = OpLoad %14 %1160
       %1162 = OpAccessChain %378 %32 %394
       %1163 = OpLoad %14 %1162
       %1164 = OpFSub %14 %1161 %1163
       %1165 = OpAccessChain %378 %33 %394
       %1166 = OpLoad %14 %1165
       %1167 = OpAccessChain %378 %32 %394
       %1168 = OpLoad %14 %1167
       %1169 = OpFSub %14 %1166 %1168
       %1170 = OpExtInst %14 %1 FClamp %1159 %1164 %1169
       %1171 = OpSelect %14 %673 %1170 %1154
       %1172 = OpAccessChain %378 %33 %398
       %1173 = OpLoad %14 %1172
       %1174 = OpAccessChain %378 %32 %398
       %1175 = OpLoad %14 %1174
       %1176 = OpFSub %14 %1173 %1175
       %1177 = OpCompositeConstruct %15 %1171 %1176
               OpStore %1178 %1153
               OpStore %1179 %1177
       %1180 = OpFunctionCall %14 %28 %1178 %1179
               OpStore %1130 %1180
       %1182 = OpAccessChain %378 %31 %394
       %1183 = OpLoad %14 %1182
       %1184 = OpAccessChain %378 %33 %394
       %1185 = OpLoad %14 %1184
       %1186 = OpFSub %14 %1183 %1185
       %1187 = OpAccessChain %378 %31 %398
       %1188 = OpLoad %14 %1187
       %1189 = OpAccessChain %378 %33 %398
       %1190 = OpLoad %14 %1189
       %1191 = OpFSub %14 %1188 %1190
       %1192 = OpCompositeConstruct %15 %1186 %1191
       %1193 = OpAccessChain %378 %34 %394
       %1194 = OpLoad %14 %1193
       %1195 = OpAccessChain %378 %33 %394
       %1196 = OpLoad %14 %1195
       %1197 = OpFSub %14 %1194 %1196
       %1198 = OpAccessChain %378 %34 %398
       %1199 = OpLoad %14 %1198
       %1200 = OpAccessChain %378 %33 %398
       %1201 = OpLoad %14 %1200
       %1202 = OpFSub %14 %1199 %1201
       %1203 = OpCompositeConstruct %15 %1197 %1202
               OpStore %1204 %1192
               OpStore %1205 %1203
       %1206 = OpFunctionCall %14 %28 %1204 %1205
               OpStore %1181 %1206
       %1207 = OpLoad %14 %1130
       %1208 = OpFOrdLessThan %39 %1207 %387
       %1209 = OpLoad %14 %1181
       %1210 = OpFOrdLessThan %39 %1209 %387
       %1211 = OpLogicalAnd %39 %1208 %1210
       %1212 = OpLogicalNot %39 %1211
               OpSelectionMerge %1214 None
               OpBranchConditional %1212 %1213 %1214
       %1213 = OpLabel
       %1215 = OpLoad %14 %1130
       %1216 = OpFOrdGreaterThanEqual %39 %1215 %387
       %1217 = OpLoad %14 %1181
       %1218 = OpFOrdGreaterThanEqual %39 %1217 %387
       %1219 = OpLogicalAnd %39 %1216 %1218
               OpBranch %1214
       %1214 = OpLabel
       %1220 = OpPhi %39 %1211 %36 %1219 %1213
       %1221 = OpLogicalNot %39 %1220
               OpSelectionMerge %1223 None
               OpBranchConditional %1221 %1222 %1223
       %1222 = OpLabel
               OpReturnValue %64
       %1223 = OpLabel
       %1226 = OpAccessChain %378 %31 %394
       %1227 = OpLoad %14 %1226
       %1228 = OpLoad %15 %34
       %1230 = OpCompositeExtract %14 %1228 0
       %1231 = OpCompositeExtract %14 %1228 1
       %1232 = OpCompositeConstruct %653 %1230 %1231 %478
       %1233 = OpCompositeConstruct %653 %387 %387 %387
       %1234 = OpCompositeConstruct %653 %478 %478 %387
       %1235 = OpCompositeConstruct %1229 %1232 %1233 %1234
       %1236 = OpCompositeExtract %14 %1235 0 0
       %1237 = OpCompositeExtract %14 %1235 0 1
       %1238 = OpCompositeConstruct %15 %1236 %1237
       %1239 = OpLoad %15 %34
       %1240 = OpCompositeExtract %14 %1239 0
       %1241 = OpCompositeExtract %14 %1239 1
       %1242 = OpCompositeConstruct %653 %1240 %1241 %478
       %1243 = OpCompositeConstruct %653 %387 %387 %387
       %1244 = OpCompositeConstruct %653 %478 %478 %387
       %1245 = OpCompositeConstruct %1229 %1242 %1243 %1244
       %1246 = OpCompositeExtract %14 %1245 0 0
       %1247 = OpCompositeExtract %14 %1245 0 1
       %1248 = OpCompositeConstruct %15 %1246 %1247
       %1249 = OpLoad %15 %34
       %1250 = OpCompositeExtract %14 %1249 0
       %1251 = OpCompositeExtract %14 %1249 1
       %1252 = OpCompositeConstruct %653 %1250 %1251 %478
       %1253 = OpCompositeConstruct %653 %387 %387 %387
       %1254 = OpCompositeConstruct %653 %478 %478 %387
       %1255 = OpCompositeConstruct %1229 %1252 %1253 %1254
       %1256 = OpCompositeExtract %14 %1255 0 0
       %1257 = OpCompositeExtract %14 %1255 0 1
       %1258 = OpCompositeConstruct %15 %1256 %1257
       %1259 = OpExtInst %15 %1 FClamp %1238 %1248 %1258
       %1260 = OpLoad %15 %34
       %1261 = OpExtInst %15 %1 FMin %1259 %1260
       %1262 = OpCompositeExtract %14 %1261 0
       %1263 = OpFSub %14 %1227 %1262
       %1264 = OpAccessChain %378 %31 %398
       %1265 = OpLoad %14 %1264
       %1266 = OpAccessChain %378 %34 %398
       %1267 = OpLoad %14 %1266
       %1268 = OpFSub %14 %1265 %1267
       %1269 = OpCompositeConstruct %15 %1263 %1268
       %1270 = OpAccessChain %378 %32 %394
       %1271 = OpLoad %14 %1270
       %1272 = OpAccessChain %378 %34 %394
       %1273 = OpLoad %14 %1272
       %1274 = OpFSub %14 %1271 %1273
       %1275 = OpAccessChain %378 %32 %398
       %1276 = OpLoad %14 %1275
       %1277 = OpAccessChain %378 %34 %398
       %1278 = OpLoad %14 %1277
       %1279 = OpFSub %14 %1276 %1278
       %1280 = OpCompositeConstruct %15 %1274 %1279
               OpStore %1281 %1269
               OpStore %1282 %1280
       %1283 = OpFunctionCall %14 %28 %1281 %1282
               OpStore %1225 %1283
       %1284 = OpLoad %14 %1130
       %1285 = OpFOrdLessThan %39 %1284 %387
       %1286 = OpLoad %14 %1225
       %1287 = OpFOrdLessThan %39 %1286 %387
       %1288 = OpLogicalAnd %39 %1285 %1287
       %1289 = OpLogicalNot %39 %1288
               OpSelectionMerge %1291 None
               OpBranchConditional %1289 %1290 %1291
       %1290 = OpLabel
       %1292 = OpLoad %14 %1130
       %1293 = OpFOrdGreaterThanEqual %39 %1292 %387
       %1294 = OpLoad %14 %1225
       %1295 = OpFOrdGreaterThanEqual %39 %1294 %387
       %1296 = OpLogicalAnd %39 %1293 %1295
               OpBranch %1291
       %1291 = OpLabel
       %1297 = OpPhi %39 %1288 %1223 %1296 %1290
       %1298 = OpLogicalNot %39 %1297
               OpSelectionMerge %1300 None
               OpBranchConditional %1298 %1299 %1300
       %1299 = OpLabel
               OpReturnValue %64
       %1300 = OpLabel
               OpReturnValue %258
               OpFunctionEnd
         %43 = OpFunction %39 None %40
         %41 = OpFunctionParameter %16
         %42 = OpFunctionParameter %38
         %44 = OpLabel
       %1321 = OpVariable %7 Function
       %1323 = OpVariable %7 Function
       %1326 = OpVariable %1325 Function
       %1327 = OpVariable %601 Function
       %1331 = OpVariable %7 Function
       %1304 = OpAccessChain %378 %41 %394
       %1305 = OpLoad %14 %1304
       %1306 = OpAccessChain %378 %42 %394
       %1307 = OpLoad %14 %1306
       %1308 = OpFOrdLessThan %39 %1305 %1307
               OpSelectionMerge %1310 None
               OpBranchConditional %1308 %1309 %1310
       %1309 = OpLabel
               OpReturnValue %1311
       %1310 = OpLabel
       %1313 = OpAccessChain %378 %41 %398
       %1314 = OpLoad %14 %1313
       %1315 = OpAccessChain %378 %42 %398
       %1316 = OpLoad %14 %1315
       %1317 = OpFOrdLessThan %39 %1314 %1316
               OpSelectionMerge %1319 None
               OpBranchConditional %1317 %1318 %1319
       %1318 = OpLabel
               OpReturnValue %1311
       %1319 = OpLabel
               OpStore %1321 %1322
               OpStore %1323 %1324
               OpStore %1326 %673
               OpStore %1327 %1330
               OpStore %1331 %64
               OpStore %1323 %64
               OpBranch %1332
       %1332 = OpLabel
               OpLoopMerge %1334 %1335 None
               OpBranch %1336
       %1336 = OpLabel
       %1337 = OpLoad %6 %1323
       %1339 = OpCompositeConstruct %1338 %1337 %258 %258 %64
       %1340 = OpCompositeExtract %6 %1339 0
       %1341 = OpSLessThan %39 %1340 %511
               OpBranchConditional %1341 %1333 %1334
       %1333 = OpLabel
       %1342 = OpLoad %6 %1331
       %1344 = OpSGreaterThanEqual %39 %1342 %1343
               OpSelectionMerge %1346 None
               OpBranchConditional %1344 %1345 %1346
       %1345 = OpLabel
               OpBranch %1334
       %1346 = OpLabel
               OpStore %128 %1348
       %1349 = OpLoad %6 %1331
       %1350 = OpIAdd %6 %1349 %258
               OpStore %1331 %1350
       %1351 = OpLoad %6 %1323
       %1352 = OpIMul %6 %1351 %434
       %1353 = OpLoad %6 %1321
       %1354 = OpIMul %6 %1353 %434
       %1356 = OpIMul %6 %1354 %1355
       %1357 = OpIAdd %6 %1352 %1356
       %1359 = OpExtInst %6 %1 SClamp %1357 %64 %1358
       %1360 = OpAccessChain %284 %188 %1359
       %1361 = OpLoad %6 %1360
       %1362 = OpIEqual %39 %1361 %64
               OpSelectionMerge %1364 None
               OpBranchConditional %1362 %1363 %1364
       %1363 = OpLabel
       %1365 = OpLoad %6 %1323
       %1366 = OpIMul %6 %1365 %434
       %1367 = OpAccessChain %7 %1327 %394
               OpStore %1367 %1366
       %1368 = OpLoad %6 %1321
       %1369 = OpIMul %6 %1368 %434
       %1370 = OpAccessChain %7 %1327 %398
               OpStore %1370 %1369
       %1371 = OpIAdd %6 %64 %1369
               OpStore %1326 %673
               OpBranch %1364
       %1364 = OpLabel
               OpBranch %1335
       %1335 = OpLabel
       %1372 = OpLoad %6 %1323
       %1373 = OpIAdd %6 %1372 %258
               OpStore %1323 %1373
               OpBranch %1332
       %1334 = OpLabel
       %1374 = OpAccessChain %378 %41 %394
       %1375 = OpLoad %14 %1374
       %1376 = OpAccessChain %378 %42 %394
       %1377 = OpLoad %14 %1376
       %1379 = OpAccessChain %378 %42 %1378
       %1380 = OpLoad %14 %1379
       %1381 = OpFAdd %14 %1377 %1380
       %1382 = OpFOrdGreaterThan %39 %1375 %1381
               OpSelectionMerge %1384 None
               OpBranchConditional %1382 %1383 %1384
       %1383 = OpLabel
               OpReturnValue %1311
       %1384 = OpLabel
       %1386 = OpAccessChain %378 %41 %398
       %1387 = OpLoad %14 %1386
       %1388 = OpAccessChain %378 %42 %398
       %1389 = OpLoad %14 %1388
       %1391 = OpAccessChain %378 %42 %1390
       %1392 = OpLoad %14 %1391
       %1393 = OpFAdd %14 %1389 %1392
       %1394 = OpFOrdGreaterThan %39 %1387 %1393
               OpSelectionMerge %1396 None
               OpBranchConditional %1394 %1395 %1396
       %1395 = OpLabel
               OpReturnValue %1311
       %1396 = OpLabel
       %1398 = OpLoad %369 %371
       %1399 = OpLoad %37 %86
       %1400 = OpVectorShuffle %15 %1399 %1399 0 1
       %1401 = OpVectorTimesScalar %15 %1400 %375
       %1402 = OpImageSampleImplicitLod %37 %1398 %1401
               OpStore %92 %1402
               OpReturnValue %673
               OpFunctionEnd
END

# uniforms for variant

# tex
SAMPLER variant_tex

# injectionSwitch
BUFFER variant_injectionSwitch DATA_TYPE vec2<float> STD140 DATA
 0.0 1.0
END
# GLF_live16tex
SAMPLER variant_GLF_live16tex

# GLF_live18tex
SAMPLER variant_GLF_live18tex

# GLF_live13tex
SAMPLER variant_GLF_live13tex

# GLF_live14tex
SAMPLER variant_GLF_live14tex

# GLF_live12resolution
BUFFER variant_GLF_live12resolution DATA_TYPE vec2<float> STD140 DATA
 0.84728235 0.48559433
END
# GLF_live9tex
SAMPLER variant_GLF_live9tex

# GLF_live6tex
SAMPLER variant_GLF_live6tex

# GLF_live0resolution
BUFFER variant_GLF_live0resolution DATA_TYPE vec2<float> STD140 DATA
 0.008674204 0.0660823
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_tex DESCRIPTOR_SET 0 BINDING 8
  BIND BUFFER variant_injectionSwitch AS uniform DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live16tex DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live18tex DESCRIPTOR_SET 0 BINDING 2
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live13tex DESCRIPTOR_SET 0 BINDING 3
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live14tex DESCRIPTOR_SET 0 BINDING 4
  BIND BUFFER variant_GLF_live12resolution AS uniform DESCRIPTOR_SET 0 BINDING 5
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live9tex DESCRIPTOR_SET 0 BINDING 6
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live6tex DESCRIPTOR_SET 0 BINDING 7
  BIND BUFFER variant_GLF_live0resolution AS push_constant
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT reference_framebuffer EQ_HISTOGRAM_EMD_BUFFER variant_framebuffer TOLERANCE 0.005
