#!amber

SET ENGINE_DATA fence_timeout_ms 60000

SHADER vertex texgen_vert PASSTHROUGH

SHADER fragment texgen_frag GLSL
#version 430
precision highp float;

layout(location = 0) out vec4 _GLF_color;

void main()
{
 _GLF_color = vec4(
 gl_FragCoord.x * (1.0 / 256.0),
 (int(gl_FragCoord.x) ^ int(gl_FragCoord.y)) * (1.0 / 256.0),
 gl_FragCoord.y * (1.0 / 256.0),
 1.0);
}
END
BUFFER default_texture FORMAT B8G8R8A8_UNORM

PIPELINE graphics texgen_pipeline
  ATTACH texgen_vert
  ATTACH texgen_frag
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER default_texture AS color LOCATION 0
END

CLEAR_COLOR texgen_pipeline 0 0 0 255
CLEAR texgen_pipeline
RUN texgen_pipeline DRAW_RECT POS 0 0  SIZE 256 256

SHADER vertex reference_vertex_shader PASSTHROUGH

# reference_fragment_shader is derived from the following GLSL:
# #version 320 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# void main()
# {
#  int i = 0;
#  vec2 uvstep = vec2(1.0) * (1.0 / 256.0);
#  float slope = 2.0 / 256.0;
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  float refh = texture(tex, coord).y;
#  coord -= uvstep;
#  refh += slope;
#  float h = texture(tex, coord).y;
#  while(h < refh && i < 32)
#   {
#    coord -= uvstep;
#    refh += slope;
#    h = texture(tex, coord).y;
#    i ++;
#   }
#  _GLF_color = vec4(vec3(float(i) * (1.0 / 32.0)), 1.0);
# }
SHADER fragment reference_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 87
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %22 %75
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %8 "i"
               OpName %13 "uvstep"
               OpName %17 "slope"
               OpName %19 "coord"
               OpName %22 "gl_FragCoord"
               OpName %26 "refh"
               OpName %30 "tex"
               OpName %43 "h"
               OpName %75 "_GLF_color"
               OpDecorate %8 RelaxedPrecision
               OpDecorate %22 BuiltIn FragCoord
               OpDecorate %30 RelaxedPrecision
               OpDecorate %30 DescriptorSet 0
               OpDecorate %30 Binding 0
               OpDecorate %31 RelaxedPrecision
               OpDecorate %33 RelaxedPrecision
               OpDecorate %36 RelaxedPrecision
               OpDecorate %44 RelaxedPrecision
               OpDecorate %46 RelaxedPrecision
               OpDecorate %47 RelaxedPrecision
               OpDecorate %57 RelaxedPrecision
               OpDecorate %67 RelaxedPrecision
               OpDecorate %69 RelaxedPrecision
               OpDecorate %70 RelaxedPrecision
               OpDecorate %71 RelaxedPrecision
               OpDecorate %73 RelaxedPrecision
               OpDecorate %75 Location 0
               OpDecorate %76 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypePointer Function %6
          %9 = OpConstant %6 0
         %10 = OpTypeFloat 32
         %11 = OpTypeVector %10 2
         %12 = OpTypePointer Function %11
         %14 = OpConstant %10 0.00390625
         %15 = OpConstantComposite %11 %14 %14
         %16 = OpTypePointer Function %10
         %18 = OpConstant %10 0.0078125
         %20 = OpTypeVector %10 4
         %21 = OpTypePointer Input %20
         %22 = OpVariable %21 Input
         %27 = OpTypeImage %10 2D 0 0 0 1 Unknown
         %28 = OpTypeSampledImage %27
         %29 = OpTypePointer UniformConstant %28
         %30 = OpVariable %29 UniformConstant
         %34 = OpTypeInt 32 0
         %35 = OpConstant %34 1
         %55 = OpTypeBool
         %58 = OpConstant %6 32
         %72 = OpConstant %6 1
         %74 = OpTypePointer Output %20
         %75 = OpVariable %74 Output
         %78 = OpConstant %10 0.03125
         %80 = OpTypeVector %10 3
         %82 = OpConstant %10 1
          %4 = OpFunction %2 None %3
          %5 = OpLabel
          %8 = OpVariable %7 Function
         %13 = OpVariable %12 Function
         %17 = OpVariable %16 Function
         %19 = OpVariable %12 Function
         %26 = OpVariable %16 Function
         %43 = OpVariable %16 Function
               OpStore %8 %9
               OpStore %13 %15
               OpStore %17 %18
         %23 = OpLoad %20 %22
         %24 = OpVectorShuffle %11 %23 %23 0 1
         %25 = OpVectorTimesScalar %11 %24 %14
               OpStore %19 %25
         %31 = OpLoad %28 %30
         %32 = OpLoad %11 %19
         %33 = OpImageSampleImplicitLod %20 %31 %32
         %36 = OpCompositeExtract %10 %33 1
               OpStore %26 %36
         %37 = OpLoad %11 %13
         %38 = OpLoad %11 %19
         %39 = OpFSub %11 %38 %37
               OpStore %19 %39
         %40 = OpLoad %10 %17
         %41 = OpLoad %10 %26
         %42 = OpFAdd %10 %41 %40
               OpStore %26 %42
         %44 = OpLoad %28 %30
         %45 = OpLoad %11 %19
         %46 = OpImageSampleImplicitLod %20 %44 %45
         %47 = OpCompositeExtract %10 %46 1
               OpStore %43 %47
               OpBranch %48
         %48 = OpLabel
               OpLoopMerge %50 %51 None
               OpBranch %52
         %52 = OpLabel
         %53 = OpLoad %10 %43
         %54 = OpLoad %10 %26
         %56 = OpFOrdLessThan %55 %53 %54
         %57 = OpLoad %6 %8
         %59 = OpSLessThan %55 %57 %58
         %60 = OpLogicalAnd %55 %56 %59
               OpBranchConditional %60 %49 %50
         %49 = OpLabel
         %61 = OpLoad %11 %13
         %62 = OpLoad %11 %19
         %63 = OpFSub %11 %62 %61
               OpStore %19 %63
         %64 = OpLoad %10 %17
         %65 = OpLoad %10 %26
         %66 = OpFAdd %10 %65 %64
               OpStore %26 %66
         %67 = OpLoad %28 %30
         %68 = OpLoad %11 %19
         %69 = OpImageSampleImplicitLod %20 %67 %68
         %70 = OpCompositeExtract %10 %69 1
               OpStore %43 %70
         %71 = OpLoad %6 %8
         %73 = OpIAdd %6 %71 %72
               OpStore %8 %73
               OpBranch %51
         %51 = OpLabel
               OpBranch %48
         %50 = OpLabel
         %76 = OpLoad %6 %8
         %77 = OpConvertSToF %10 %76
         %79 = OpFMul %10 %77 %78
         %81 = OpCompositeConstruct %80 %79 %79 %79
         %83 = OpCompositeExtract %10 %81 0
         %84 = OpCompositeExtract %10 %81 1
         %85 = OpCompositeExtract %10 %81 2
         %86 = OpCompositeConstruct %20 %83 %84 %85 %82
               OpStore %75 %86
               OpReturn
               OpFunctionEnd
END

# uniforms for reference

# tex
SAMPLER reference_tex


BUFFER reference_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics reference_pipeline
  ATTACH reference_vertex_shader
  ATTACH reference_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER reference_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER reference_tex DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR reference_pipeline 0 0 0 255

CLEAR reference_pipeline
RUN reference_pipeline DRAW_RECT POS 0 0 SIZE 256 256


SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
#
# #ifndef REDUCER
# #define _GLF_ZERO(X, Y)                   (Y)
# #define _GLF_ONE(X, Y)                    (Y)
# #define _GLF_FALSE(X, Y)                  (Y)
# #define _GLF_TRUE(X, Y)                   (Y)
# #define _GLF_IDENTITY(X, Y)               (Y)
# #define _GLF_DEAD(X)                      (X)
# #define _GLF_FUZZED(X)                    (X)
# #define _GLF_WRAPPED_LOOP(X)              X
# #define _GLF_WRAPPED_IF_TRUE(X)           X
# #define _GLF_WRAPPED_IF_FALSE(X)          X
# #define _GLF_SWITCH(X)                    X
# #define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
# #define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
# #endif
#
# // END OF GENERATED HEADER
# precision highp float;
#
# precision highp int;
#
# layout(set = 0, binding = 0) uniform buf0 {
#  highp vec2 injectionSwitch;
# };
# mediump vec4 GLF_live8gl_FragCoord = _GLF_FUZZED(vec4(2.5, 4.9, -388.576, -4513.4071));
#
# vec4 GLF_live8_GLF_color = _GLF_FUZZED(vec4(-9641.1221, -7852.2323, 9.6, -4.2));
#
# layout(set = 0, binding = 1) uniform buf1 {
#  vec2 GLF_live8resolution;
# };
# const vec4 GLF_live8pal[16] = vec4[16](vec4(0.0, 0.0, 0.0, 1.0), vec4(0.5, 0.0, 0.0, 1.0), vec4(0.0, 0.5, 0.0, 1.0), vec4(0.5, 0.5, 0.0, 1.0), vec4(0.0, 0.0, 0.5, 1.0), vec4(0.5, 0.0, 0.5, 1.0), vec4(0.0, 0.5, 0.5, 1.0), vec4(0.5, 0.5, 0.5, 1.0), vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0));
#
# precision highp float;
#
# precision highp int;
#
# struct GLF_live6BST {
#  int data;
#  int leftIndex;
#  int rightIndex;
# } ;
#
# GLF_live6BST GLF_live6tree[10] = _GLF_FUZZED(GLF_live6BST[10](GLF_live6BST(-72922, -12556, int(153035u)), GLF_live6BST((+ 57292), -83170, 3399), GLF_live6BST(-60381, 4364, -89524), GLF_live6BST(-21901, -4188, -79208), GLF_live6BST(47515, 78347, 93313), GLF_live6BST(80829, -73295, 69600), GLF_live6BST(-63382, 73904, 89282), GLF_live6BST(23405, -47026, -50897), GLF_live6BST(-60381, 4364, -89524), GLF_live6BST(80829, -73295, 69600)));
#
# void GLF_live6makeTreeNode(inout GLF_live6BST GLF_live6tree, int GLF_live6data)
# {
#  GLF_live6tree.data = GLF_live6data;
#  GLF_live6tree.leftIndex = - 1;
#  if(_GLF_DEAD(false))
#   return;
#  GLF_live6tree.rightIndex = - 1;
# }
# precision highp float;
#
# precision highp int;
#
# int GLF_live7map[256] = _GLF_FUZZED(int[256](-72539, -81926, -80168, -49970, 53370, -7397, (17293 / (-59097 | -64290)), -21223, -23013, int((8656 == 98031)), (+ 9658), 62594, 31860, -91209, -81520, -37395, -82120, 49853, 91224, 62594, -81520, -23013, -82120, (17293 / (-59097 | -64290)), 49853, 91224, -91209, -21223, -37395, -81926, (+ 9658), -49970, -80168, -72539, -7397, int((8656 == 98031)), 53370, 31860, 91224, 49853, -49970, -82120, -81926, -37395, -23013, (17293 / (-59097 | -64290)), -91209, -81520, -80168, 31860, -21223, int((8656 == 98031)), -72539, 53370, (+ 9658), -7397, 62594, -23013, 53370, (+ 9658), -72539, -49970, -91209, 49853, -21223, 91224, 31860, int((8656 == 98031)), -82120, -7397, -81926, 62594, (17293 / (-59097 | -64290)), -81520, -37395, -80168, int((8656 == 98031)), -23013, 31860, -49970, 49853, (17293 / (-59097 | -64290)), 91224, -37395, -81926, -81520, (+ 9658), -82120, -7397, -80168, 53370, -72539, 62594, -91209, -21223, -80168, 49853, (+ 9658), -81926, -81520, 62594, -49970, -37395, -21223, (17293 / (-59097 | -64290)), -23013, -91209, 53370, 31860, -72539, -82120, -7397, 91224, int((8656 == 98031)), -81926, -81520, -72539, -21223, -49970, int((8656 == 98031)), 49853, -7397, 31860, -23013, 53370, -37395, -80168, 91224, -82120, -91209, 62594, (+ 9658), (17293 / (-59097 | -64290)), -23013, -21223, -72539, (+ 9658), 62594, -81520, 91224, -80168, -81926, 49853, 53370, -49970, -82120, 31860, -91209, -7397, -37395, int((8656 == 98031)), (17293 / (-59097 | -64290)), (+ 9658), -49970, -37395, 62594, -23013, -21223, -7397, 91224, int((8656 == 98031)), (17293 / (-59097 | -64290)), -82120, -81926, 49853, 53370, -91209, -80168, -81520, 31860, -72539, 62594, 49853, 53370, -23013, -91209, int((8656 == 98031)), (17293 / (-59097 | -64290)), (+ 9658), -81926, -7397, -81520, -49970, -80168, 31860, -82120, 91224, -21223, -72539, -37395, -72539, -80168, (+ 9658), -7397, 53370, -23013, 49853, -91209, 62594, -37395, -21223, -81520, -82120, int((8656 == 98031)), -81926, 31860, (17293 / (-59097 | -64290)), 91224, -49970, (17293 / (-59097 | -64290)), 62594, -23013, -81926, -80168, -72539, 53370, -37395, -7397, -21223, -91209, (+ 9658), -81520, -49970, 91224, 49853, -82120, 31860, int((8656 == 98031)), -81520, -81926, (+ 9658), -82120, 62594, (17293 / (-59097 | -64290)), -72539, -80168, -21223, -49970, -91209, 49853, 91224, -37395, int((8656 == 98031)), 53370, -7397, 31860, -23013, 53370, -80168, (17293 / (-59097 | -64290)), 62594, -82120, -81926, 31860, -7397, 49853));
#
# precision highp float;
#
# mediump vec4 GLF_live9gl_FragCoord = _GLF_FUZZED((mat2x4(-3047.2919, 368.747, 887.324, 687.507, 6.5, -7797.3968, -8123.6333, -27.29) * vec2(2.1, 3.1)));
#
# vec4 GLF_live9_GLF_color = _GLF_FUZZED(vec4(-4.3, -2342.9577, -88.20, 922.783));
#
# layout(set = 0, binding = 2) uniform sampler2D GLF_live9tex;
#
# precision highp float;
#
# precision highp int;
#
# mediump vec4 GLF_live4gl_FragCoord = _GLF_FUZZED(vec4(5.6, 7.7, -2.3, -7.9));
#
# const int GLF_live4N = 10;
#
# int GLF_live4data[10] = _GLF_FUZZED(int[10](-32190, GLF_live4N, 18897, 5819, -9854, 75983, ivec3(42633, -34729, 48312).x, GLF_live4N, -55505, GLF_live4N));
#
# precision highp float;
#
# precision highp int;
#
# const vec4 GLF_live2pal[16] = vec4[16](vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(_GLF_IDENTITY(0.5, min(0.5, 0.5)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, abs(0.0), 0.0), mat4x2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.5)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, abs(0.0), 0.0))))), 1.0), (true ? vec4(_GLF_IDENTITY(0.5, min(0.5, 0.5)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, abs(0.0), 0.0), mat4x2(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-2.5)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, abs(0.0), 0.0))))), 1.0) : _GLF_FUZZED((vec4(-9.1, 8053.3829, 959.820, -5.6) / 7.7)))), vec4(0.0, 0.5, 0.0, 1.0), vec4(0.5, 0.5, 0.0, 1.0), vec4(0.0, 0.0, 0.5, 1.0), vec4(0.5, 0.0, 0.5, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + sqrt(0.0))) - length(vec3(0.0, 0.0, 0.0)))), vec4(0.0, 0.5, 0.5, 1.0), vec4(0.5, 0.5, 0.5, 1.0), vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0));
#
# const vec4 GLF_live2picdata[8] = vec4[8](vec4(4, 4, 20, 4), vec4(4, 4, 4, 20), vec4(4, 20, 20, 4), vec4(20, 4, 4, 8), vec4(8, 6, 4, 2), vec4(2, 12, 2, 4), vec4(16, 2, 4, 4), vec4(12, 22, 4, 4));
#
# bool GLF_live2collision(vec2 GLF_live2pos, vec4 GLF_live2quad)
# {
#  if(GLF_live2pos.x < GLF_live2quad.x)
#   {
#    return false;
#   }
#  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#   return true;
#  if(_GLF_DEAD(false))
#   return true;
#  if(_GLF_DEAD(false))
#   return true;
#  if(GLF_live2pos.y < GLF_live2quad.y)
#   {
#    do
#     {
#      return false;
#     }
#    while(_GLF_WRAPPED_LOOP(false));
#   }
#  if(_GLF_IDENTITY(GLF_live2pos.x, clamp(_GLF_IDENTITY(GLF_live2pos.x, (false ? _GLF_FUZZED(1.3) : GLF_live2pos.x)), GLF_live2pos.x, GLF_live2pos.x)) > GLF_live2quad.x + _GLF_IDENTITY(GLF_live2quad.z, clamp(_GLF_IDENTITY(GLF_live2quad.z, (false ? _GLF_FUZZED(131.603) : GLF_live2quad.z)), GLF_live2quad.z, GLF_live2quad.z)))
#   {
#    return false;
#   }
#  do
#   {
#    if(GLF_live2pos.y > GLF_live2quad.y + GLF_live2quad.w)
#     {
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#       return true;
#      {
#       int GLF_live6_looplimiter1 = 0;
#       if(GLF_live6_looplimiter1 >= 5)
#        {
#         1;
#        }
#      }
#      return false;
#     }
#   }
#  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))));
#  for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (0 | 1))); _injected_loop_counter ++)
#   {
#    return true;
#    if(_GLF_DEAD(false))
#     discard;
#   }
#  if(_GLF_WRAPPED_IF_FALSE(false))
#   {
#   }
#  else
#   {
#    for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#     {
#      if(_GLF_DEAD(false))
#       {
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < _GLF_IDENTITY(dot(vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0), vec4(1.0, sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-96.45)))), vec2(0.0, 1.0))), 1.0), vec4(1.0, sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x))))))))
#         continue;
#        return true;
#       }
#     }
#    if(_GLF_DEAD(false))
#     return true;
#   }
# }
# precision highp float;
#
# mediump vec4 GLF_live3gl_FragCoord = _GLF_FUZZED(vec4(-98.81, 87.82, 7440.4551, -538.874));
#
# vec4 GLF_live3_GLF_color = _GLF_FUZZED((mat4(5.9, -4657.2602, 175.116, -732.546, 5213.5947, -186.267, -4112.9246, -9.0, -0.1, -7218.2391, -8.5, 6.7, -4.6, 1.7, -8529.3251, 3.2) * vec4(355.519, -151.804, -7.9, 82.80)));
#
# layout(set = 0, binding = 3) uniform sampler2D GLF_live3tex;
#
# const float GLF_live3weights[9] = float[9](1.0, 0.5, - 0.25, 0.5, 1.0, - 0.5, - 0.25, - 0.5, - 1.0);
#
# precision highp float;
#
# layout(set = 0, binding = 4) uniform sampler2D GLF_live5tex;
#
# precision highp float;
#
# precision highp int;
#
# mediump vec4 GLF_live0gl_FragCoord = _GLF_IDENTITY(_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))), mix(vec4(_GLF_FUZZED(-2.9), _GLF_FUZZED(46.33), _GLF_FUZZED(-4.6), _GLF_FUZZED((2.7))), vec4(_GLF_IDENTITY((_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))))[0], ((_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))))[0]) / 1.0), (_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))))[1], (_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))))[2], (_GLF_FUZZED((vec4(_GLF_IDENTITY(-74.84, float(mat2x4(_GLF_IDENTITY(-74.84, max(-74.84, -74.84)), 1.0, 0.0, log(1.0), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-5.3 / -7.6))), float(0.0), bool(true))), 0.0)), 0.0))), 9092.3077, 3.7, 4.0) + vec4(425.749, 7.7, 88.14, 65.30))))[3]), bvec4(true, true, true, true)));
#
# layout(push_constant) uniform buf_push {
#  vec2 GLF_live0resolution;
# };
# bool GLF_live0checkSwap(float GLF_live0a, float GLF_live0b)
# {
#  return _GLF_IDENTITY(_GLF_IDENTITY(GLF_live0gl_FragCoord.y < GLF_live0resolution.y / 2.0 ? _GLF_IDENTITY(GLF_live0a, (false ? _GLF_FUZZED(GLF_live0a) : GLF_live0a)) > GLF_live0b : GLF_live0a < _GLF_IDENTITY(GLF_live0b, (GLF_live0b) + 0.0), (GLF_live0gl_FragCoord.y < GLF_live0resolution.y / 2.0 ? _GLF_IDENTITY(GLF_live0a, (false ? _GLF_FUZZED(GLF_live0a) : GLF_live0a)) > GLF_live0b : GLF_live0a < _GLF_IDENTITY(GLF_live0b, (GLF_live0b) + 0.0)) && true), (GLF_live0gl_FragCoord.y < GLF_live0resolution.y / 2.0 ? GLF_live0a > GLF_live0b : GLF_live0a < GLF_live0b) || false);
# }
# precision highp float;
#
# precision highp int;
#
# struct GLF_live1QuicksortObject {
#  int numbers[10];
# } ;
#
# GLF_live1QuicksortObject GLF_live1obj = _GLF_FUZZED(GLF_live1QuicksortObject(int[10](4661, 20697, 9867, 23856, 96705, -65415, -11662, 80614, 78585, 29668)));
#
# void GLF_live1swap(int GLF_live1i, int GLF_live1j)
# {
#  int GLF_live1temp = GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(_GLF_IDENTITY(GLF_live1i, (_GLF_IDENTITY(GLF_live1i, 0 | (GLF_live1i))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), 10)];
#  if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
#   return;
#  for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
#   {
#    GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(GLF_live1i, 10)] = GLF_live1obj.numbers[_GLF_IDENTITY(_GLF_MAKE_IN_BOUNDS_INT(GLF_live1j, 10), (_GLF_MAKE_IN_BOUNDS_INT(GLF_live1j, 10)) - 0)];
#   }
#  if(_GLF_WRAPPED_IF_FALSE(false))
#   {
#   }
#  else
#   {
#    _GLF_IDENTITY(GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(GLF_live1j, 10)] = GLF_live1temp, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(GLF_live1j, 10)] = GLF_live1temp));
#   }
# }
# int GLF_live1performPartition(int GLF_live1l, int GLF_live1h)
# {
#  int GLF_live1pivot = GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(GLF_live1h, 10)];
#  if(_GLF_DEAD(false))
#   return 1;
#  int GLF_live1i = GLF_live1l - 1;
#  {
#   int GLF_live1_looplimiter0 = 0;
#   for(int GLF_live1j = GLF_live1l; GLF_live1j <= GLF_live1h - 1; GLF_live1j ++)
#    {
#     if(GLF_live1_looplimiter0 >= 6)
#      {
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#        break;
#       break;
#      }
#     GLF_live1_looplimiter0 ++;
#     if(GLF_live1obj.numbers[_GLF_MAKE_IN_BOUNDS_INT(GLF_live1j, _GLF_IDENTITY(10, max(10, 10)))] <= GLF_live1pivot)
#      {
#       {
#        vec2 GLF_live2pos = _GLF_FUZZED((vec2(6.8, _GLF_IDENTITY(-9.2, mix(float(_GLF_FUZZED(vec4(1456.1046, 3.3, 5.2, 719.677).y)), float(-9.2), bool(true)))) * vec2(-3814.8777, -72.95)));
#        int GLF_live2i = _GLF_FUZZED((8132 + (-95828 | 61079)));
#        int GLF_live2_looplimiter0 = 0;
#        vec4 GLF_live2res = _GLF_FUZZED((-676.807 + vec4(2277.0196, _GLF_IDENTITY(-9819.4159, (_GLF_IDENTITY(-9819.4159, min(-9819.4159, -9819.4159))) + 0.0), -43.92, 0.8)));
#        {
#         if(GLF_live2_looplimiter0 >= 3)
#          {
#           if(_GLF_DEAD(false))
#            break;
#           1;
#           if(_GLF_DEAD(false))
#            break;
#           {
#            bool GLF_live7canwalk = _GLF_FUZZED(true);
#            int GLF_live7i = _GLF_FUZZED(ivec3(-3412, 27872, 11073).g);
#            ivec2 GLF_live7p = _GLF_FUZZED(ivec2(374, 8903));
#            {
#             GLF_live7canwalk = false;
#             int GLF_live7j = _GLF_FUZZED((++ GLF_live7i));
#             {
#              int GLF_live7_looplimiter2 = 0;
#              for(             GLF_live7i = 0;
#  GLF_live7i < 8; GLF_live7i ++)
#               {
#                if(GLF_live7_looplimiter2 >= 3)
#                 {
#                  break;
#                 }
#                GLF_live7_looplimiter2 ++;
#                {
#                 int GLF_live7_looplimiter1 = 0;
#                 for(                GLF_live7j = 0;
#  GLF_live7j < 8; GLF_live7j ++)
#                  {
#                   if(_GLF_DEAD(false))
#                    break;
#                   if(GLF_live7_looplimiter1 >= 3)
#                    {
#                     break;
#                    }
#                   GLF_live7_looplimiter1 ++;
#                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                    discard;
#                   if(GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT(GLF_live7j * 2 + GLF_live7i * 2 * 16, 256)] == 0)
#                    {
#                     GLF_live7p.x = GLF_live7j * 2;
#                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
#                      {
#                       GLF_live7p.y = GLF_live7i * 2;
#                      }
#                     if(_GLF_DEAD(false))
#                      return 1;
#                     GLF_live7canwalk = true;
#                    }
#                  }
#                }
#               }
#             }
#             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#              {
#               GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live7p.x) + (GLF_live7p.y) * 16, 256)] = 1;
#              }
#             else
#              {
#              }
#            }
#           }
#          }
#         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
#          {
#           if(_GLF_WRAPPED_IF_TRUE(true))
#            {
#             if(_GLF_DEAD(false))
#              continue;
#             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#              {
#              }
#             else
#              {
#               GLF_live2_looplimiter0 ++;
#              }
#             {
#              int GLF_live8_looplimiter0 = 0;
#              if(GLF_live8_looplimiter0 >= 3)
#               {
#                for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
#                 {
#                  1;
#                 }
#               }
#             }
#            }
#           else
#            {
#            }
#          }
#         if(GLF_live2collision(GLF_live2pos, _GLF_IDENTITY(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)], (GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)]) * mat4(1.0))))
#          {
#           GLF_live2res = GLF_live2pal[_GLF_MAKE_IN_BOUNDS_INT((int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].x) * int(GLF_live2picdata[_GLF_MAKE_IN_BOUNDS_INT(GLF_live2i, 8)].y) + GLF_live2i * 9 + 11) % 16, 16)];
#           {
#            vec2 GLF_live9coord = _GLF_FUZZED(vec2(2227.8593, 5712.3467));
#            if(GLF_live9coord.y > 1.0)
#             GLF_live9coord.y -= 1.0;
#           }
#          }
#        }
#       }
#       GLF_live1i ++;
#       do
#        {
#         if(_GLF_DEAD(false))
#          return 1;
#         GLF_live1swap(GLF_live1i, GLF_live1j);
#        }
#       while(_GLF_WRAPPED_LOOP(false));
#      }
#     if(_GLF_DEAD(false))
#      {
#       {
#        int GLF_live9i = _GLF_FUZZED(GLF_live4N);
#        int GLF_live9_looplimiter0 = 0;
#        vec2 GLF_live9coord = _GLF_FUZZED(vec2(0.5, -8516.4613));
#        while(GLF_live9i < 1 && GLF_live9coord.x > 1.0 || GLF_live9coord.y > 1.0)
#         {
#          if(GLF_live9_looplimiter0 >= 3)
#           {
#            break;
#           }
#          GLF_live9_looplimiter0 ++;
#          if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
#           {
#           }
#          else
#           {
#            if(GLF_live9coord.x > 1.0)
#             {
#              for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
#               {
#                GLF_live9coord.x -= 1.0;
#               }
#             }
#           }
#          if(GLF_live9coord.y > 1.0)
#           GLF_live9coord.y -= 1.0;
#          GLF_live9coord *= 2.0;
#          GLF_live9i ++;
#         }
#       }
#       break;
#      }
#    }
#   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.x, (_GLF_IDENTITY(gl_FragCoord.x, (gl_FragCoord.x) * 1.0)) + 0.0) < 0.0))))))
#    {
#     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#      {
#      }
#     else
#      {
#       if(_GLF_DEAD(false))
#        return 1;
#      }
#     return 1;
#    }
#   if(_GLF_DEAD(false))
#    return 1;
#   for(int _injected_loop_counter = ((1 ^ 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
#    {
#     {
#      vec2 GLF_live3coord = _GLF_IDENTITY(GLF_live3gl_FragCoord.xy, _GLF_IDENTITY((GLF_live3gl_FragCoord.xy) - abs(vec2(0.0, 0.0)), vec2(mat3x4((GLF_live3gl_FragCoord.xy) - abs(vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), vec4(1.0, 1.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))), vec4(1.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) * (_GLF_IDENTITY(1.0 / 256.0, float(vec3(1.0 / 256.0, tan(0.0), 0.0))));
#      {
#       int GLF_live6_looplimiter2 = 0;
#       if(GLF_live6_looplimiter2 >= 5)
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#          continue;
#         1;
#        }
#      }
#      float GLF_live3uvstep = 1.0 / 256.0;
#      vec4 GLF_live3res = vec4(0);
#      {
#       if(_GLF_DEAD(false))
#        discard;
#       int GLF_live3_looplimiter1 = 0;
#       for(int GLF_live3i = 0; GLF_live3i < 3; GLF_live3i ++)
#        {
#         if(_GLF_DEAD(false))
#          continue;
#         if(_GLF_IDENTITY(GLF_live3_looplimiter1 >= 4, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(GLF_live3_looplimiter1 >= 4, (GLF_live3_looplimiter1 >= 4) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(GLF_live3_looplimiter1 >= 4, (GLF_live3_looplimiter1 >= 4) && true), true, true)))))))
#          {
#           if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#            return 1;
#           break;
#          }
#         {
#          vec2 GLF_live9coord = _GLF_FUZZED(vec2(842.364, -6663.1895));
#          if(GLF_live9coord.y > 1.0)
#           GLF_live9coord.y -= 1.0;
#         }
#         if(_GLF_DEAD(false))
#          return 1;
#         if(_GLF_DEAD(false))
#          break;
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#          {
#           GLF_live3_looplimiter1 ++;
#          }
#         else
#          {
#          }
#         do
#          {
#           int GLF_live3_looplimiter0 = 0;
#           if(_GLF_DEAD(false))
#            continue;
#           for(int _injected_loop_counter = (0 & -47583); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
#            {
#             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#              discard;
#             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#              {
#               for(int GLF_live3j = 0; GLF_live3j < 3; GLF_live3j ++)
#                {
#                 if(_GLF_DEAD(false))
#                  continue;
#                 if(GLF_live3_looplimiter0 >= 4)
#                  {
#                   break;
#                   if(_GLF_DEAD(false))
#                    break;
#                  }
#                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                  {
#                  }
#                 else
#                  {
#                   GLF_live3_looplimiter0 ++;
#                  }
#                 GLF_live3res += texture(GLF_live3tex, GLF_live3coord + vec2(float(GLF_live3i - 1) * GLF_live3uvstep, float(GLF_live3j - 1) * GLF_live3uvstep)) * GLF_live3weights[_GLF_MAKE_IN_BOUNDS_INT(GLF_live3i * 3 + GLF_live3j, 9)];
#                }
#              }
#             else
#              {
#              }
#            }
#           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#            {
#             if(_GLF_DEAD(false))
#              break;
#             discard;
#            }
#          }
#         while(_GLF_WRAPPED_LOOP(false));
#        }
#      }
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < sin(0.0)))))
#       continue;
#      if(_GLF_WRAPPED_IF_FALSE(false))
#       {
#       }
#      else
#       {
#        if(_GLF_DEAD(false))
#         discard;
#       }
#      {
#       {
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#         {
#          1;
#         }
#        else
#         {
#         }
#       }
#      }
#      do
#       {
#        _GLF_IDENTITY(GLF_live3_GLF_color = vec4(GLF_live3res.xyz, 1.0), (true ? GLF_live3_GLF_color = vec4(GLF_live3res.xyz, 1.0) : _GLF_FUZZED(GLF_live3gl_FragCoord)));
#       }
#      while(_GLF_WRAPPED_LOOP(false));
#     }
#     if(_GLF_DEAD(false))
#      {
#       if(_GLF_DEAD(false))
#        {
#         {
#          int GLF_live8_looplimiter0 = 0;
#          if(GLF_live8_looplimiter0 >= 3)
#           {
#            if(_GLF_WRAPPED_IF_FALSE(false))
#             {
#             }
#            else
#             {
#              1;
#             }
#           }
#         }
#         continue;
#        }
#       return 1;
#      }
#    }
#  }
#  do
#   {
#    GLF_live1i ++;
#   }
#  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#  GLF_live1swap(GLF_live1i, GLF_live1h);
#  do
#   {
#    if(_GLF_DEAD(false))
#     {
#      for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ (1 & 1)), min((0 ^ (1 & 1)), (0 ^ (1 & 1))))); _injected_loop_counter ++)
#       {
#        return 1;
#       }
#     }
#   }
#  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#  return GLF_live1i;
#  {
#   float GLF_live4grey = _GLF_FUZZED(0.9);
#   {
#    if(int(GLF_live4gl_FragCoord[1]) < 150)
#     {
#      if(_GLF_WRAPPED_IF_FALSE(false))
#       {
#       }
#      else
#       {
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#         return 1;
#        {
#         {
#          vec2 GLF_live8pos = GLF_live8gl_FragCoord.xy / GLF_live8resolution;
#          ivec2 GLF_live8lin = ivec2(int(GLF_live8pos.x * 10.0), int(GLF_live8pos.y * 10.0));
#          int GLF_live8iters = GLF_live8lin.x + GLF_live8lin.y * 10;
#          if(_GLF_DEAD(false))
#           return 1;
#          int GLF_live8v = 100;
#          int GLF_live8i = _GLF_FUZZED(GLF_live8iters);
#          {
#           int GLF_live8_looplimiter0 = 0;
#           for(          GLF_live8i = 0;
#  GLF_live8i < GLF_live8iters; GLF_live8i ++)
#            {
#             if(GLF_live8_looplimiter0 >= 3)
#              {
#               break;
#              }
#             GLF_live8_looplimiter0 ++;
#             GLF_live8v = (4 * GLF_live8v * (1000 - GLF_live8v)) / 1000;
#            }
#          }
#          if(_GLF_DEAD(false))
#           return 1;
#          GLF_live8_GLF_color = GLF_live8pal[_GLF_MAKE_IN_BOUNDS_INT(GLF_live8v % 16, 16)];
#         }
#        }
#        1;
#       }
#     }
#    else
#     {
#      if(int(GLF_live4gl_FragCoord[1]) < 180)
#       {
#        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#         {
#          if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#           return 1;
#         }
#        else
#         {
#          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (gl_FragCoord.x < 0.0))), false || (bool(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)))))))))
#           {
#            do
#             {
#              return 1;
#             }
#            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))));
#           }
#         }
#        GLF_live4grey = 0.5 + _GLF_IDENTITY(float(_GLF_IDENTITY(GLF_live4data[5], (GLF_live4data[5]) - 0)) / 10.0, (float(GLF_live4data[5]) / 10.0) / 1.0);
#       }
#      else
#       {
#        if(int(GLF_live4gl_FragCoord[1]) < 210)
#         {
#          {
#           int GLF_live6_looplimiter1 = 0;
#           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(int(2), 1, 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#            {
#             if(GLF_live6_looplimiter1 >= 5)
#              {
#               1;
#              }
#            }
#          }
#          GLF_live4grey = 0.5 + float(GLF_live4data[6]) / 10.0;
#         }
#        else
#         {
#          if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
#           return 1;
#          if(int(GLF_live4gl_FragCoord[1]) < 240)
#           {
#            GLF_live4grey = 0.5 + float(GLF_live4data[7]) / 10.0;
#            if(_GLF_DEAD(false))
#             return 1;
#           }
#          else
#           {
#            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#             {
#              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
#               {
#                return 1;
#               }
#             }
#            do
#             {
#              if(int(GLF_live4gl_FragCoord[1]) < 270)
#               {
#                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#                 {
#                  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#                   return 1;
#                  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#                   return 1;
#                 }
#                else
#                 {
#                 }
#                GLF_live4grey = 0.5 + float(GLF_live4data[8]) / 10.0;
#               }
#              else
#               {
#                1;
#                if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#                 {
#                  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#                   {
#                    return 1;
#                   }
#                  else
#                   {
#                    if(_GLF_DEAD(false))
#                     continue;
#                   }
#                 }
#               }
#             }
#            while(_GLF_WRAPPED_LOOP(false));
#           }
#         }
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < length(0.0)))))
#         {
#          if(_GLF_DEAD(false))
#           return 1;
#          return 1;
#         }
#       }
#     }
#   }
#  }
# }
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 5) uniform sampler2D tex;
#
# void main()
# {
#  vec4 GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep;
#  vec3 GLF_merged2_0_2_5_2_1_5coordslope;
#  int i = 0;
#  vec2 uvstep = vec2(1.0) * (1.0 / _GLF_IDENTITY(256.0, mix(float(_GLF_FUZZED(5.1)), float(256.0), bool(true))));
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#   return;
#  GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.zw = uvstep;
#  float slope = 2.0 / 256.0;
#  do
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord, (false ? _GLF_FUZZED(GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep) : _GLF_IDENTITY(gl_FragCoord, max(gl_FragCoord, gl_FragCoord)))).x < _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0)), (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0)), (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0)), 0.0 + (dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(814.085)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))))), 1.0, 0.0, 1.0)), dot(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.6)), bool(false))), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0))))) - sin(0.0))) + 0.0), dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 1.0, 0.0, 1.0), clamp(vec4(0.0, 1.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0), vec4(0.0, 1.0, 0.0, 1.0)))), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 0.0)))))))
#     return;
#   }
#  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#  do
#   {
#    GLF_merged2_0_2_5_2_1_5coordslope.z = slope;
#   }
#  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))), bvec2(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))), bvec2(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0))))))))))))), (bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))), bvec2(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))), bvec2(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))))))))) || false)), (injectionSwitch.x > injectionSwitch.y))));
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
#   {
#    GLF_merged2_0_2_5_2_1_5coordslope.xy = coord;
#   }
#  float refh = texture(tex, _GLF_IDENTITY(GLF_merged2_0_2_5_2_1_5coordslope.xy, mix(vec2(_GLF_FUZZED(5.2), (GLF_merged2_0_2_5_2_1_5coordslope.xy)[1]), vec2((_GLF_IDENTITY(GLF_merged2_0_2_5_2_1_5coordslope, mix(vec3(_GLF_FUZZED(53.42), (GLF_merged2_0_2_5_2_1_5coordslope)[1], _GLF_FUZZED(9239.2347)), vec3((GLF_merged2_0_2_5_2_1_5coordslope)[0], _GLF_FUZZED(-7156.9883), (GLF_merged2_0_2_5_2_1_5coordslope)[2]), bvec3(true, false, true))).xy)[0], _GLF_FUZZED(-60.88)), bvec2(true, false)))).y;
#  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
#   {
#    GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y = refh;
#   }
#  GLF_merged2_0_2_5_2_1_5coordslope.xy -= GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.zw;
#  if(_GLF_WRAPPED_IF_FALSE(false))
#   {
#   }
#  else
#   {
#    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     {
#     }
#    else
#     {
#      GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y += GLF_merged2_0_2_5_2_1_5coordslope.z;
#     }
#   }
#  float h = _GLF_IDENTITY(texture(tex, GLF_merged2_0_2_5_2_1_5coordslope.xy).y, (texture(tex, GLF_merged2_0_2_5_2_1_5coordslope.xy).y) / 1.0);
#  _GLF_IDENTITY(GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x = h, (false ? _GLF_FUZZED(-66.99) : GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x = h));
#  if(_GLF_DEAD(false))
#   {
#    {
#     {
#      int GLF_live8i = _GLF_FUZZED(41046);
#      int GLF_live8v = _GLF_FUZZED((-73049 * GLF_live4N));
#      int GLF_live8iters = _GLF_FUZZED((-31668 - GLF_live4N));
#      int GLF_live8_looplimiter0 = 0;
#      for(     GLF_live8i = 0;
#  GLF_live8i < GLF_live8iters; GLF_live8i ++)
#       {
#        if(GLF_live8_looplimiter0 >= 3)
#         {
#          break;
#         }
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < _GLF_ZERO(0.0, injectionSwitch.x)))))
#         continue;
#        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#         {
#          GLF_live8_looplimiter0 ++;
#         }
#        GLF_live8v = (4 * GLF_live8v * (1000 - GLF_live8v)) / 1000;
#       }
#     }
#     float GLF_live0data[10] = _GLF_FUZZED(float[10](-8.3, 4182.0033, -3281.4103, _GLF_IDENTITY((-9.5 - -9431.0413), max((-9.5 - -9431.0413), _GLF_IDENTITY((-9.5 - -9431.0413), 1.0 * ((-9.5 - -9431.0413))))), -699.040, -9.5, (5.9 + _GLF_IDENTITY(-588.719, (false ? _GLF_FUZZED(-9196.3643) : -588.719))), vec4(49.88, -6546.0891, -0.9, _GLF_IDENTITY(_GLF_IDENTITY(-980.116, mix(float(-980.116), float(_GLF_FUZZED(92.10)), bool(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), (_GLF_FALSE(false, (gl_FragCoord.y < 0.0))) && true)))), 0.0 + (-980.116))).r, 60.94, -3281.4103));
#     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), min(vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0))))), injectionSwitch)).y)), false)))))
#      {
#       if(_GLF_WRAPPED_IF_FALSE(false))
#        {
#        }
#       else
#        {
#         {
#          int GLF_live9i = _GLF_FUZZED(5448);
#          int GLF_live9_looplimiter0 = 0;
#          vec2 GLF_live9coord = _GLF_FUZZED((vec2(-5289.7825, 8070.2513) / vec2(-9.3, -0.6)));
#          while(GLF_live9i < 1 && GLF_live9coord.x > 1.0 || GLF_live9coord.y > 1.0)
#           {
#            if(GLF_live9_looplimiter0 >= 3)
#             {
#              break;
#             }
#            GLF_live9_looplimiter0 ++;
#            if(GLF_live9coord.x > 1.0)
#             GLF_live9coord.x -= 1.0;
#            if(GLF_live9coord.y > 1.0)
#             GLF_live9coord.y -= 1.0;
#            GLF_live9coord *= 2.0;
#            GLF_live9i ++;
#           }
#         }
#         return;
#        }
#      }
#     {
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#       {
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          return;
#         }
#        else
#         {
#         }
#       }
#      int GLF_live0_looplimiter2 = 0;
#      for(int GLF_live0i = 0; GLF_live0i < 9; GLF_live0i ++)
#       {
#        if(GLF_live0_looplimiter2 >= 7)
#         {
#          break;
#         }
#        if(_GLF_DEAD(false))
#         break;
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#           return;
#          GLF_live0_looplimiter2 ++;
#          if(_GLF_DEAD(false))
#           break;
#         }
#        else
#         {
#          if(_GLF_DEAD(false))
#           return;
#          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#           {
#           }
#          else
#           {
#            if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#             return;
#           }
#         }
#        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#         {
#         }
#        else
#         {
#          int GLF_live0_looplimiter1 = 0;
#          if(_GLF_DEAD(false))
#           return;
#          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0)))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
#           {
#            for(int GLF_live0j = 0; GLF_live0j < 10; GLF_live0j ++)
#             {
#              if(GLF_live0_looplimiter1 >= 7)
#               {
#                if(_GLF_DEAD(false))
#                 discard;
#                if(_GLF_DEAD(false))
#                 break;
#                break;
#                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                 {
#                  if(_GLF_WRAPPED_IF_FALSE(false))
#                   {
#                   }
#                  else
#                   {
#                    discard;
#                    do
#                     {
#                      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#                       discard;
#                     }
#                    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))));
#                   }
#                 }
#               }
#              do
#               {
#                GLF_live0_looplimiter1 ++;
#               }
#              while(_GLF_WRAPPED_LOOP(false));
#              if(_GLF_IDENTITY(GLF_live0j, (GLF_live0j) - 0) < GLF_live0i + 1)
#               {
#                continue;
#               }
#              bool GLF_live0doSwap = GLF_live0checkSwap(GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0i, 10)], GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0j, 10)]);
#              if(GLF_live0doSwap)
#               {
#                float GLF_live0temp = GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0i, 10)];
#                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                 {
#                 }
#                else
#                 {
#                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5.6)), bool(false))) > injectionSwitch.y))))
#                   break;
#                  GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0i, 10)] = GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0j, 10)];
#                 }
#                if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.x, (gl_FragCoord.x) / 1.0) < 0.0))))
#                 {
#                 }
#                else
#                 {
#                  GLF_live0data[_GLF_MAKE_IN_BOUNDS_INT(GLF_live0j, 10)] = GLF_live0temp;
#                 }
#                if(_GLF_DEAD(false))
#                 discard;
#               }
#             }
#           }
#         }
#       }
#     }
#    }
#    if(_GLF_DEAD(false))
#     return;
#    return;
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#      return;
#     ivec2 GLF_live7p = _GLF_FUZZED(ivec2(85638, -26075));
#     int GLF_live7directions = _GLF_FUZZED(int(false));
#     if(GLF_live7p.y < 14 && GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live7p.x) + (GLF_live7p.y + 2) * 16, 256)] == 0)
#      {
#       GLF_live7directions += 1;
#      }
#    }
#   }
#  {
#   int GLF_live7j = _GLF_FUZZED((GLF_live4N));
#   bool GLF_live7canwalk = _GLF_FUZZED(false);
#   int GLF_live7i = _GLF_FUZZED((57103 * 86799));
#   ivec2 GLF_live7p = _GLF_FUZZED(ivec2(45313, 86426));
#   int GLF_live7_looplimiter1 = 0;
#   {
#    if(GLF_live7_looplimiter1 >= 3)
#     {
#      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
#       {
#        1;
#       }
#      if(_GLF_DEAD(false))
#       return;
#     }
#    GLF_live7_looplimiter1 ++;
#    if(GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT(GLF_live7j * 2 + GLF_live7i * 2 * 16, 256)] == 0)
#     {
#      GLF_live7p.x = GLF_live7j * 2;
#      GLF_live7p.y = GLF_live7i * 2;
#      GLF_live7canwalk = true;
#     }
#   }
#   if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#    return;
#  }
#  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#   {
#    do
#     {
#      return;
#     }
#    while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#    if(_GLF_DEAD(false))
#     return;
#    {
#     vec2 GLF_live9coord = _GLF_FUZZED(vec2(19.13, -4261.2971));
#     if(_GLF_DEAD(false))
#      return;
#     if(GLF_live9coord.x > 1.0)
#      GLF_live9coord.x -= 1.0;
#    }
#   }
#  if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#   {
#    if(_GLF_WRAPPED_IF_TRUE(true))
#     {
#      {
#       int GLF_live6treeIndex = _GLF_FUZZED((GLF_live4N | GLF_live4N));
#       int GLF_live6baseIndex = _GLF_FUZZED((GLF_live4N * (GLF_live4N * -16363)));
#       int GLF_live6data = _GLF_FUZZED(GLF_live4N);
#       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
#        {
#         int GLF_live6_looplimiter0 = 0;
#         while(GLF_live6baseIndex <= GLF_live6treeIndex)
#          {
#           if(GLF_live6_looplimiter0 >= 5)
#            {
#             break;
#            }
#           GLF_live6_looplimiter0 ++;
#           if(GLF_live6data <= GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].data)
#            {
#             if(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex == - 1)
#              {
#               GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex = GLF_live6treeIndex;
#               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#                {
#                 GLF_live6makeTreeNode(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6treeIndex, 10)], GLF_live6data);
#                }
#               1;
#              }
#             else
#              {
#               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
#                {
#                 GLF_live6baseIndex = GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex;
#                }
#               continue;
#              }
#            }
#           else
#            {
#             if(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].rightIndex == - 1)
#              {
#               if(_GLF_WRAPPED_IF_FALSE(false))
#                {
#                }
#               else
#                {
#                 if(_GLF_DEAD(false))
#                  discard;
#                 GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].rightIndex = GLF_live6treeIndex;
#                }
#               GLF_live6makeTreeNode(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6treeIndex, 10)], GLF_live6data);
#               1;
#              }
#             else
#              {
#               GLF_live6baseIndex = GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].rightIndex;
#               continue;
#              }
#            }
#          }
#        }
#      }
#      if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
#       return;
#      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
#       {
#        if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((gl_FragCoord.x < 0.0), (_GLF_IDENTITY((gl_FragCoord.x < 0.0), bool(bvec3((gl_FragCoord.x < 0.0), true, true)))) && true))))
#         {
#          if(_GLF_WRAPPED_IF_FALSE(false))
#           {
#           }
#          else
#           {
#            return;
#           }
#          {
#           {
#            vec2 GLF_live9coord = GLF_live9gl_FragCoord.xy * (1.0 / 256.0);
#            vec4 GLF_live9res = vec4(0.25);
#            do
#             {
#              GLF_live9coord *= 2.0;
#             }
#            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.x < abs(0.0)))));
#            int GLF_live9i = 0;
#            {
#             int GLF_live9_looplimiter0 = 0;
#             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < tan(0.0)))))
#              break;
#             while(GLF_live9i < 1 && GLF_live9coord.x > 1.0 || GLF_live9coord.y > 1.0)
#              {
#               if(GLF_live9_looplimiter0 >= 3)
#                {
#                 break;
#                }
#               GLF_live9_looplimiter0 ++;
#               do
#                {
#                 if(GLF_live9coord.x > 1.0)
#                  {
#                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
#                    {
#                     GLF_live9coord.x -= 1.0;
#                     if(_GLF_DEAD(false))
#                      return;
#                    }
#                  }
#                 if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#                  break;
#                }
#               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                {
#                }
#               else
#                {
#                 if(GLF_live9coord.y > 1.0)
#                  GLF_live9coord.y -= 1.0;
#                }
#               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                break;
#               GLF_live9coord *= 2.0;
#               GLF_live9i ++;
#              }
#            }
#            if(GLF_live9coord.x < 1.0 && GLF_live9coord.y < 1.0)
#             {
#              GLF_live9res = texture(GLF_live9tex, GLF_live9coord);
#             }
#            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#             {
#              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#               continue;
#             }
#            else
#             {
#              GLF_live9_GLF_color = vec4(GLF_live9res.xyz, 1.0);
#             }
#           }
#          }
#         }
#       }
#      {
#       int GLF_live5i = _GLF_FUZZED(-17214);
#       vec2 GLF_live5coord = _GLF_FUZZED(_GLF_IDENTITY(vec2(443.074, 2.5), min(vec2(443.074, 2.5), vec2(443.074, 2.5))));
#       if(_GLF_DEAD(false))
#        return;
#       vec4 GLF_live5texel = _GLF_FUZZED(vec4(-9906.1528, -4.9, -8865.8345, 49.28));
#       {
#        int GLF_live5_looplimiter0 = 0;
#        if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#         {
#          if(_GLF_DEAD(false))
#           return;
#         }
#        else
#         {
#          while(GLF_live5texel.x + GLF_live5texel.y + GLF_live5texel.z > 1.0 && GLF_live5i < 16)
#           {
#            if(_GLF_IDENTITY(GLF_live5_looplimiter0 >= 6, bool(bvec4(_GLF_IDENTITY(GLF_live5_looplimiter0 >= 6, (GLF_live5_looplimiter0 >= 6) || false), false, false, true))))
#             {
#              break;
#             }
#            GLF_live5_looplimiter0 ++;
#            do
#             {
#              ivec2 GLF_live7p = _GLF_FUZZED(ivec2(-84225, 19877));
#              int GLF_live7d = _GLF_FUZZED((- GLF_live4N));
#              {
#               GLF_live7d --;
#               GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live7p.x) + (GLF_live7p.y) * 16, 256)] = 1;
#               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#                {
#                 GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live7p.x + 1) + (GLF_live7p.y) * 16, 256)] = 1;
#                }
#               GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT((GLF_live7p.x + 2) + (GLF_live7p.y) * 16, 256)] = 1;
#               GLF_live7p.x += 2;
#              }
#             }
#            while(_GLF_WRAPPED_LOOP(false));
#            GLF_live5coord = GLF_live5texel.xz + GLF_live5texel.yy;
#            if(_GLF_WRAPPED_IF_TRUE(true))
#             {
#              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (0 >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter --)
#               {
#                GLF_live5coord = floor(GLF_live5coord * 256.0) / 256.0;
#                if(_GLF_DEAD(false))
#                 break;
#               }
#             }
#            else
#             {
#             }
#            if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#             break;
#            GLF_live5texel = texture(GLF_live5tex, GLF_live5coord);
#            for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 + (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
#             {
#              GLF_live5i ++;
#             }
#           }
#         }
#       }
#      }
#      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#       return;
#      while(_GLF_IDENTITY(GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x < GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y && i < 32, bool(_GLF_IDENTITY(bvec3(GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x < GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y && i < 32, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3(GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x < GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y && i < 32, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
#       {
#        if(_GLF_DEAD(false))
#         continue;
#        GLF_merged2_0_2_5_2_1_5coordslope.xy -= GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.zw;
#        GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.y += GLF_merged2_0_2_5_2_1_5coordslope.z;
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#          continue;
#         float GLF_live4grey = _GLF_FUZZED(-145.941);
#         if(int(GLF_live4gl_FragCoord[1]) < _GLF_IDENTITY(30, (30) * 1))
#          {
#           {
#            {
#             vec2 GLF_live8pos = GLF_live8gl_FragCoord.xy / GLF_live8resolution;
#             ivec2 GLF_live8lin = ivec2(int(GLF_live8pos.x * 10.0), int(GLF_live8pos.y * 10.0));
#             int GLF_live8iters = GLF_live8lin.x + GLF_live8lin.y * 10;
#             int GLF_live8v = 100;
#             int GLF_live8i = _GLF_FUZZED(GLF_live8iters);
#             {
#              int GLF_live8_looplimiter0 = 0;
#              for(             GLF_live8i = 0;
#  GLF_live8i < GLF_live8iters; GLF_live8i ++)
#               {
#                if(GLF_live8_looplimiter0 >= 3)
#                 {
#                  break;
#                  if(_GLF_DEAD(false))
#                   return;
#                 }
#                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
#                 {
#                  GLF_live8_looplimiter0 ++;
#                 }
#                GLF_live8v = (4 * GLF_live8v * (1000 - GLF_live8v)) / 1000;
#               }
#             }
#             GLF_live8_GLF_color = GLF_live8pal[_GLF_MAKE_IN_BOUNDS_INT(GLF_live8v % 16, 16)];
#            }
#           }
#           GLF_live4grey = 0.5 + _GLF_IDENTITY(float(_GLF_IDENTITY(GLF_live4data[0], int(ivec4(_GLF_IDENTITY(GLF_live4data[0], 1 * (GLF_live4data[0])), (1 ^ 1), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) / 10.0, clamp(_GLF_IDENTITY(float(GLF_live4data[0]) / 10.0, mix(float(_GLF_FUZZED(57.93)), float(float(GLF_live4data[0]) / 10.0), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), float(GLF_live4data[0]) / 10.0, float(GLF_live4data[0]) / 10.0));
#           if(_GLF_DEAD(false))
#            {
#             do
#              {
#               int GLF_live6treeIndex = _GLF_FUZZED(GLF_live4N);
#               int GLF_live6baseIndex = _GLF_FUZZED(-66975);
#               int GLF_live6data = _GLF_FUZZED(87179);
#               if(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex == - 1)
#                {
#                 GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex = GLF_live6treeIndex;
#                 GLF_live6makeTreeNode(GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6treeIndex, 10)], GLF_live6data);
#                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#                  {
#                  }
#                 else
#                  {
#                   1;
#                  }
#                 if(_GLF_DEAD(false))
#                  continue;
#                }
#               else
#                {
#                 GLF_live6baseIndex = GLF_live6tree[_GLF_MAKE_IN_BOUNDS_INT(GLF_live6baseIndex, 10)].leftIndex;
#                 1;
#                }
#              }
#             while(_GLF_WRAPPED_LOOP(false));
#             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#              continue;
#             break;
#            }
#          }
#         else
#          {
#           if(_GLF_IDENTITY(int(GLF_live4gl_FragCoord[1]), ~ (_GLF_IDENTITY(~ (int(GLF_live4gl_FragCoord[1])), 0 ^ (~ (int(GLF_live4gl_FragCoord[1])))))) < 60)
#            {
#             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#              {
#               GLF_live4grey = 0.5 + float(GLF_live4data[1]) / 10.0;
#              }
#             else
#              {
#              }
#             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#              continue;
#             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#              {
#               if(_GLF_DEAD(false))
#                discard;
#               break;
#              }
#            }
#           else
#            {
#             if(int(GLF_live4gl_FragCoord[1]) < 90)
#              {
#               GLF_live4grey = 0.5 + float(GLF_live4data[2]) / 10.0;
#              }
#             else
#              {
#               if(int(GLF_live4gl_FragCoord[_GLF_IDENTITY(1, max(1, 1))]) < 120)
#                {
#                 if(_GLF_DEAD(false))
#                  continue;
#                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#                  {
#                   GLF_live4grey = 0.5 + float(GLF_live4data[_GLF_IDENTITY(_GLF_IDENTITY(3, max(3, 3)), max(_GLF_IDENTITY(3, max(3, 3)), _GLF_IDENTITY(3, max(3, 3))))]) / 10.0;
#                  }
#                }
#               else
#                {
#                 if(int(GLF_live4gl_FragCoord[1]) < 150)
#                  {
#                   1;
#                   if(_GLF_DEAD(false))
#                    discard;
#                  }
#                 else
#                  {
#                   if(int(GLF_live4gl_FragCoord[1]) < 180)
#                    {
#                     GLF_live4grey = 0.5 + float(GLF_live4data[_GLF_IDENTITY(5, (5) - 0)]) / 10.0;
#                    }
#                   else
#                    {
#                     if(int(GLF_live4gl_FragCoord[1]) < 210)
#                      {
#                       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#                        {
#                         if(_GLF_DEAD(false))
#                          discard;
#                         if(_GLF_DEAD(false))
#                          continue;
#                         return;
#                        }
#                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#                        {
#                         GLF_live4grey = 0.5 + float(GLF_live4data[6]) / 10.0;
#                        }
#                      }
#                     else
#                      {
#                       {
#                        if(_GLF_DEAD(false))
#                         return;
#                        int GLF_live7_looplimiter2 = 0;
#                        int GLF_live7j = _GLF_FUZZED(86491);
#                        bool GLF_live7canwalk = _GLF_FUZZED(true);
#                        int GLF_live7i = _GLF_FUZZED(GLF_live4N);
#                        ivec2 GLF_live7p = _GLF_FUZZED((ivec2(-69582, 9737) & ivec2(38539, -91534)));
#                        for(                       GLF_live7i = 0;
#  GLF_live7i < 8; GLF_live7i ++)
#                         {
#                          if(GLF_live7_looplimiter2 >= 3)
#                           {
#                            break;
#                           }
#                          GLF_live7_looplimiter2 ++;
#                          {
#                           int GLF_live7_looplimiter1 = 0;
#                           for(                          GLF_live7j = 0;
#  GLF_live7j < 8; GLF_live7j ++)
#                            {
#                             if(GLF_live7_looplimiter1 >= 3)
#                              {
#                               break;
#                              }
#                             GLF_live7_looplimiter1 ++;
#                             if(GLF_live7map[_GLF_MAKE_IN_BOUNDS_INT(GLF_live7j * 2 + GLF_live7i * 2 * 16, 256)] == 0)
#                              {
#                               GLF_live7p.x = GLF_live7j * 2;
#                               GLF_live7p.y = GLF_live7i * 2;
#                               GLF_live7canwalk = true;
#                              }
#                            }
#                          }
#                         }
#                       }
#                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
#                        {
#                         if(_GLF_DEAD(false))
#                          return;
#                         if(int(GLF_live4gl_FragCoord[1]) < 240)
#                          {
#                           GLF_live4grey = 0.5 + float(GLF_live4data[7]) / 10.0;
#                           if(_GLF_DEAD(false))
#                            {
#                             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#                              continue;
#                             return;
#                            }
#                          }
#                         else
#                          {
#                           {
#                            int GLF_live8i = _GLF_FUZZED(-4156);
#                            int GLF_live8v = _GLF_FUZZED(GLF_live4N);
#                            int GLF_live8iters = _GLF_FUZZED(5185);
#                            int GLF_live8_looplimiter0 = 0;
#                            for(                           GLF_live8i = 0;
#  GLF_live8i < GLF_live8iters; GLF_live8i ++)
#                             {
#                              if(GLF_live8_looplimiter0 >= 3)
#                               {
#                                break;
#                               }
#                              if(_GLF_WRAPPED_IF_FALSE(false))
#                               {
#                               }
#                              else
#                               {
#                                if(_GLF_DEAD(false))
#                                 return;
#                                GLF_live8_looplimiter0 ++;
#                               }
#                              GLF_live8v = (4 * GLF_live8v * (1000 - GLF_live8v)) / 1000;
#                             }
#                           }
#                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))) - 0.0) > injectionSwitch.y))))
#                            {
#                             if(_GLF_DEAD(false))
#                              return;
#                            }
#                           else
#                            {
#                             if(int(GLF_live4gl_FragCoord[_GLF_IDENTITY(1, min(1, 1))]) < _GLF_IDENTITY(270, (_GLF_IDENTITY(270, (270) << 0)) * 1))
#                              {
#                               GLF_live4grey = 0.5 + float(GLF_live4data[8]) / 10.0;
#                              }
#                             else
#                              {
#                               _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, max(1, 1)), 1));
#                              }
#                             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#                              break;
#                            }
#                          }
#                        }
#                      }
#                    }
#                   if(_GLF_DEAD(false))
#                    return;
#                  }
#                }
#              }
#            }
#          }
#        }
#        if(_GLF_DEAD(false))
#         break;
#        GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep.x = texture(tex, GLF_merged2_0_2_5_2_1_5coordslope.xy).y;
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
#         {
#          i ++;
#          if(_GLF_DEAD(false))
#           break;
#         }
#        else
#         {
#         }
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#         return;
#        {
#         ivec2 GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top;
#         int GLF_live1_looplimiter1 = 0;
#         GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.x = GLF_live1_looplimiter1;
#         int GLF_live1top = _GLF_FUZZED(70927);
#         if(_GLF_DEAD(false))
#          break;
#         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#          {
#           GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y = GLF_live1top;
#          }
#         int GLF_live1h = _GLF_FUZZED(((ivec2(-44367, -97109) ^ 95074).r * (56793)));
#         int GLF_live1stack[10] = _GLF_FUZZED(int[10](39409, 99870, _GLF_IDENTITY(_GLF_IDENTITY(-51712, (false ? _GLF_FUZZED(GLF_live1_looplimiter1) : _GLF_IDENTITY(-51712, clamp(-51712, -51712, -51712)))), (true ? -51712 : _GLF_FUZZED(floatBitsToInt(refh)))), ivec3(-49889, 46400, 99327).r, (-74806 << 817), -7532, int(false), 41082, 99870, _GLF_IDENTITY(ivec3(-49889, 46400, 99327).r, (_GLF_IDENTITY(ivec3(-49889, 46400, 99327).r, int(ivec4(ivec3(-49889, 46400, 99327).r, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) / 1)));
#         int GLF_live1l = _GLF_FUZZED((- -89152));
#         do
#          {
#           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.y < 0.0, bool(bool(gl_FragCoord.y < 0.0)))))))
#            break;
#           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#            {
#            }
#           else
#            {
#             if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#              break;
#             if(_GLF_WRAPPED_IF_TRUE(true))
#              {
#               while(GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y >= 0)
#                {
#                 if(_GLF_DEAD(false))
#                  {
#                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.y < abs(0.0)))))
#                    {
#                    }
#                   else
#                    {
#                     return;
#                    }
#                  }
#                 if(GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.x >= 6)
#                  {
#                   break;
#                  }
#                 GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.x ++;
#                 GLF_live1h = GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y --, 10)];
#                 if(_GLF_DEAD(false))
#                  break;
#                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0)), false || (_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))))
#                  {
#                   GLF_live1l = GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y --, 10)];
#                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                    break;
#                  }
#                 else
#                  {
#                  }
#                 int GLF_live1p = GLF_live1performPartition(GLF_live1l, GLF_live1h);
#                 {
#                  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < abs(0.0)))))
#                   break;
#                  int GLF_live5i = _GLF_FUZZED(-86793);
#                  vec2 GLF_live5coord = _GLF_IDENTITY(_GLF_FUZZED((-2.7 * vec2(0.0, -10.10))), min(_GLF_FUZZED((-2.7 * vec2(0.0, -10.10))), _GLF_IDENTITY(_GLF_FUZZED((-2.7 * vec2(0.0, -10.10))), (_GLF_IDENTITY(_GLF_FUZZED((-2.7 * vec2(0.0, -10.10))), mat2(1.0) * (_GLF_FUZZED((-2.7 * vec2(0.0, -10.10)))))) / vec2(1.0, 1.0))));
#                  int GLF_live5_looplimiter0 = 0;
#                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, 0.0)))))))
#                   continue;
#                  vec4 GLF_live5texel = _GLF_FUZZED(vec4(-4750.9515, 5.2, 868.191, _GLF_IDENTITY(-59.37, float(vec3(-59.37, tan(0.0), _GLF_ONE(1.0, injectionSwitch.y))))));
#                  while(GLF_live5texel.x + GLF_live5texel.y + GLF_live5texel.z > 1.0 && GLF_live5i < 16)
#                   {
#                    if(GLF_live5_looplimiter0 >= 6)
#                     {
#                      break;
#                     }
#                    GLF_live5_looplimiter0 ++;
#                    do
#                     {
#                      GLF_live5coord = GLF_live5texel.xz + GLF_live5texel.yy;
#                      if(_GLF_DEAD(false))
#                       break;
#                     }
#                    while(_GLF_WRAPPED_LOOP(false));
#                    if(_GLF_DEAD(false))
#                     continue;
#                    GLF_live5coord = floor(_GLF_IDENTITY(GLF_live5coord * 256.0, _GLF_IDENTITY((GLF_live5coord * 256.0) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), clamp((GLF_live5coord * 256.0) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (GLF_live5coord * 256.0) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (GLF_live5coord * 256.0) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))))) / _GLF_IDENTITY(256.0, (256.0) * 1.0);
#                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#                     {
#                      GLF_live5texel = texture(GLF_live5tex, GLF_live5coord);
#                     }
#                    else
#                     {
#                     }
#                    GLF_live5i ++;
#                   }
#                 }
#                 if(_GLF_WRAPPED_IF_TRUE(true))
#                  {
#                   if(GLF_live1p - 1 > GLF_live1l)
#                    {
#                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#                      {
#                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                        continue;
#                       _GLF_IDENTITY(GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(++ GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y, 10)] = GLF_live1l, (GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(++ GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y, 10)] = GLF_live1l) - 0);
#                      }
#                     GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(++ GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y, 10)] = GLF_live1p - 1;
#                    }
#                  }
#                 else
#                  {
#                  }
#                 if(_GLF_IDENTITY(GLF_live1p + 1 < GLF_live1h, false || (GLF_live1p + 1 < GLF_live1h)))
#                  {
#                   GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(++ GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y, 10)] = GLF_live1p + _GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))));
#                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#                    return;
#                   GLF_live1stack[_GLF_MAKE_IN_BOUNDS_INT(++ GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top.y, 10)] = GLF_live1h;
#                   if(_GLF_DEAD(false))
#                    {
#                     {
#                      {
#                       1;
#                      }
#                     }
#                     break;
#                    }
#                  }
#                 {
#                  int GLF_live6result = _GLF_FUZZED(53013);
#                  int GLF_live6count = _GLF_FUZZED(-14340);
#                  if(GLF_live6result == - 1)
#                   {
#                    GLF_live6count ++;
#                   }
#                 }
#                }
#              }
#             else
#              {
#              }
#            }
#          }
#         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))), false))));
#        }
#       }
#     }
#    else
#     {
#     }
#    {
#     {
#      if(_GLF_DEAD(false))
#       return;
#      vec2 GLF_live8pos = GLF_live8gl_FragCoord.xy / GLF_live8resolution;
#      if(_GLF_DEAD(false))
#       return;
#      ivec2 GLF_live8lin = ivec2(int(GLF_live8pos.x * 10.0), int(GLF_live8pos.y * 10.0));
#      int GLF_live8iters = GLF_live8lin.x + GLF_live8lin.y * 10;
#      int GLF_live8v = 100;
#      if(_GLF_DEAD(false))
#       return;
#      int GLF_live8i = _GLF_FUZZED(GLF_live8iters);
#      {
#       int GLF_live8_looplimiter0 = 0;
#       for(      GLF_live8i = 0;
#  GLF_live8i < GLF_live8iters; GLF_live8i ++)
#        {
#         if(GLF_live8_looplimiter0 >= 3)
#          {
#           break;
#          }
#         GLF_live8_looplimiter0 ++;
#         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#          {
#           if(_GLF_DEAD(false))
#            continue;
#           GLF_live8v = (4 * GLF_live8v * (1000 - GLF_live8v)) / 1000;
#          }
#        }
#      }
#      GLF_live8_GLF_color = GLF_live8pal[_GLF_MAKE_IN_BOUNDS_INT(GLF_live8v % 16, 16)];
#     }
#    }
#   }
#  else
#   {
#   }
#  {
#   do
#    {
#     1;
#    }
#   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#  }
#  _GLF_color = vec4(vec3(float(i) * _GLF_IDENTITY((1.0 / 32.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3((1.0 / 32.0), 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0), (true ? mat4x3((1.0 / 32.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))), float(_GLF_FUZZED((-92.31 * 8403.5477))), bool(false))), 0.0, 0.0) : _GLF_FUZZED(mat4x3(-4815.3881, 9.8, 5575.5066, -3269.3990, 21.10, -6314.9373, -72.55, -578.751, -20.89, 2.7, 5.3, -4.1))))), mix(float(float(_GLF_IDENTITY(mat4x3((1.0 / 32.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0), (true ? mat4x3((1.0 / 32.0), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat4x3(-4815.3881, 9.8, 5575.5066, -3269.3990, 21.10, -6314.9373, -72.55, -578.751, -20.89, 2.7, 5.3, -4.1)))))), float(_GLF_FUZZED(-4520.9538)), bool(false))))), 1.0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 3496
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %281 %3486
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %7 "GLF_live6BST"
               OpMemberName %7 0 "data"
               OpMemberName %7 1 "leftIndex"
               OpMemberName %7 2 "rightIndex"
               OpName %13 "GLF_live6makeTreeNode(struct-GLF_live6BST-i1-i1-i11;i1;"
               OpName %11 "GLF_live6tree"
               OpName %12 "GLF_live6data"
               OpName %24 "GLF_live2collision(vf2;vf4;"
               OpName %22 "GLF_live2pos"
               OpName %23 "GLF_live2quad"
               OpName %30 "GLF_live0checkSwap(f1;f1;"
               OpName %28 "GLF_live0a"
               OpName %29 "GLF_live0b"
               OpName %35 "GLF_live1swap(i1;i1;"
               OpName %33 "GLF_live1i"
               OpName %34 "GLF_live1j"
               OpName %40 "GLF_live1performPartition(i1;i1;"
               OpName %38 "GLF_live1l"
               OpName %39 "GLF_live1h"
               OpName %43 "GLF_live8gl_FragCoord"
               OpName %49 "GLF_live8_GLF_color"
               OpName %59 "GLF_live6tree"
               OpName %96 "GLF_live7map"
               OpName %116 "GLF_live9gl_FragCoord"
               OpName %122 "GLF_live9_GLF_color"
               OpName %128 "GLF_live4gl_FragCoord"
               OpName %136 "GLF_live4data"
               OpName %146 "GLF_live3gl_FragCoord"
               OpName %152 "GLF_live3_GLF_color"
               OpName %158 "GLF_live0gl_FragCoord"
               OpName %164 "GLF_live1QuicksortObject"
               OpMemberName %164 0 "numbers"
               OpName %166 "GLF_live1obj"
               OpName %199 "buf0"
               OpMemberName %199 0 "injectionSwitch"
               OpName %201 ""
               OpName %281 "gl_FragCoord"
               OpName %290 "GLF_live6_looplimiter1"
               OpName %300 "_injected_loop_counter"
               OpName %320 "_injected_loop_counter"
               OpName %352 "buf_push"
               OpMemberName %352 0 "GLF_live0resolution"
               OpName %354 ""
               OpName %376 "GLF_live1temp"
               OpName %388 "_injected_loop_counter"
               OpName %417 "GLF_live1pivot"
               OpName %425 "GLF_live1i"
               OpName %428 "GLF_live1_looplimiter0"
               OpName %429 "GLF_live1j"
               OpName %462 "GLF_live2pos"
               OpName %466 "GLF_live2i"
               OpName %468 "GLF_live2_looplimiter0"
               OpName %469 "GLF_live2res"
               OpName %486 "GLF_live7canwalk"
               OpName %487 "GLF_live7i"
               OpName %491 "GLF_live7p"
               OpName %495 "GLF_live7j"
               OpName %498 "GLF_live7_looplimiter2"
               OpName %514 "GLF_live7_looplimiter1"
               OpName %557 "_injected_loop_counter"
               OpName %592 "_injected_loop_counter"
               OpName %613 "GLF_live8_looplimiter0"
               OpName %618 "_injected_loop_counter"
               OpName %656 "indexable"
               OpName %666 "param"
               OpName %668 "param"
               OpName %691 "indexable"
               OpName %697 "indexable"
               OpName %711 "indexable"
               OpName %714 "GLF_live9coord"
               OpName %736 "param"
               OpName %738 "param"
               OpName %743 "GLF_live9i"
               OpName %744 "GLF_live9_looplimiter0"
               OpName %745 "GLF_live9coord"
               OpName %783 "_injected_loop_counter"
               OpName %839 "_injected_loop_counter"
               OpName %847 "GLF_live3coord"
               OpName %864 "GLF_live6_looplimiter2"
               OpName %875 "GLF_live3uvstep"
               OpName %876 "GLF_live3res"
               OpName %881 "GLF_live3_looplimiter1"
               OpName %882 "GLF_live3i"
               OpName %917 "GLF_live9coord"
               OpName %947 "GLF_live3_looplimiter0"
               OpName %951 "_injected_loop_counter"
               OpName %970 "GLF_live3j"
               OpName %1002 "GLF_live3tex"
               OpName %1030 "indexable"
               OpName %1090 "GLF_live8_looplimiter0"
               OpName %1113 "param"
               OpName %1115 "param"
               OpName %1124 "_injected_loop_counter"
               OpName %1145 "GLF_live4grey"
               OpName %1163 "GLF_live8pos"
               OpName %1166 "buf1"
               OpMemberName %1166 0 "GLF_live8resolution"
               OpName %1168 ""
               OpName %1173 "GLF_live8lin"
               OpName %1184 "GLF_live8iters"
               OpName %1194 "GLF_live8v"
               OpName %1196 "GLF_live8i"
               OpName %1198 "GLF_live8_looplimiter0"
               OpName %1229 "indexable"
               OpName %1283 "GLF_live6_looplimiter1"
               OpName %1284 "_injected_loop_counter"
               OpName %1342 "_injected_loop_counter"
               OpName %1412 "i"
               OpName %1413 "uvstep"
               OpName %1421 "GLF_merged3_0_1_1_1_1_4_2_2_6hrefhuvstep"
               OpName %1425 "slope"
               OpName %1455 "GLF_merged2_0_2_5_2_1_5coordslope"
               OpName %1463 "coord"
               OpName %1467 "_injected_loop_counter"
               OpName %1480 "refh"
               OpName %1481 "tex"
               OpName %1508 "_injected_loop_counter"
               OpName %1544 "h"
               OpName %1560 "GLF_live8i"
               OpName %1562 "GLF_live8v"
               OpName %1564 "GLF_live8iters"
               OpName %1566 "GLF_live8_looplimiter0"
               OpName %1588 "_injected_loop_counter"
               OpName %1613 "GLF_live0data"
               OpName %1658 "GLF_live9i"
               OpName %1660 "GLF_live9_looplimiter0"
               OpName %1661 "GLF_live9coord"
               OpName %1723 "GLF_live0_looplimiter2"
               OpName %1724 "GLF_live0i"
               OpName %1775 "GLF_live0_looplimiter1"
               OpName %1779 "_injected_loop_counter"
               OpName %1787 "GLF_live0j"
               OpName %1844 "GLF_live0doSwap"
               OpName %1849 "param"
               OpName %1852 "param"
               OpName %1859 "GLF_live0temp"
               OpName %1919 "GLF_live7p"
               OpName %1923 "GLF_live7directions"
               OpName %1946 "GLF_live7j"
               OpName %1947 "GLF_live7canwalk"
               OpName %1948 "GLF_live7i"
               OpName %1950 "GLF_live7p"
               OpName %1954 "GLF_live7_looplimiter1"
               OpName %1959 "_injected_loop_counter"
               OpName %2018 "GLF_live9coord"
               OpName %2043 "GLF_live6treeIndex"
               OpName %2044 "GLF_live6baseIndex"
               OpName %2046 "GLF_live6data"
               OpName %2047 "_injected_loop_counter"
               OpName %2059 "GLF_live6_looplimiter0"
               OpName %2094 "_injected_loop_counter"
               OpName %2104 "param"
               OpName %2108 "param"
               OpName %2116 "_injected_loop_counter"
               OpName %2151 "param"
               OpName %2154 "param"
               OpName %2170 "_injected_loop_counter"
               OpName %2193 "GLF_live9coord"
               OpName %2197 "GLF_live9res"
               OpName %2209 "GLF_live9i"
               OpName %2210 "GLF_live9_looplimiter0"
               OpName %2253 "_injected_loop_counter"
               OpName %2324 "GLF_live9tex"
               OpName %2350 "GLF_live5i"
               OpName %2352 "GLF_live5coord"
               OpName %2358 "GLF_live5texel"
               OpName %2364 "GLF_live5_looplimiter0"
               OpName %2407 "GLF_live7p"
               OpName %2411 "GLF_live7d"
               OpName %2423 "_injected_loop_counter"
               OpName %2462 "_injected_loop_counter"
               OpName %2491 "GLF_live5tex"
               OpName %2495 "_injected_loop_counter"
               OpName %2568 "GLF_live4grey"
               OpName %2577 "GLF_live8pos"
               OpName %2583 "GLF_live8lin"
               OpName %2593 "GLF_live8iters"
               OpName %2600 "GLF_live8v"
               OpName %2601 "GLF_live8i"
               OpName %2603 "GLF_live8_looplimiter0"
               OpName %2620 "_injected_loop_counter"
               OpName %2643 "indexable"
               OpName %2668 "GLF_live6treeIndex"
               OpName %2669 "GLF_live6baseIndex"
               OpName %2671 "GLF_live6data"
               OpName %2686 "param"
               OpName %2689 "param"
               OpName %2777 "_injected_loop_counter"
               OpName %2839 "_injected_loop_counter"
               OpName %2864 "GLF_live7_looplimiter2"
               OpName %2865 "GLF_live7j"
               OpName %2867 "GLF_live7canwalk"
               OpName %2868 "GLF_live7i"
               OpName %2869 "GLF_live7p"
               OpName %2887 "GLF_live7_looplimiter1"
               OpName %2924 "_injected_loop_counter"
               OpName %2956 "GLF_live8i"
               OpName %2958 "GLF_live8v"
               OpName %2959 "GLF_live8iters"
               OpName %2961 "GLF_live8_looplimiter0"
               OpName %3055 "GLF_live1_looplimiter1"
               OpName %3056 "GLF_merged2_0_1_22_1_1_12GLF_live1_looplimiter1GLF_live1top"
               OpName %3059 "GLF_live1top"
               OpName %3064 "_injected_loop_counter"
               OpName %3079 "GLF_live1h"
               OpName %3082 "GLF_live1stack"
               OpName %3105 "GLF_live1l"
               OpName %3189 "GLF_live1p"
               OpName %3190 "param"
               OpName %3192 "param"
               OpName %3201 "GLF_live5i"
               OpName %3203 "GLF_live5coord"
               OpName %3207 "GLF_live5_looplimiter0"
               OpName %3221 "GLF_live5texel"
               OpName %3317 "_injected_loop_counter"
               OpName %3383 "GLF_live6result"
               OpName %3385 "GLF_live6count"
               OpName %3401 "GLF_live8pos"
               OpName %3410 "GLF_live8lin"
               OpName %3420 "GLF_live8iters"
               OpName %3427 "GLF_live8v"
               OpName %3431 "GLF_live8i"
               OpName %3433 "GLF_live8_looplimiter0"
               OpName %3449 "_injected_loop_counter"
               OpName %3473 "indexable"
               OpName %3486 "_GLF_color"
               OpDecorate %43 RelaxedPrecision
               OpDecorate %116 RelaxedPrecision
               OpDecorate %128 RelaxedPrecision
               OpDecorate %146 RelaxedPrecision
               OpDecorate %158 RelaxedPrecision
               OpMemberDecorate %199 0 Offset 0
               OpDecorate %199 Block
               OpDecorate %201 DescriptorSet 0
               OpDecorate %201 Binding 0
               OpDecorate %281 BuiltIn FragCoord
               OpDecorate %351 RelaxedPrecision
               OpMemberDecorate %352 0 Offset 0
               OpDecorate %352 Block
               OpDecorate %848 RelaxedPrecision
               OpDecorate %849 RelaxedPrecision
               OpDecorate %851 RelaxedPrecision
               OpDecorate %1002 RelaxedPrecision
               OpDecorate %1002 DescriptorSet 0
               OpDecorate %1002 Binding 3
               OpDecorate %1003 RelaxedPrecision
               OpDecorate %1017 RelaxedPrecision
               OpDecorate %1085 RelaxedPrecision
               OpMemberDecorate %1166 0 Offset 0
               OpDecorate %1166 Block
               OpDecorate %1168 DescriptorSet 0
               OpDecorate %1168 Binding 1
               OpDecorate %1481 RelaxedPrecision
               OpDecorate %1481 DescriptorSet 0
               OpDecorate %1481 Binding 5
               OpDecorate %1482 RelaxedPrecision
               OpDecorate %1486 RelaxedPrecision
               OpDecorate %1491 RelaxedPrecision
               OpDecorate %1497 RelaxedPrecision
               OpDecorate %1499 RelaxedPrecision
               OpDecorate %1500 RelaxedPrecision
               OpDecorate %1502 RelaxedPrecision
               OpDecorate %1505 RelaxedPrecision
               OpDecorate %1506 RelaxedPrecision
               OpDecorate %1507 RelaxedPrecision
               OpDecorate %1545 RelaxedPrecision
               OpDecorate %1548 RelaxedPrecision
               OpDecorate %1549 RelaxedPrecision
               OpDecorate %1550 RelaxedPrecision
               OpDecorate %2194 RelaxedPrecision
               OpDecorate %2195 RelaxedPrecision
               OpDecorate %2196 RelaxedPrecision
               OpDecorate %2324 RelaxedPrecision
               OpDecorate %2324 DescriptorSet 0
               OpDecorate %2324 Binding 2
               OpDecorate %2325 RelaxedPrecision
               OpDecorate %2327 RelaxedPrecision
               OpDecorate %2491 RelaxedPrecision
               OpDecorate %2491 DescriptorSet 0
               OpDecorate %2491 Binding 4
               OpDecorate %2492 RelaxedPrecision
               OpDecorate %2494 RelaxedPrecision
               OpDecorate %2571 RelaxedPrecision
               OpDecorate %2578 RelaxedPrecision
               OpDecorate %2579 RelaxedPrecision
               OpDecorate %2719 RelaxedPrecision
               OpDecorate %2755 RelaxedPrecision
               OpDecorate %2768 RelaxedPrecision
               OpDecorate %2800 RelaxedPrecision
               OpDecorate %2810 RelaxedPrecision
               OpDecorate %2822 RelaxedPrecision
               OpDecorate %2936 RelaxedPrecision
               OpDecorate %3005 RelaxedPrecision
               OpDecorate %3030 RelaxedPrecision
               OpDecorate %3033 RelaxedPrecision
               OpDecorate %3034 RelaxedPrecision
               OpDecorate %3304 RelaxedPrecision
               OpDecorate %3306 RelaxedPrecision
               OpDecorate %3402 RelaxedPrecision
               OpDecorate %3403 RelaxedPrecision
               OpDecorate %3486 Location 0
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeInt 32 1
          %7 = OpTypeStruct %6 %6 %6
          %8 = OpTypePointer Function %7
          %9 = OpTypePointer Function %6
         %10 = OpTypeFunction %2 %8 %9
         %15 = OpTypeFloat 32
         %16 = OpTypeVector %15 2
         %17 = OpTypePointer Function %16
         %18 = OpTypeVector %15 4
         %19 = OpTypePointer Function %18
         %20 = OpTypeBool
         %21 = OpTypeFunction %20 %17 %19
         %26 = OpTypePointer Function %15
         %27 = OpTypeFunction %20 %26 %26
         %32 = OpTypeFunction %2 %9 %9
         %37 = OpTypeFunction %6 %9 %9
         %42 = OpTypePointer Private %18
         %43 = OpVariable %42 Private
         %44 = OpConstant %15 2.5
         %45 = OpConstant %15 4.9000001
         %46 = OpConstant %15 -388.575989
         %47 = OpConstant %15 -4513.40723
         %48 = OpConstantComposite %18 %44 %45 %46 %47
         %49 = OpVariable %42 Private
         %50 = OpConstant %15 -9641.12207
         %51 = OpConstant %15 -7852.23242
         %52 = OpConstant %15 9.60000038
         %53 = OpConstant %15 -4.19999981
         %54 = OpConstantComposite %18 %50 %51 %52 %53
         %55 = OpTypeInt 32 0
         %56 = OpConstant %55 10
         %57 = OpTypeArray %7 %56
         %58 = OpTypePointer Private %57
         %59 = OpVariable %58 Private
         %60 = OpConstant %6 -72922
         %61 = OpConstant %6 -12556
         %62 = OpConstant %6 153035
         %63 = OpConstantComposite %7 %60 %61 %62
         %64 = OpConstant %6 57292
         %65 = OpConstant %6 -83170
         %66 = OpConstant %6 3399
         %67 = OpConstantComposite %7 %64 %65 %66
         %68 = OpConstant %6 -60381
         %69 = OpConstant %6 4364
         %70 = OpConstant %6 -89524
         %71 = OpConstantComposite %7 %68 %69 %70
         %72 = OpConstant %6 -21901
         %73 = OpConstant %6 -4188
         %74 = OpConstant %6 -79208
         %75 = OpConstantComposite %7 %72 %73 %74
         %76 = OpConstant %6 47515
         %77 = OpConstant %6 78347
         %78 = OpConstant %6 93313
         %79 = OpConstantComposite %7 %76 %77 %78
         %80 = OpConstant %6 80829
         %81 = OpConstant %6 -73295
         %82 = OpConstant %6 69600
         %83 = OpConstantComposite %7 %80 %81 %82
         %84 = OpConstant %6 -63382
         %85 = OpConstant %6 73904
         %86 = OpConstant %6 89282
         %87 = OpConstantComposite %7 %84 %85 %86
         %88 = OpConstant %6 23405
         %89 = OpConstant %6 -47026
         %90 = OpConstant %6 -50897
         %91 = OpConstantComposite %7 %88 %89 %90
         %92 = OpConstantComposite %57 %63 %67 %71 %75 %79 %83 %87 %91 %71 %83
         %93 = OpConstant %55 256
         %94 = OpTypeArray %6 %93
         %95 = OpTypePointer Private %94
         %96 = OpVariable %95 Private
         %97 = OpConstant %6 -72539
         %98 = OpConstant %6 -81926
         %99 = OpConstant %6 -80168
        %100 = OpConstant %6 -49970
        %101 = OpConstant %6 53370
        %102 = OpConstant %6 -7397
        %103 = OpConstant %6 0
        %104 = OpConstant %6 -21223
        %105 = OpConstant %6 -23013
        %106 = OpConstant %6 9658
        %107 = OpConstant %6 62594
        %108 = OpConstant %6 31860
        %109 = OpConstant %6 -91209
        %110 = OpConstant %6 -81520
        %111 = OpConstant %6 -37395
        %112 = OpConstant %6 -82120
        %113 = OpConstant %6 49853
        %114 = OpConstant %6 91224
        %115 = OpConstantComposite %94 %97 %98 %99 %100 %101 %102 %103 %104 %105 %103 %106 %107 %108 %109 %110 %111 %112 %113 %114 %107 %110 %105 %112 %103 %113 %114 %109 %104 %111 %98 %106 %100 %99 %97 %102 %103 %101 %108 %114 %113 %100 %112 %98 %111 %105 %103 %109 %110 %99 %108 %104 %103 %97 %101 %106 %102 %107 %105 %101 %106 %97 %100 %109 %113 %104 %114 %108 %103 %112 %102 %98 %107 %103 %110 %111 %99 %103 %105 %108 %100 %113 %103 %114 %111 %98 %110 %106 %112 %102 %99 %101 %97 %107 %109 %104 %99 %113 %106 %98 %110 %107 %100 %111 %104 %103 %105 %109 %101 %108 %97 %112 %102 %114 %103 %98 %110 %97 %104 %100 %103 %113 %102 %108 %105 %101 %111 %99 %114 %112 %109 %107 %106 %103 %105 %104 %97 %106 %107 %110 %114 %99 %98 %113 %101 %100 %112 %108 %109 %102 %111 %103 %103 %106 %100 %111 %107 %105 %104 %102 %114 %103 %103 %112 %98 %113 %101 %109 %99 %110 %108 %97 %107 %113 %101 %105 %109 %103 %103 %106 %98 %102 %110 %100 %99 %108 %112 %114 %104 %97 %111 %97 %99 %106 %102 %101 %105 %113 %109 %107 %111 %104 %110 %112 %103 %98 %108 %103 %114 %100 %103 %107 %105 %98 %99 %97 %101 %111 %102 %104 %109 %106 %110 %100 %114 %113 %112 %108 %103 %110 %98 %106 %112 %107 %103 %97 %99 %104 %100 %109 %113 %114 %111 %103 %101 %102 %108 %105 %101 %99 %103 %107 %112 %98 %108 %102 %113
        %116 = OpVariable %42 Private
        %117 = OpConstant %15 -6379.16309
        %118 = OpConstant %15 -23397.5605
        %119 = OpConstant %15 -23319.8828
        %120 = OpConstant %15 1359.16565
        %121 = OpConstantComposite %18 %117 %118 %119 %120
        %122 = OpVariable %42 Private
        %123 = OpConstant %15 -4.30000019
        %124 = OpConstant %15 -2342.95776
        %125 = OpConstant %15 -88.1999969
        %126 = OpConstant %15 922.78302
        %127 = OpConstantComposite %18 %123 %124 %125 %126
        %128 = OpVariable %42 Private
        %129 = OpConstant %15 5.5999999
        %130 = OpConstant %15 7.69999981
        %131 = OpConstant %15 -2.29999995
        %132 = OpConstant %15 -7.9000001
        %133 = OpConstantComposite %18 %129 %130 %131 %132
        %134 = OpTypeArray %6 %56
        %135 = OpTypePointer Private %134
        %136 = OpVariable %135 Private
        %137 = OpConstant %6 -32190
        %138 = OpConstant %6 10
        %139 = OpConstant %6 18897
        %140 = OpConstant %6 5819
        %141 = OpConstant %6 -9854
        %142 = OpConstant %6 75983
        %143 = OpConstant %6 42633
        %144 = OpConstant %6 -55505
        %145 = OpConstantComposite %134 %137 %138 %139 %140 %141 %142 %143 %138 %144 %138
        %146 = OpVariable %42 Private
        %147 = OpConstant %15 -98.8099976
        %148 = OpConstant %15 87.8199997
        %149 = OpConstant %15 7440.45508
        %150 = OpConstant %15 -538.874023
        %151 = OpConstantComposite %18 %147 %148 %149 %150
        %152 = OpVariable %42 Private
        %153 = OpConstant %15 -789727.062
        %154 = OpConstant %15 -1570303.62
        %155 = OpConstant %15 -19545.498
        %156 = OpConstant %15 -258855.75
        %157 = OpConstantComposite %18 %153 %154 %155 %156
        %158 = OpVariable %42 Private
        %159 = OpConstant %15 350.908997
        %160 = OpConstant %15 9100.00781
        %161 = OpConstant %15 91.8399963
        %162 = OpConstant %15 69.3000031
        %163 = OpConstantComposite %18 %159 %160 %161 %162
        %164 = OpTypeStruct %134
        %165 = OpTypePointer Private %164
        %166 = OpVariable %165 Private
        %167 = OpConstant %6 4661
        %168 = OpConstant %6 20697
        %169 = OpConstant %6 9867
        %170 = OpConstant %6 23856
        %171 = OpConstant %6 96705
        %172 = OpConstant %6 -65415
        %173 = OpConstant %6 -11662
        %174 = OpConstant %6 80614
        %175 = OpConstant %6 78585
        %176 = OpConstant %6 29668
        %177 = OpConstantComposite %134 %167 %168 %169 %170 %171 %172 %173 %174 %175 %176
        %178 = OpConstantComposite %164 %177
        %181 = OpConstant %6 1
        %182 = OpConstant %6 -1
        %184 = OpConstantFalse %20
        %188 = OpConstant %6 2
        %190 = OpConstant %55 0
        %199 = OpTypeStruct %16
        %200 = OpTypePointer Uniform %199
        %201 = OpVariable %200 Uniform
        %202 = OpTypePointer Uniform %15
        %205 = OpConstant %55 1
        %211 = OpConstantTrue %20
        %234 = OpConstant %15 1.29999995
        %249 = OpConstant %15 131.602997
        %251 = OpConstant %55 2
        %273 = OpConstant %55 3
        %280 = OpTypePointer Input %18
        %281 = OpVariable %280 Input
        %282 = OpTypePointer Input %15
        %285 = OpConstant %15 0
        %292 = OpConstant %6 5
        %332 = OpConstant %15 1
        %333 = OpConstantComposite %18 %285 %332 %285 %332
        %349 = OpTypePointer Private %15
        %352 = OpTypeStruct %16
        %353 = OpTypePointer PushConstant %352
        %354 = OpVariable %353 PushConstant
        %355 = OpTypePointer PushConstant %15
        %358 = OpConstant %15 2
        %361 = OpTypePointer Function %20
        %380 = OpConstant %6 9
        %382 = OpTypePointer Private %6
        %441 = OpConstant %6 6
        %463 = OpConstant %15 -25941.168
        %464 = OpConstant %15 671.140015
        %465 = OpConstantComposite %16 %463 %464
        %467 = OpConstant %6 -61565
        %470 = OpConstant %15 1600.21265
        %471 = OpConstant %15 -10496.2227
        %472 = OpConstant %15 -720.72699
        %473 = OpConstant %15 -676.007019
        %474 = OpConstantComposite %18 %470 %471 %472 %473
        %476 = OpConstant %6 3
        %488 = OpConstant %6 27872
        %489 = OpTypeVector %6 2
        %490 = OpTypePointer Function %489
        %492 = OpConstant %6 374
        %493 = OpConstant %6 8903
        %494 = OpConstantComposite %489 %492 %493
        %505 = OpConstant %6 8
        %544 = OpConstant %6 16
        %547 = OpConstant %6 255
        %634 = OpConstant %55 8
        %635 = OpTypeArray %18 %634
        %636 = OpConstant %15 4
        %637 = OpConstant %15 20
        %638 = OpConstantComposite %18 %636 %636 %637 %636
        %639 = OpConstantComposite %18 %636 %636 %636 %637
        %640 = OpConstantComposite %18 %636 %637 %637 %636
        %641 = OpConstant %15 8
        %642 = OpConstantComposite %18 %637 %636 %636 %641
        %643 = OpConstant %15 6
        %644 = OpConstantComposite %18 %641 %643 %636 %358
        %645 = OpConstant %15 12
        %646 = OpConstantComposite %18 %358 %645 %358 %636
        %647 = OpConstant %15 16
        %648 = OpConstantComposite %18 %647 %358 %636 %636
        %649 = OpConstant %15 22
        %650 = OpConstantComposite %18 %645 %649 %636 %636
        %651 = OpConstantComposite %635 %638 %639 %640 %642 %644 %646 %648 %650
        %653 = OpConstant %6 7
        %655 = OpTypePointer Function %635
        %659 = OpTypeMatrix %18 4
        %660 = OpConstantComposite %18 %332 %285 %285 %285
        %661 = OpConstantComposite %18 %285 %332 %285 %285
        %662 = OpConstantComposite %18 %285 %285 %332 %285
        %663 = OpConstantComposite %18 %285 %285 %285 %332
        %664 = OpConstantComposite %659 %660 %661 %662 %663
        %672 = OpConstant %55 16
        %673 = OpTypeArray %18 %672
        %674 = OpConstant %15 0.5
        %675 = OpConstantComposite %18 %674 %285 %285 %332
        %676 = OpConstantComposite %18 %285 %674 %285 %332
        %677 = OpConstantComposite %18 %674 %674 %285 %332
        %678 = OpConstantComposite %18 %285 %285 %674 %332
        %679 = OpConstantComposite %18 %674 %285 %674 %332
        %680 = OpConstantComposite %18 %285 %674 %674 %332
        %681 = OpConstantComposite %18 %674 %674 %674 %332
        %682 = OpConstantComposite %18 %332 %285 %285 %332
        %683 = OpConstantComposite %18 %332 %332 %285 %332
        %684 = OpConstantComposite %18 %285 %285 %332 %332
        %685 = OpConstantComposite %18 %332 %285 %332 %332
        %686 = OpConstantComposite %18 %285 %332 %332 %332
        %687 = OpConstantComposite %18 %332 %332 %332 %332
        %688 = OpConstantComposite %673 %663 %675 %676 %677 %678 %679 %680 %681 %663 %682 %333 %683 %684 %685 %686 %687
        %705 = OpConstant %6 11
        %708 = OpConstant %6 15
        %710 = OpTypePointer Function %673
        %715 = OpConstant %15 2227.85938
        %716 = OpConstant %15 5712.34668
        %717 = OpConstantComposite %16 %715 %716
        %746 = OpConstant %15 -8516.46094
        %747 = OpConstantComposite %16 %674 %746
        %850 = OpConstantComposite %16 %285 %285
        %852 = OpTypeMatrix %18 3
        %862 = OpConstant %15 0.00390625
        %877 = OpConstantComposite %18 %285 %285 %285 %285
        %894 = OpConstant %6 4
        %897 = OpTypeVector %20 3
        %918 = OpConstant %15 842.364014
        %919 = OpConstant %15 -6663.18945
        %920 = OpConstantComposite %16 %918 %919
        %999 = OpTypeImage %15 2D 0 0 0 1 Unknown
       %1000 = OpTypeSampledImage %999
       %1001 = OpTypePointer UniformConstant %1000
       %1002 = OpVariable %1001 UniformConstant
       %1018 = OpConstant %55 9
       %1019 = OpTypeArray %15 %1018
       %1020 = OpConstant %15 -0.25
       %1021 = OpConstant %15 -0.5
       %1022 = OpConstant %15 -1
       %1023 = OpConstantComposite %1019 %332 %674 %1020 %674 %332 %1021 %1020 %1021 %1022
       %1029 = OpTypePointer Function %1019
       %1077 = OpTypeVector %15 3
       %1146 = OpConstant %15 0.899999976
       %1150 = OpConstant %6 150
       %1166 = OpTypeStruct %16
       %1167 = OpTypePointer Uniform %1166
       %1168 = OpVariable %1167 Uniform
       %1169 = OpTypePointer Uniform %16
       %1176 = OpConstant %15 10
       %1195 = OpConstant %6 100
       %1216 = OpConstant %6 1000
       %1236 = OpConstant %6 180
       %1279 = OpConstant %6 210
       %1322 = OpConstant %6 240
       %1360 = OpConstant %6 270
       %1414 = OpConstantComposite %16 %862 %862
       %1426 = OpConstant %15 0.0078125
       %1454 = OpTypePointer Function %1077
       %1481 = OpVariable %1001 UniformConstant
       %1483 = OpConstant %15 5.19999981
       %1487 = OpConstant %15 53.4199982
       %1490 = OpConstant %15 9239.23438
       %1494 = OpConstant %15 -7156.98828
       %1498 = OpConstantComposite %897 %211 %184 %211
       %1501 = OpConstant %15 -60.8800011
       %1503 = OpTypeVector %20 2
       %1504 = OpConstantComposite %1503 %211 %184
       %1554 = OpConstant %15 -66.9899979
       %1561 = OpConstant %6 41046
       %1563 = OpConstant %6 -730490
       %1565 = OpConstant %6 -31678
       %1611 = OpTypeArray %15 %56
       %1612 = OpTypePointer Function %1611
       %1614 = OpConstant %15 -8.30000019
       %1615 = OpConstant %15 4182.00342
       %1616 = OpConstant %15 -3281.4104
       %1617 = OpConstant %15 9421.54102
       %1618 = OpConstant %15 -699.039978
       %1619 = OpConstant %15 -9.5
       %1620 = OpConstant %15 -582.81897
       %1621 = OpConstant %15 49.8800011
       %1622 = OpConstant %15 60.9399986
       %1623 = OpConstantComposite %1611 %1614 %1615 %1616 %1617 %1618 %1619 %1620 %1621 %1622 %1616
       %1650 = OpTypeVector %20 4
       %1659 = OpConstant %6 5448
       %1662 = OpConstant %15 568.793823
       %1663 = OpConstant %15 -13450.4189
       %1664 = OpConstantComposite %16 %1662 %1663
       %1874 = OpConstant %15 -5.5999999
       %1920 = OpConstant %6 85638
       %1921 = OpConstant %6 -26075
       %1922 = OpConstantComposite %489 %1920 %1921
       %1926 = OpConstant %6 14
       %1949 = OpConstant %6 661516001
       %1951 = OpConstant %6 45313
       %1952 = OpConstant %6 86426
       %1953 = OpConstantComposite %489 %1951 %1952
       %2019 = OpConstant %15 19.1299992
       %2020 = OpConstant %15 -4261.29688
       %2021 = OpConstantComposite %16 %2019 %2020
       %2045 = OpConstant %6 -1636300
       %2105 = OpTypePointer Private %7
       %2198 = OpConstant %15 0.25
       %2199 = OpConstantComposite %18 %2198 %2198 %2198 %2198
       %2324 = OpVariable %1001 UniformConstant
       %2351 = OpConstant %6 -17214
       %2353 = OpConstant %15 443.074005
       %2354 = OpConstantComposite %16 %2353 %44
       %2359 = OpConstant %15 -9906.15234
       %2360 = OpConstant %15 -4.9000001
       %2361 = OpConstant %15 -8865.83496
       %2362 = OpConstant %15 49.2799988
       %2363 = OpConstantComposite %18 %2359 %2360 %2361 %2362
       %2408 = OpConstant %6 -84225
       %2409 = OpConstant %6 19877
       %2410 = OpConstantComposite %489 %2408 %2409
       %2412 = OpConstant %6 -10
       %2475 = OpConstant %15 256
       %2491 = OpVariable %1001 UniformConstant
       %2526 = OpConstant %6 32
       %2569 = OpConstant %15 -145.940994
       %2573 = OpConstant %6 30
       %2646 = OpConstant %15 57.9300003
       %2670 = OpConstant %6 -66975
       %2672 = OpConstant %6 87179
       %2724 = OpConstant %6 60
       %2757 = OpConstant %6 90
       %2770 = OpConstant %6 120
       %2866 = OpConstant %6 86491
       %2870 = OpConstant %6 36866
       %2871 = OpConstant %6 512
       %2872 = OpConstantComposite %489 %2870 %2871
       %2957 = OpConstant %6 -4156
       %2960 = OpConstant %6 5185
       %3060 = OpConstant %6 70927
       %3080 = OpConstant %6 1637733083
       %3081 = OpTypePointer Function %134
       %3083 = OpConstant %6 39409
       %3084 = OpConstant %6 99870
       %3088 = OpConstant %6 -51712
       %3093 = OpConstant %6 -49889
       %3094 = OpConstant %6 -1215037440
       %3095 = OpConstant %6 -7532
       %3096 = OpConstant %6 41082
       %3100 = OpTypeVector %6 4
       %3106 = OpConstant %6 89152
       %3202 = OpConstant %6 -86793
       %3204 = OpConstant %15 -0
       %3205 = OpConstant %15 27.2700005
       %3206 = OpConstantComposite %16 %3204 %3205
       %3212 = OpTypeMatrix %16 2
       %3222 = OpConstant %15 -4750.95166
       %3223 = OpConstant %15 868.190979
       %3224 = OpConstant %15 -59.3699989
       %3384 = OpConstant %6 53013
       %3386 = OpConstant %6 -14340
       %3485 = OpTypePointer Output %18
       %3486 = OpVariable %3485 Output
       %3489 = OpConstant %15 0.03125
          %4 = OpFunction %2 None %3
          %5 = OpLabel
       %1412 = OpVariable %9 Function
       %1413 = OpVariable %17 Function
       %1421 = OpVariable %19 Function
       %1425 = OpVariable %26 Function
       %1431 = OpVariable %19 Function
       %1455 = OpVariable %1454 Function
       %1463 = OpVariable %17 Function
       %1467 = OpVariable %9 Function
       %1480 = OpVariable %26 Function
       %1508 = OpVariable %9 Function
       %1544 = OpVariable %26 Function
       %1551 = OpVariable %26 Function
       %1560 = OpVariable %9 Function
       %1562 = OpVariable %9 Function
       %1564 = OpVariable %9 Function
       %1566 = OpVariable %9 Function
       %1588 = OpVariable %9 Function
       %1613 = OpVariable %1612 Function
       %1658 = OpVariable %9 Function
       %1660 = OpVariable %9 Function
       %1661 = OpVariable %17 Function
       %1723 = OpVariable %9 Function
       %1724 = OpVariable %9 Function
       %1775 = OpVariable %9 Function
       %1779 = OpVariable %9 Function
       %1787 = OpVariable %9 Function
       %1844 = OpVariable %361 Function
       %1849 = OpVariable %26 Function
       %1852 = OpVariable %26 Function
       %1859 = OpVariable %26 Function
       %1919 = OpVariable %490 Function
       %1923 = OpVariable %9 Function
       %1946 = OpVariable %9 Function
       %1947 = OpVariable %361 Function
       %1948 = OpVariable %9 Function
       %1950 = OpVariable %490 Function
       %1954 = OpVariable %9 Function
       %1959 = OpVariable %9 Function
       %2018 = OpVariable %17 Function
       %2043 = OpVariable %9 Function
       %2044 = OpVariable %9 Function
       %2046 = OpVariable %9 Function
       %2047 = OpVariable %9 Function
       %2059 = OpVariable %9 Function
       %2094 = OpVariable %9 Function
       %2104 = OpVariable %8 Function
       %2108 = OpVariable %9 Function
       %2116 = OpVariable %9 Function
       %2151 = OpVariable %8 Function
       %2154 = OpVariable %9 Function
       %2170 = OpVariable %9 Function
       %2193 = OpVariable %17 Function
       %2197 = OpVariable %19 Function
       %2209 = OpVariable %9 Function
       %2210 = OpVariable %9 Function
       %2253 = OpVariable %9 Function
       %2350 = OpVariable %9 Function
       %2352 = OpVariable %17 Function
       %2358 = OpVariable %19 Function
       %2364 = OpVariable %9 Function
       %2407 = OpVariable %490 Function
       %2411 = OpVariable %9 Function
       %2423 = OpVariable %9 Function
       %2462 = OpVariable %9 Function
       %2495 = OpVariable %9 Function
       %2568 = OpVariable %26 Function
       %2577 = OpVariable %17 Function
       %2583 = OpVariable %490 Function
       %2593 = OpVariable %9 Function
       %2600 = OpVariable %9 Function
       %2601 = OpVariable %9 Function
       %2603 = OpVariable %9 Function
       %2620 = OpVariable %9 Function
       %2643 = OpVariable %710 Function
       %2668 = OpVariable %9 Function
       %2669 = OpVariable %9 Function
       %2671 = OpVariable %9 Function
       %2686 = OpVariable %8 Function
       %2689 = OpVariable %9 Function
       %2777 = OpVariable %9 Function
       %2839 = OpVariable %9 Function
       %2864 = OpVariable %9 Function
       %2865 = OpVariable %9 Function
       %2867 = OpVariable %361 Function
       %2868 = OpVariable %9 Function
       %2869 = OpVariable %490 Function
       %2887 = OpVariable %9 Function
       %2924 = OpVariable %9 Function
       %2956 = OpVariable %9 Function
       %2958 = OpVariable %9 Function
       %2959 = OpVariable %9 Function
       %2961 = OpVariable %9 Function
       %3055 = OpVariable %9 Function
       %3056 = OpVariable %490 Function
       %3059 = OpVariable %9 Function
       %3064 = OpVariable %9 Function
       %3079 = OpVariable %9 Function
       %3082 = OpVariable %3081 Function
       %3085 = OpVariable %9 Function
       %3105 = OpVariable %9 Function
       %3189 = OpVariable %9 Function
       %3190 = OpVariable %9 Function
       %3192 = OpVariable %9 Function
       %3201 = OpVariable %9 Function
       %3203 = OpVariable %17 Function
       %3207 = OpVariable %9 Function
       %3221 = OpVariable %19 Function
       %3317 = OpVariable %9 Function
       %3383 = OpVariable %9 Function
       %3385 = OpVariable %9 Function
       %3401 = OpVariable %17 Function
       %3410 = OpVariable %490 Function
       %3420 = OpVariable %9 Function
       %3427 = OpVariable %9 Function
       %3431 = OpVariable %9 Function
       %3433 = OpVariable %9 Function
       %3449 = OpVariable %9 Function
       %3473 = OpVariable %710 Function
               OpStore %43 %48
               OpStore %49 %54
               OpStore %59 %92
               OpStore %96 %115
               OpStore %116 %121
               OpStore %122 %127
               OpStore %128 %133
               OpStore %136 %145
               OpStore %146 %151
               OpStore %152 %157
               OpStore %158 %163
               OpStore %166 %178
               OpStore %1412 %103
               OpStore %1413 %1414
       %1415 = OpAccessChain %282 %281 %190
       %1416 = OpLoad %15 %1415
       %1417 = OpFOrdLessThan %20 %1416 %285
               OpSelectionMerge %1419 None
               OpBranchConditional %1417 %1418 %1419
       %1418 = OpLabel
               OpReturn
       %1419 = OpLabel
       %1422 = OpLoad %16 %1413
       %1423 = OpLoad %18 %1421
       %1424 = OpVectorShuffle %18 %1423 %1422 0 1 4 5
               OpStore %1421 %1424
               OpStore %1425 %1426
               OpBranch %1427
       %1427 = OpLabel
               OpLoopMerge %1429 %1430 None
               OpBranch %1428
       %1428 = OpLabel
               OpSelectionMerge %1433 None
               OpBranchConditional %184 %1432 %1435
       %1432 = OpLabel
       %1434 = OpLoad %18 %1421
               OpStore %1431 %1434
               OpBranch %1433
       %1435 = OpLabel
       %1436 = OpLoad %18 %281
       %1437 = OpLoad %18 %281
       %1438 = OpExtInst %18 %1 FMax %1436 %1437
               OpStore %1431 %1438
               OpBranch %1433
       %1433 = OpLabel
       %1439 = OpAccessChain %26 %1431 %190
       %1440 = OpLoad %15 %1439
       %1441 = OpFOrdLessThan %20 %1440 %285
               OpSelectionMerge %1443 None
               OpBranchConditional %1441 %1442 %1443
       %1442 = OpLabel
               OpReturn
       %1443 = OpLabel
               OpBranch %1430
       %1430 = OpLabel
       %1445 = OpAccessChain %202 %201 %103 %190
       %1446 = OpLoad %15 %1445
       %1447 = OpAccessChain %202 %201 %103 %205
       %1448 = OpLoad %15 %1447
       %1449 = OpFOrdGreaterThan %20 %1446 %1448
               OpBranchConditional %1449 %1427 %1429
       %1429 = OpLabel
               OpBranch %1450
       %1450 = OpLabel
               OpLoopMerge %1452 %1453 None
               OpBranch %1451
       %1451 = OpLabel
       %1456 = OpLoad %15 %1425
       %1457 = OpAccessChain %26 %1455 %251
               OpStore %1457 %1456
               OpBranch %1453
       %1453 = OpLabel
       %1458 = OpAccessChain %202 %201 %103 %190
       %1459 = OpLoad %15 %1458
       %1460 = OpAccessChain %202 %201 %103 %205
       %1461 = OpLoad %15 %1460
       %1462 = OpFOrdGreaterThan %20 %1459 %1461
               OpBranchConditional %1462 %1450 %1452
       %1452 = OpLabel
       %1464 = OpLoad %18 %281
       %1465 = OpVectorShuffle %16 %1464 %1464 0 1
       %1466 = OpVectorTimesScalar %16 %1465 %862
               OpStore %1463 %1466
               OpStore %1467 %103
               OpBranch %1468
       %1468 = OpLabel
               OpLoopMerge %1470 %1471 None
               OpBranch %1472
       %1472 = OpLabel
       %1473 = OpLoad %6 %1467
       %1474 = OpSLessThan %20 %1473 %181
               OpBranchConditional %1474 %1469 %1470
       %1469 = OpLabel
       %1475 = OpLoad %16 %1463
       %1476 = OpLoad %1077 %1455
       %1477 = OpVectorShuffle %1077 %1476 %1475 3 4 2
               OpStore %1455 %1477
               OpBranch %1471
       %1471 = OpLabel
       %1478 = OpLoad %6 %1467
       %1479 = OpIAdd %6 %1478 %181
               OpStore %1467 %1479
               OpBranch %1468
       %1470 = OpLabel
       %1482 = OpLoad %1000 %1481
       %1484 = OpAccessChain %26 %1455 %205
       %1485 = OpLoad %15 %1484
       %1486 = OpCompositeConstruct %16 %1483 %1485
       %1488 = OpAccessChain %26 %1455 %205
       %1489 = OpLoad %15 %1488
       %1491 = OpCompositeConstruct %1077 %1487 %1489 %1490
       %1492 = OpAccessChain %26 %1455 %190
       %1493 = OpLoad %15 %1492
       %1495 = OpAccessChain %26 %1455 %251
       %1496 = OpLoad %15 %1495
       %1497 = OpCompositeConstruct %1077 %1493 %1494 %1496
       %1499 = OpSelect %1077 %1498 %1497 %1491
       %1500 = OpCompositeExtract %15 %1499 0
       %1502 = OpCompositeConstruct %16 %1500 %1501
       %1505 = OpSelect %16 %1504 %1502 %1486
       %1506 = OpImageSampleImplicitLod %18 %1482 %1505
       %1507 = OpCompositeExtract %15 %1506 1
               OpStore %1480 %1507
               OpStore %1508 %103
               OpBranch %1509
       %1509 = OpLabel
               OpLoopMerge %1511 %1512 None
               OpBranch %1513
       %1513 = OpLabel
       %1514 = OpLoad %6 %1508
       %1515 = OpINotEqual %20 %1514 %181
               OpBranchConditional %1515 %1510 %1511
       %1510 = OpLabel
       %1516 = OpLoad %15 %1480
       %1517 = OpAccessChain %26 %1421 %205
               OpStore %1517 %1516
               OpBranch %1512
       %1512 = OpLabel
       %1518 = OpLoad %6 %1508
       %1519 = OpIAdd %6 %1518 %181
               OpStore %1508 %1519
               OpBranch %1509
       %1511 = OpLabel
       %1520 = OpLoad %18 %1421
       %1521 = OpVectorShuffle %16 %1520 %1520 2 3
       %1522 = OpLoad %1077 %1455
       %1523 = OpVectorShuffle %16 %1522 %1522 0 1
       %1524 = OpFSub %16 %1523 %1521
       %1525 = OpLoad %1077 %1455
       %1526 = OpVectorShuffle %1077 %1525 %1524 3 4 2
               OpStore %1455 %1526
               OpSelectionMerge %1528 None
               OpBranchConditional %184 %1527 %1529
       %1527 = OpLabel
               OpBranch %1528
       %1529 = OpLabel
       %1530 = OpAccessChain %202 %201 %103 %190
       %1531 = OpLoad %15 %1530
       %1532 = OpAccessChain %202 %201 %103 %205
       %1533 = OpLoad %15 %1532
       %1534 = OpFOrdGreaterThan %20 %1531 %1533
               OpSelectionMerge %1536 None
               OpBranchConditional %1534 %1535 %1537
       %1535 = OpLabel
               OpBranch %1536
       %1537 = OpLabel
       %1538 = OpAccessChain %26 %1455 %251
       %1539 = OpLoad %15 %1538
       %1540 = OpAccessChain %26 %1421 %205
       %1541 = OpLoad %15 %1540
       %1542 = OpFAdd %15 %1541 %1539
       %1543 = OpAccessChain %26 %1421 %205
               OpStore %1543 %1542
               OpBranch %1536
       %1536 = OpLabel
               OpBranch %1528
       %1528 = OpLabel
       %1545 = OpLoad %1000 %1481
       %1546 = OpLoad %1077 %1455
       %1547 = OpVectorShuffle %16 %1546 %1546 0 1
       %1548 = OpImageSampleImplicitLod %18 %1545 %1547
       %1549 = OpCompositeExtract %15 %1548 1
       %1550 = OpFDiv %15 %1549 %332
               OpStore %1544 %1550
               OpSelectionMerge %1553 None
               OpBranchConditional %184 %1552 %1555
       %1552 = OpLabel
               OpStore %1551 %1554
               OpBranch %1553
       %1555 = OpLabel
       %1556 = OpLoad %15 %1544
       %1557 = OpAccessChain %26 %1421 %190
               OpStore %1557 %1556
               OpStore %1551 %1556
               OpBranch %1553
       %1553 = OpLabel
               OpSelectionMerge %1559 None
               OpBranchConditional %184 %1558 %1559
       %1558 = OpLabel
               OpStore %1560 %1561
               OpStore %1562 %1563
               OpStore %1564 %1565
               OpStore %1566 %103
               OpStore %1560 %103
               OpBranch %1567
       %1567 = OpLabel
               OpLoopMerge %1569 %1570 None
               OpBranch %1571
       %1571 = OpLabel
       %1572 = OpLoad %6 %1560
       %1573 = OpLoad %6 %1564
       %1574 = OpSLessThan %20 %1572 %1573
               OpBranchConditional %1574 %1568 %1569
       %1568 = OpLabel
       %1575 = OpLoad %6 %1566
       %1576 = OpSGreaterThanEqual %20 %1575 %476
               OpSelectionMerge %1578 None
               OpBranchConditional %1576 %1577 %1578
       %1577 = OpLabel
               OpBranch %1569
       %1578 = OpLabel
       %1580 = OpAccessChain %282 %281 %190
       %1581 = OpLoad %15 %1580
       %1582 = OpAccessChain %202 %201 %103 %190
       %1583 = OpLoad %15 %1582
       %1584 = OpFOrdLessThan %20 %1581 %1583
               OpSelectionMerge %1586 None
               OpBranchConditional %1584 %1585 %1586
       %1585 = OpLabel
               OpBranch %1570
       %1586 = OpLabel
               OpStore %1588 %181
               OpBranch %1589
       %1589 = OpLabel
               OpLoopMerge %1591 %1592 None
               OpBranch %1593
       %1593 = OpLabel
       %1594 = OpLoad %6 %1588
       %1595 = OpAccessChain %202 %201 %103 %190
       %1596 = OpLoad %15 %1595
       %1597 = OpConvertFToS %6 %1596
       %1598 = OpSGreaterThan %20 %1594 %1597
               OpBranchConditional %1598 %1590 %1591
       %1590 = OpLabel
       %1599 = OpLoad %6 %1566
       %1600 = OpIAdd %6 %1599 %181
               OpStore %1566 %1600
               OpBranch %1592
       %1592 = OpLabel
       %1601 = OpLoad %6 %1588
       %1602 = OpISub %6 %1601 %181
               OpStore %1588 %1602
               OpBranch %1589
       %1591 = OpLabel
       %1603 = OpLoad %6 %1562
       %1604 = OpIMul %6 %894 %1603
       %1605 = OpLoad %6 %1562
       %1606 = OpISub %6 %1216 %1605
       %1607 = OpIMul %6 %1604 %1606
       %1608 = OpSDiv %6 %1607 %1216
               OpStore %1562 %1608
               OpBranch %1570
       %1570 = OpLabel
       %1609 = OpLoad %6 %1560
       %1610 = OpIAdd %6 %1609 %181
               OpStore %1560 %1610
               OpBranch %1567
       %1569 = OpLabel
               OpStore %1613 %1623
       %1624 = OpAccessChain %202 %201 %103 %190
       %1625 = OpLoad %15 %1624
       %1626 = OpAccessChain %1169 %201 %103
       %1627 = OpLoad %16 %1626
       %1628 = OpAccessChain %1169 %201 %103
       %1629 = OpLoad %16 %1628
       %1630 = OpCompositeExtract %15 %1629 0
       %1631 = OpCompositeExtract %15 %1629 1
       %1632 = OpCompositeConstruct %1077 %1630 %1631 %332
       %1633 = OpCompositeExtract %15 %1632 0
       %1634 = OpCompositeExtract %15 %1632 1
       %1635 = OpCompositeConstruct %16 %1633 %1634
       %1636 = OpAccessChain %1169 %201 %103
       %1637 = OpLoad %16 %1636
       %1638 = OpCompositeExtract %15 %1637 0
       %1639 = OpCompositeExtract %15 %1637 1
       %1640 = OpCompositeConstruct %1077 %1638 %1639 %332
       %1641 = OpCompositeExtract %15 %1640 0
       %1642 = OpCompositeExtract %15 %1640 1
       %1643 = OpCompositeConstruct %16 %1641 %1642
       %1644 = OpExtInst %16 %1 FMin %1635 %1643
       %1645 = OpAccessChain %1169 %201 %103
       %1646 = OpLoad %16 %1645
       %1647 = OpExtInst %16 %1 FClamp %1627 %1644 %1646
       %1648 = OpCompositeExtract %15 %1647 1
       %1649 = OpFOrdGreaterThan %20 %1625 %1648
       %1651 = OpCompositeConstruct %1650 %184 %211 %1649 %184
       %1652 = OpCompositeExtract %20 %1651 0
               OpSelectionMerge %1654 None
               OpBranchConditional %1652 %1653 %1654
       %1653 = OpLabel
               OpSelectionMerge %1656 None
               OpBranchConditional %184 %1655 %1657
       %1655 = OpLabel
               OpBranch %1656
       %1657 = OpLabel
               OpStore %1658 %1659
               OpStore %1660 %103
               OpStore %1661 %1664
               OpBranch %1665
       %1665 = OpLabel
               OpLoopMerge %1667 %1668 None
               OpBranch %1669
       %1669 = OpLabel
       %1670 = OpLoad %6 %1658
       %1671 = OpSLessThan %20 %1670 %181
               OpSelectionMerge %1673 None
               OpBranchConditional %1671 %1672 %1673
       %1672 = OpLabel
       %1674 = OpAccessChain %26 %1661 %190
       %1675 = OpLoad %15 %1674
       %1676 = OpFOrdGreaterThan %20 %1675 %332
               OpBranch %1673
       %1673 = OpLabel
       %1677 = OpPhi %20 %1671 %1669 %1676 %1672
       %1678 = OpLogicalNot %20 %1677
               OpSelectionMerge %1680 None
               OpBranchConditional %1678 %1679 %1680
       %1679 = OpLabel
       %1681 = OpAccessChain %26 %1661 %205
       %1682 = OpLoad %15 %1681
       %1683 = OpFOrdGreaterThan %20 %1682 %332
               OpBranch %1680
       %1680 = OpLabel
       %1684 = OpPhi %20 %1677 %1673 %1683 %1679
               OpBranchConditional %1684 %1666 %1667
       %1666 = OpLabel
       %1685 = OpLoad %6 %1660
       %1686 = OpSGreaterThanEqual %20 %1685 %476
               OpSelectionMerge %1688 None
               OpBranchConditional %1686 %1687 %1688
       %1687 = OpLabel
               OpBranch %1667
       %1688 = OpLabel
       %1690 = OpLoad %6 %1660
       %1691 = OpIAdd %6 %1690 %181
               OpStore %1660 %1691
       %1692 = OpAccessChain %26 %1661 %190
       %1693 = OpLoad %15 %1692
       %1694 = OpFOrdGreaterThan %20 %1693 %332
               OpSelectionMerge %1696 None
               OpBranchConditional %1694 %1695 %1696
       %1695 = OpLabel
       %1697 = OpAccessChain %26 %1661 %190
       %1698 = OpLoad %15 %1697
       %1699 = OpFSub %15 %1698 %332
       %1700 = OpAccessChain %26 %1661 %190
               OpStore %1700 %1699
               OpBranch %1696
       %1696 = OpLabel
       %1701 = OpAccessChain %26 %1661 %205
       %1702 = OpLoad %15 %1701
       %1703 = OpFOrdGreaterThan %20 %1702 %332
               OpSelectionMerge %1705 None
               OpBranchConditional %1703 %1704 %1705
       %1704 = OpLabel
       %1706 = OpAccessChain %26 %1661 %205
       %1707 = OpLoad %15 %1706
       %1708 = OpFSub %15 %1707 %332
       %1709 = OpAccessChain %26 %1661 %205
               OpStore %1709 %1708
               OpBranch %1705
       %1705 = OpLabel
       %1710 = OpLoad %16 %1661
       %1711 = OpVectorTimesScalar %16 %1710 %358
               OpStore %1661 %1711
       %1712 = OpLoad %6 %1658
       %1713 = OpIAdd %6 %1712 %181
               OpStore %1658 %1713
               OpBranch %1668
       %1668 = OpLabel
               OpBranch %1665
       %1667 = OpLabel
               OpReturn
       %1656 = OpLabel
               OpBranch %1654
       %1654 = OpLabel
       %1715 = OpAccessChain %282 %281 %190
       %1716 = OpLoad %15 %1715
       %1717 = OpFOrdLessThan %20 %1716 %285
               OpSelectionMerge %1719 None
               OpBranchConditional %1717 %1718 %1719
       %1718 = OpLabel
               OpSelectionMerge %1721 None
               OpBranchConditional %211 %1720 %1721
       %1720 = OpLabel
               OpReturn
       %1721 = OpLabel
               OpBranch %1719
       %1719 = OpLabel
               OpStore %1723 %103
               OpStore %1724 %103
               OpBranch %1725
       %1725 = OpLabel
               OpLoopMerge %1727 %1728 None
               OpBranch %1729
       %1729 = OpLabel
       %1730 = OpLoad %6 %1724
       %1731 = OpSLessThan %20 %1730 %380
               OpBranchConditional %1731 %1726 %1727
       %1726 = OpLabel
       %1732 = OpLoad %6 %1723
       %1733 = OpSGreaterThanEqual %20 %1732 %653
               OpSelectionMerge %1735 None
               OpBranchConditional %1733 %1734 %1735
       %1734 = OpLabel
               OpBranch %1727
       %1735 = OpLabel
               OpSelectionMerge %1738 None
               OpBranchConditional %184 %1737 %1738
       %1737 = OpLabel
               OpBranch %1727
       %1738 = OpLabel
               OpSelectionMerge %1741 None
               OpBranchConditional %211 %1740 %1753
       %1740 = OpLabel
       %1742 = OpAccessChain %282 %281 %205
       %1743 = OpLoad %15 %1742
       %1744 = OpFOrdLessThan %20 %1743 %285
               OpSelectionMerge %1746 None
               OpBranchConditional %1744 %1745 %1746
       %1745 = OpLabel
               OpReturn
       %1746 = OpLabel
       %1748 = OpLoad %6 %1723
       %1749 = OpIAdd %6 %1748 %181
               OpStore %1723 %1749
               OpSelectionMerge %1751 None
               OpBranchConditional %184 %1750 %1751
       %1750 = OpLabel
               OpBranch %1727
       %1751 = OpLabel
               OpBranch %1741
       %1753 = OpLabel
               OpSelectionMerge %1755 None
               OpBranchConditional %184 %1754 %1755
       %1754 = OpLabel
               OpReturn
       %1755 = OpLabel
       %1757 = OpAccessChain %282 %281 %205
       %1758 = OpLoad %15 %1757
       %1759 = OpFOrdLessThan %20 %1758 %285
               OpSelectionMerge %1761 None
               OpBranchConditional %1759 %1760 %1762
       %1760 = OpLabel
               OpBranch %1761
       %1762 = OpLabel
       %1763 = OpAccessChain %282 %281 %190
       %1764 = OpLoad %15 %1763
       %1765 = OpFOrdLessThan %20 %1764 %285
               OpSelectionMerge %1767 None
               OpBranchConditional %1765 %1766 %1767
       %1766 = OpLabel
               OpReturn
       %1767 = OpLabel
               OpBranch %1761
       %1761 = OpLabel
               OpBranch %1741
       %1741 = OpLabel
       %1769 = OpAccessChain %282 %281 %190
       %1770 = OpLoad %15 %1769
       %1771 = OpFOrdLessThan %20 %1770 %285
               OpSelectionMerge %1773 None
               OpBranchConditional %1771 %1772 %1774
       %1772 = OpLabel
               OpBranch %1773
       %1774 = OpLabel
               OpStore %1775 %103
               OpSelectionMerge %1777 None
               OpBranchConditional %184 %1776 %1777
       %1776 = OpLabel
               OpReturn
       %1777 = OpLabel
               OpStore %1779 %181
               OpBranch %1780
       %1780 = OpLabel
               OpLoopMerge %1782 %1783 None
               OpBranch %1784
       %1784 = OpLabel
       %1785 = OpLoad %6 %1779
       %1786 = OpSGreaterThan %20 %1785 %103
               OpBranchConditional %1786 %1781 %1782
       %1781 = OpLabel
               OpStore %1787 %103
               OpBranch %1788
       %1788 = OpLabel
               OpLoopMerge %1790 %1791 None
               OpBranch %1792
       %1792 = OpLabel
       %1793 = OpLoad %6 %1787
       %1794 = OpSLessThan %20 %1793 %138
               OpBranchConditional %1794 %1789 %1790
       %1789 = OpLabel
       %1795 = OpLoad %6 %1775
       %1796 = OpSGreaterThanEqual %20 %1795 %653
               OpSelectionMerge %1798 None
               OpBranchConditional %1796 %1797 %1798
       %1797 = OpLabel
               OpSelectionMerge %1800 None
               OpBranchConditional %184 %1799 %1800
       %1799 = OpLabel
               OpKill
       %1800 = OpLabel
               OpSelectionMerge %1803 None
               OpBranchConditional %184 %1802 %1803
       %1802 = OpLabel
               OpBranch %1790
       %1803 = OpLabel
               OpBranch %1790
       %1798 = OpLabel
               OpBranch %1830
       %1830 = OpLabel
               OpLoopMerge %1832 %1833 None
               OpBranch %1831
       %1831 = OpLabel
       %1834 = OpLoad %6 %1775
       %1835 = OpIAdd %6 %1834 %181
               OpStore %1775 %1835
               OpBranch %1833
       %1833 = OpLabel
               OpBranchConditional %184 %1830 %1832
       %1832 = OpLabel
       %1836 = OpLoad %6 %1787
       %1837 = OpISub %6 %1836 %103
       %1838 = OpLoad %6 %1724
       %1839 = OpIAdd %6 %1838 %181
       %1840 = OpSLessThan %20 %1837 %1839
               OpSelectionMerge %1842 None
               OpBranchConditional %1840 %1841 %1842
       %1841 = OpLabel
               OpBranch %1791
       %1842 = OpLabel
       %1845 = OpLoad %6 %1724
       %1846 = OpExtInst %6 %1 SClamp %1845 %103 %380
       %1847 = OpLoad %6 %1787
       %1848 = OpExtInst %6 %1 SClamp %1847 %103 %380
       %1850 = OpAccessChain %26 %1613 %1846
       %1851 = OpLoad %15 %1850
               OpStore %1849 %1851
       %1853 = OpAccessChain %26 %1613 %1848
       %1854 = OpLoad %15 %1853
               OpStore %1852 %1854
       %1855 = OpFunctionCall %20 %30 %1849 %1852
               OpStore %1844 %1855
       %1856 = OpLoad %20 %1844
               OpSelectionMerge %1858 None
               OpBranchConditional %1856 %1857 %1858
       %1857 = OpLabel
       %1860 = OpLoad %6 %1724
       %1861 = OpExtInst %6 %1 SClamp %1860 %103 %380
       %1862 = OpAccessChain %26 %1613 %1861
       %1863 = OpLoad %15 %1862
               OpStore %1859 %1863
       %1864 = OpAccessChain %202 %201 %103 %190
       %1865 = OpLoad %15 %1864
       %1866 = OpAccessChain %202 %201 %103 %205
       %1867 = OpLoad %15 %1866
       %1868 = OpFOrdGreaterThan %20 %1865 %1867
               OpSelectionMerge %1870 None
               OpBranchConditional %1868 %1869 %1871
       %1869 = OpLabel
               OpBranch %1870
       %1871 = OpLabel
       %1872 = OpAccessChain %202 %201 %103 %190
       %1873 = OpLoad %15 %1872
       %1875 = OpSelect %15 %184 %1874 %1873
       %1876 = OpAccessChain %202 %201 %103 %205
       %1877 = OpLoad %15 %1876
       %1878 = OpFOrdGreaterThan %20 %1875 %1877
               OpSelectionMerge %1880 None
               OpBranchConditional %1878 %1879 %1880
       %1879 = OpLabel
               OpBranch %1790
       %1880 = OpLabel
       %1882 = OpLoad %6 %1724
       %1883 = OpExtInst %6 %1 SClamp %1882 %103 %380
       %1884 = OpLoad %6 %1787
       %1885 = OpExtInst %6 %1 SClamp %1884 %103 %380
       %1886 = OpAccessChain %26 %1613 %1885
       %1887 = OpLoad %15 %1886
       %1888 = OpAccessChain %26 %1613 %1883
               OpStore %1888 %1887
               OpBranch %1870
       %1870 = OpLabel
       %1889 = OpAccessChain %282 %281 %190
       %1890 = OpLoad %15 %1889
       %1891 = OpFDiv %15 %1890 %332
       %1892 = OpFOrdLessThan %20 %1891 %285
               OpSelectionMerge %1894 None
               OpBranchConditional %1892 %1893 %1895
       %1893 = OpLabel
               OpBranch %1894
       %1895 = OpLabel
       %1896 = OpLoad %6 %1787
       %1897 = OpExtInst %6 %1 SClamp %1896 %103 %380
       %1898 = OpLoad %15 %1859
       %1899 = OpAccessChain %26 %1613 %1897
               OpStore %1899 %1898
               OpBranch %1894
       %1894 = OpLabel
               OpSelectionMerge %1901 None
               OpBranchConditional %184 %1900 %1901
       %1900 = OpLabel
               OpKill
       %1901 = OpLabel
               OpBranch %1858
       %1858 = OpLabel
               OpBranch %1791
       %1791 = OpLabel
       %1903 = OpLoad %6 %1787
       %1904 = OpIAdd %6 %1903 %181
               OpStore %1787 %1904
               OpBranch %1788
       %1790 = OpLabel
               OpBranch %1783
       %1783 = OpLabel
       %1905 = OpLoad %6 %1779
       %1906 = OpISub %6 %1905 %181
               OpStore %1779 %1906
               OpBranch %1780
       %1782 = OpLabel
               OpBranch %1773
       %1773 = OpLabel
               OpBranch %1728
       %1728 = OpLabel
       %1907 = OpLoad %6 %1724
       %1908 = OpIAdd %6 %1907 %181
               OpStore %1724 %1908
               OpBranch %1725
       %1727 = OpLabel
               OpSelectionMerge %1910 None
               OpBranchConditional %184 %1909 %1910
       %1909 = OpLabel
               OpReturn
       %1910 = OpLabel
               OpReturn
       %1559 = OpLabel
               OpStore %1946 %138
               OpStore %1947 %184
               OpStore %1948 %1949
               OpStore %1950 %1953
               OpStore %1954 %103
       %1955 = OpLoad %6 %1954
       %1956 = OpSGreaterThanEqual %20 %1955 %476
               OpSelectionMerge %1958 None
               OpBranchConditional %1956 %1957 %1958
       %1957 = OpLabel
               OpStore %1959 %103
               OpBranch %1960
       %1960 = OpLabel
               OpLoopMerge %1962 %1963 None
               OpBranch %1964
       %1964 = OpLabel
       %1965 = OpLoad %6 %1959
       %1966 = OpSLessThan %20 %1965 %181
               OpBranchConditional %1966 %1961 %1962
       %1961 = OpLabel
               OpBranch %1963
       %1963 = OpLabel
       %1967 = OpLoad %6 %1959
       %1968 = OpIAdd %6 %1967 %181
               OpStore %1959 %1968
               OpBranch %1960
       %1962 = OpLabel
               OpSelectionMerge %1970 None
               OpBranchConditional %184 %1969 %1970
       %1969 = OpLabel
               OpReturn
       %1970 = OpLabel
               OpBranch %1958
       %1958 = OpLabel
       %1972 = OpLoad %6 %1954
       %1973 = OpIAdd %6 %1972 %181
               OpStore %1954 %1973
       %1974 = OpLoad %6 %1946
       %1975 = OpIMul %6 %1974 %188
       %1976 = OpLoad %6 %1948
       %1977 = OpIMul %6 %1976 %188
       %1978 = OpIMul %6 %1977 %544
       %1979 = OpIAdd %6 %1975 %1978
       %1980 = OpExtInst %6 %1 SClamp %1979 %103 %547
       %1981 = OpAccessChain %382 %96 %1980
       %1982 = OpLoad %6 %1981
       %1983 = OpIEqual %20 %1982 %103
               OpSelectionMerge %1985 None
               OpBranchConditional %1983 %1984 %1985
       %1984 = OpLabel
       %1986 = OpLoad %6 %1946
       %1987 = OpIMul %6 %1986 %188
       %1988 = OpAccessChain %9 %1950 %190
               OpStore %1988 %1987
       %1989 = OpLoad %6 %1948
       %1990 = OpIMul %6 %1989 %188
       %1991 = OpAccessChain %9 %1950 %205
               OpStore %1991 %1990
               OpStore %1947 %211
               OpBranch %1985
       %1985 = OpLabel
       %1992 = OpAccessChain %282 %281 %205
       %1993 = OpLoad %15 %1992
       %1994 = OpFOrdLessThan %20 %1993 %285
               OpSelectionMerge %1996 None
               OpBranchConditional %1994 %1995 %1996
       %1995 = OpLabel
               OpReturn
       %1996 = OpLabel
       %1998 = OpAccessChain %202 %201 %103 %190
       %1999 = OpLoad %15 %1998
       %2000 = OpAccessChain %202 %201 %103 %205
       %2001 = OpLoad %15 %2000
       %2002 = OpFOrdGreaterThan %20 %1999 %2001
               OpSelectionMerge %2004 None
               OpBranchConditional %2002 %2003 %2004
       %2003 = OpLabel
               OpBranch %2005
       %2005 = OpLabel
               OpLoopMerge %2007 %2008 None
               OpBranch %2006
       %2006 = OpLabel
               OpReturn
       %2008 = OpLabel
               OpBranch %2005
       %2007 = OpLabel
               OpUnreachable
       %2004 = OpLabel
       %2034 = OpAccessChain %202 %201 %103 %190
       %2035 = OpLoad %15 %2034
       %2036 = OpAccessChain %202 %201 %103 %205
       %2037 = OpLoad %15 %2036
       %2038 = OpFOrdLessThan %20 %2035 %2037
               OpSelectionMerge %2040 None
               OpBranchConditional %2038 %2039 %2040
       %2039 = OpLabel
               OpSelectionMerge %2042 None
               OpBranchConditional %211 %2041 %2042
       %2041 = OpLabel
               OpStore %2043 %138
               OpStore %2044 %2045
               OpStore %2046 %138
               OpStore %2047 %181
               OpBranch %2048
       %2048 = OpLabel
               OpLoopMerge %2050 %2051 None
               OpBranch %2052
       %2052 = OpLabel
       %2053 = OpLoad %6 %2047
       %2054 = OpAccessChain %202 %201 %103 %190
       %2055 = OpLoad %15 %2054
       %2056 = OpConvertFToS %6 %2055
       %2057 = OpShiftLeftLogical %6 %2056 %181
       %2058 = OpINotEqual %20 %2053 %2057
               OpBranchConditional %2058 %2049 %2050
       %2049 = OpLabel
               OpStore %2059 %103
               OpBranch %2060
       %2060 = OpLabel
               OpLoopMerge %2062 %2063 None
               OpBranch %2064
       %2064 = OpLabel
       %2065 = OpLoad %6 %2044
       %2066 = OpLoad %6 %2043
       %2067 = OpSLessThanEqual %20 %2065 %2066
               OpBranchConditional %2067 %2061 %2062
       %2061 = OpLabel
       %2068 = OpLoad %6 %2059
       %2069 = OpSGreaterThanEqual %20 %2068 %292
               OpSelectionMerge %2071 None
               OpBranchConditional %2069 %2070 %2071
       %2070 = OpLabel
               OpBranch %2062
       %2071 = OpLabel
       %2073 = OpLoad %6 %2059
       %2074 = OpIAdd %6 %2073 %181
               OpStore %2059 %2074
       %2075 = OpLoad %6 %2046
       %2076 = OpLoad %6 %2044
       %2077 = OpExtInst %6 %1 SClamp %2076 %103 %380
       %2078 = OpAccessChain %382 %59 %2077 %103
       %2079 = OpLoad %6 %2078
       %2080 = OpSLessThanEqual %20 %2075 %2079
               OpSelectionMerge %2082 None
               OpBranchConditional %2080 %2081 %2131
       %2081 = OpLabel
       %2083 = OpLoad %6 %2044
       %2084 = OpExtInst %6 %1 SClamp %2083 %103 %380
       %2085 = OpAccessChain %382 %59 %2084 %181
       %2086 = OpLoad %6 %2085
       %2087 = OpIEqual %20 %2086 %182
               OpSelectionMerge %2089 None
               OpBranchConditional %2087 %2088 %2115
       %2088 = OpLabel
       %2090 = OpLoad %6 %2044
       %2091 = OpExtInst %6 %1 SClamp %2090 %103 %380
       %2092 = OpLoad %6 %2043
       %2093 = OpAccessChain %382 %59 %2091 %181
               OpStore %2093 %2092
               OpStore %2094 %103
               OpBranch %2095
       %2095 = OpLabel
               OpLoopMerge %2097 %2098 None
               OpBranch %2099
       %2099 = OpLabel
       %2100 = OpLoad %6 %2094
       %2101 = OpINotEqual %20 %2100 %181
               OpBranchConditional %2101 %2096 %2097
       %2096 = OpLabel
       %2102 = OpLoad %6 %2043
       %2103 = OpExtInst %6 %1 SClamp %2102 %103 %380
       %2106 = OpAccessChain %2105 %59 %2103
       %2107 = OpLoad %7 %2106
               OpStore %2104 %2107
       %2109 = OpLoad %6 %2046
               OpStore %2108 %2109
       %2110 = OpFunctionCall %2 %13 %2104 %2108
       %2111 = OpLoad %7 %2104
       %2112 = OpAccessChain %2105 %59 %2103
               OpStore %2112 %2111
               OpBranch %2098
       %2098 = OpLabel
       %2113 = OpLoad %6 %2094
       %2114 = OpIAdd %6 %2113 %181
               OpStore %2094 %2114
               OpBranch %2095
       %2097 = OpLabel
               OpBranch %2089
       %2115 = OpLabel
               OpStore %2116 %103
               OpBranch %2117
       %2117 = OpLabel
               OpLoopMerge %2119 %2120 None
               OpBranch %2121
       %2121 = OpLabel
       %2122 = OpLoad %6 %2116
       %2123 = OpSLessThan %20 %2122 %181
               OpBranchConditional %2123 %2118 %2119
       %2118 = OpLabel
       %2124 = OpLoad %6 %2044
       %2125 = OpExtInst %6 %1 SClamp %2124 %103 %380
       %2126 = OpAccessChain %382 %59 %2125 %181
       %2127 = OpLoad %6 %2126
               OpStore %2044 %2127
               OpBranch %2120
       %2120 = OpLabel
       %2128 = OpLoad %6 %2116
       %2129 = OpIAdd %6 %2128 %181
               OpStore %2116 %2129
               OpBranch %2117
       %2119 = OpLabel
               OpBranch %2063
       %2089 = OpLabel
               OpBranch %2082
       %2131 = OpLabel
       %2132 = OpLoad %6 %2044
       %2133 = OpExtInst %6 %1 SClamp %2132 %103 %380
       %2134 = OpAccessChain %382 %59 %2133 %188
       %2135 = OpLoad %6 %2134
       %2136 = OpIEqual %20 %2135 %182
               OpSelectionMerge %2138 None
               OpBranchConditional %2136 %2137 %2159
       %2137 = OpLabel
               OpSelectionMerge %2140 None
               OpBranchConditional %184 %2139 %2141
       %2139 = OpLabel
               OpBranch %2140
       %2141 = OpLabel
               OpSelectionMerge %2143 None
               OpBranchConditional %184 %2142 %2143
       %2142 = OpLabel
               OpKill
       %2143 = OpLabel
       %2145 = OpLoad %6 %2044
       %2146 = OpExtInst %6 %1 SClamp %2145 %103 %380
       %2147 = OpLoad %6 %2043
       %2148 = OpAccessChain %382 %59 %2146 %188
               OpStore %2148 %2147
               OpBranch %2140
       %2140 = OpLabel
       %2149 = OpLoad %6 %2043
       %2150 = OpExtInst %6 %1 SClamp %2149 %103 %380
       %2152 = OpAccessChain %2105 %59 %2150
       %2153 = OpLoad %7 %2152
               OpStore %2151 %2153
       %2155 = OpLoad %6 %2046
               OpStore %2154 %2155
       %2156 = OpFunctionCall %2 %13 %2151 %2154
       %2157 = OpLoad %7 %2151
       %2158 = OpAccessChain %2105 %59 %2150
               OpStore %2158 %2157
               OpBranch %2138
       %2159 = OpLabel
       %2160 = OpLoad %6 %2044
       %2161 = OpExtInst %6 %1 SClamp %2160 %103 %380
       %2162 = OpAccessChain %382 %59 %2161 %188
       %2163 = OpLoad %6 %2162
               OpStore %2044 %2163
               OpBranch %2063
       %2138 = OpLabel
               OpBranch %2082
       %2082 = OpLabel
               OpBranch %2063
       %2063 = OpLabel
               OpBranch %2060
       %2062 = OpLabel
               OpBranch %2051
       %2051 = OpLabel
       %2165 = OpLoad %6 %2047
       %2166 = OpISub %6 %2165 %181
               OpStore %2047 %2166
               OpBranch %2048
       %2050 = OpLabel
               OpSelectionMerge %2168 None
               OpBranchConditional %184 %2167 %2168
       %2167 = OpLabel
               OpReturn
       %2168 = OpLabel
               OpStore %2170 %103
               OpBranch %2171
       %2171 = OpLabel
               OpLoopMerge %2173 %2174 None
               OpBranch %2175
       %2175 = OpLabel
       %2176 = OpLoad %6 %2170
       %2177 = OpAccessChain %202 %201 %103 %205
       %2178 = OpLoad %15 %2177
       %2179 = OpConvertFToS %6 %2178
       %2180 = OpINotEqual %20 %2176 %2179
               OpBranchConditional %2180 %2172 %2173
       %2172 = OpLabel
       %2181 = OpAccessChain %282 %281 %190
       %2182 = OpLoad %15 %2181
       %2183 = OpFOrdLessThan %20 %2182 %285
       %2184 = OpCompositeConstruct %897 %2183 %211 %211
       %2185 = OpCompositeExtract %20 %2184 0
       %2186 = OpLogicalAnd %20 %2185 %211
               OpSelectionMerge %2188 None
               OpBranchConditional %2186 %2187 %2188
       %2187 = OpLabel
               OpSelectionMerge %2190 None
               OpBranchConditional %184 %2189 %2191
       %2189 = OpLabel
               OpBranch %2190
       %2191 = OpLabel
               OpReturn
       %2190 = OpLabel
       %2194 = OpLoad %18 %116
       %2195 = OpVectorShuffle %16 %2194 %2194 0 1
       %2196 = OpVectorTimesScalar %16 %2195 %862
               OpStore %2193 %2196
               OpStore %2197 %2199
               OpBranch %2200
       %2200 = OpLabel
               OpLoopMerge %2202 %2203 None
               OpBranch %2201
       %2201 = OpLabel
       %2204 = OpLoad %16 %2193
       %2205 = OpVectorTimesScalar %16 %2204 %358
               OpStore %2193 %2205
               OpBranch %2203
       %2203 = OpLabel
       %2206 = OpAccessChain %282 %281 %190
       %2207 = OpLoad %15 %2206
       %2208 = OpFOrdLessThan %20 %2207 %285
               OpBranchConditional %2208 %2200 %2202
       %2202 = OpLabel
               OpStore %2209 %103
               OpStore %2210 %103
       %2211 = OpAccessChain %282 %281 %190
       %2212 = OpLoad %15 %2211
       %2213 = OpFOrdLessThan %20 %2212 %285
               OpSelectionMerge %2215 None
               OpBranchConditional %2213 %2214 %2215
       %2214 = OpLabel
               OpBranch %2173
       %2215 = OpLabel
               OpBranch %2217
       %2217 = OpLabel
               OpLoopMerge %2219 %2220 None
               OpBranch %2221
       %2221 = OpLabel
       %2222 = OpLoad %6 %2209
       %2223 = OpSLessThan %20 %2222 %181
               OpSelectionMerge %2225 None
               OpBranchConditional %2223 %2224 %2225
       %2224 = OpLabel
       %2226 = OpAccessChain %26 %2193 %190
       %2227 = OpLoad %15 %2226
       %2228 = OpFOrdGreaterThan %20 %2227 %332
               OpBranch %2225
       %2225 = OpLabel
       %2229 = OpPhi %20 %2223 %2221 %2228 %2224
       %2230 = OpLogicalNot %20 %2229
               OpSelectionMerge %2232 None
               OpBranchConditional %2230 %2231 %2232
       %2231 = OpLabel
       %2233 = OpAccessChain %26 %2193 %205
       %2234 = OpLoad %15 %2233
       %2235 = OpFOrdGreaterThan %20 %2234 %332
               OpBranch %2232
       %2232 = OpLabel
       %2236 = OpPhi %20 %2229 %2225 %2235 %2231
               OpBranchConditional %2236 %2218 %2219
       %2218 = OpLabel
       %2237 = OpLoad %6 %2210
       %2238 = OpSGreaterThanEqual %20 %2237 %476
               OpSelectionMerge %2240 None
               OpBranchConditional %2238 %2239 %2240
       %2239 = OpLabel
               OpBranch %2219
       %2240 = OpLabel
       %2242 = OpLoad %6 %2210
       %2243 = OpIAdd %6 %2242 %181
               OpStore %2210 %2243
               OpBranch %2244
       %2244 = OpLabel
               OpLoopMerge %2246 %2247 None
               OpBranch %2245
       %2245 = OpLabel
       %2248 = OpAccessChain %26 %2193 %190
       %2249 = OpLoad %15 %2248
       %2250 = OpFOrdGreaterThan %20 %2249 %332
               OpSelectionMerge %2252 None
               OpBranchConditional %2250 %2251 %2252
       %2251 = OpLabel
       %2254 = OpAccessChain %202 %201 %103 %205
       %2255 = OpLoad %15 %2254
       %2256 = OpConvertFToS %6 %2255
               OpStore %2253 %2256
               OpBranch %2257
       %2257 = OpLabel
               OpLoopMerge %2259 %2260 None
               OpBranch %2261
       %2261 = OpLabel
       %2262 = OpLoad %6 %2253
       %2263 = OpINotEqual %20 %2262 %103
               OpBranchConditional %2263 %2258 %2259
       %2258 = OpLabel
       %2264 = OpAccessChain %26 %2193 %190
       %2265 = OpLoad %15 %2264
       %2266 = OpFSub %15 %2265 %332
       %2267 = OpAccessChain %26 %2193 %190
               OpStore %2267 %2266
               OpSelectionMerge %2269 None
               OpBranchConditional %184 %2268 %2269
       %2268 = OpLabel
               OpReturn
       %2269 = OpLabel
               OpBranch %2260
       %2260 = OpLabel
       %2271 = OpLoad %6 %2253
       %2272 = OpISub %6 %2271 %181
               OpStore %2253 %2272
               OpBranch %2257
       %2259 = OpLabel
               OpBranch %2252
       %2252 = OpLabel
       %2273 = OpAccessChain %282 %281 %205
       %2274 = OpLoad %15 %2273
       %2275 = OpFOrdLessThan %20 %2274 %285
               OpSelectionMerge %2277 None
               OpBranchConditional %2275 %2276 %2277
       %2276 = OpLabel
               OpBranch %2246
       %2277 = OpLabel
               OpBranch %2247
       %2247 = OpLabel
       %2279 = OpAccessChain %202 %201 %103 %190
       %2280 = OpLoad %15 %2279
       %2281 = OpAccessChain %202 %201 %103 %205
       %2282 = OpLoad %15 %2281
       %2283 = OpFOrdGreaterThan %20 %2280 %2282
               OpBranchConditional %2283 %2244 %2246
       %2246 = OpLabel
       %2284 = OpAccessChain %202 %201 %103 %190
       %2285 = OpLoad %15 %2284
       %2286 = OpAccessChain %202 %201 %103 %205
       %2287 = OpLoad %15 %2286
       %2288 = OpFOrdGreaterThan %20 %2285 %2287
               OpSelectionMerge %2290 None
               OpBranchConditional %2288 %2289 %2291
       %2289 = OpLabel
               OpBranch %2290
       %2291 = OpLabel
       %2292 = OpAccessChain %26 %2193 %205
       %2293 = OpLoad %15 %2292
       %2294 = OpFOrdGreaterThan %20 %2293 %332
               OpSelectionMerge %2296 None
               OpBranchConditional %2294 %2295 %2296
       %2295 = OpLabel
       %2297 = OpAccessChain %26 %2193 %205
       %2298 = OpLoad %15 %2297
       %2299 = OpFSub %15 %2298 %332
       %2300 = OpAccessChain %26 %2193 %205
               OpStore %2300 %2299
               OpBranch %2296
       %2296 = OpLabel
               OpBranch %2290
       %2290 = OpLabel
       %2301 = OpAccessChain %202 %201 %103 %190
       %2302 = OpLoad %15 %2301
       %2303 = OpAccessChain %202 %201 %103 %205
       %2304 = OpLoad %15 %2303
       %2305 = OpFOrdGreaterThan %20 %2302 %2304
               OpSelectionMerge %2307 None
               OpBranchConditional %2305 %2306 %2307
       %2306 = OpLabel
               OpBranch %2219
       %2307 = OpLabel
       %2309 = OpLoad %16 %2193
       %2310 = OpVectorTimesScalar %16 %2309 %358
               OpStore %2193 %2310
       %2311 = OpLoad %6 %2209
       %2312 = OpIAdd %6 %2311 %181
               OpStore %2209 %2312
               OpBranch %2220
       %2220 = OpLabel
               OpBranch %2217
       %2219 = OpLabel
       %2313 = OpAccessChain %26 %2193 %190
       %2314 = OpLoad %15 %2313
       %2315 = OpFOrdLessThan %20 %2314 %332
               OpSelectionMerge %2317 None
               OpBranchConditional %2315 %2316 %2317
       %2316 = OpLabel
       %2318 = OpAccessChain %26 %2193 %205
       %2319 = OpLoad %15 %2318
       %2320 = OpFOrdLessThan %20 %2319 %332
               OpBranch %2317
       %2317 = OpLabel
       %2321 = OpPhi %20 %2315 %2219 %2320 %2316
               OpSelectionMerge %2323 None
               OpBranchConditional %2321 %2322 %2323
       %2322 = OpLabel
       %2325 = OpLoad %1000 %2324
       %2326 = OpLoad %16 %2193
       %2327 = OpImageSampleImplicitLod %18 %2325 %2326
               OpStore %2197 %2327
               OpBranch %2323
       %2323 = OpLabel
       %2328 = OpAccessChain %282 %281 %190
       %2329 = OpLoad %15 %2328
       %2330 = OpFOrdLessThan %20 %2329 %285
               OpSelectionMerge %2332 None
               OpBranchConditional %2330 %2331 %2341
       %2331 = OpLabel
       %2333 = OpAccessChain %202 %201 %103 %190
       %2334 = OpLoad %15 %2333
       %2335 = OpAccessChain %202 %201 %103 %205
       %2336 = OpLoad %15 %2335
       %2337 = OpFOrdGreaterThan %20 %2334 %2336
               OpSelectionMerge %2339 None
               OpBranchConditional %2337 %2338 %2339
       %2338 = OpLabel
               OpBranch %2174
       %2339 = OpLabel
               OpBranch %2332
       %2341 = OpLabel
       %2342 = OpLoad %18 %2197
       %2343 = OpVectorShuffle %1077 %2342 %2342 0 1 2
       %2344 = OpCompositeExtract %15 %2343 0
       %2345 = OpCompositeExtract %15 %2343 1
       %2346 = OpCompositeExtract %15 %2343 2
       %2347 = OpCompositeConstruct %18 %2344 %2345 %2346 %332
               OpStore %122 %2347
               OpBranch %2332
       %2332 = OpLabel
               OpBranch %2188
       %2188 = OpLabel
               OpBranch %2174
       %2174 = OpLabel
       %2348 = OpLoad %6 %2170
       %2349 = OpIAdd %6 %2348 %181
               OpStore %2170 %2349
               OpBranch %2171
       %2173 = OpLabel
               OpStore %2350 %2351
               OpStore %2352 %2354
               OpSelectionMerge %2356 None
               OpBranchConditional %184 %2355 %2356
       %2355 = OpLabel
               OpReturn
       %2356 = OpLabel
               OpStore %2358 %2363
               OpStore %2364 %103
       %2365 = OpAccessChain %202 %201 %103 %190
       %2366 = OpLoad %15 %2365
       %2367 = OpAccessChain %202 %201 %103 %205
       %2368 = OpLoad %15 %2367
       %2369 = OpFOrdGreaterThan %20 %2366 %2368
               OpSelectionMerge %2371 None
               OpBranchConditional %2369 %2370 %2375
       %2370 = OpLabel
               OpSelectionMerge %2373 None
               OpBranchConditional %184 %2372 %2373
       %2372 = OpLabel
               OpReturn
       %2373 = OpLabel
               OpBranch %2371
       %2375 = OpLabel
               OpBranch %2376
       %2376 = OpLabel
               OpLoopMerge %2378 %2379 None
               OpBranch %2380
       %2380 = OpLabel
       %2381 = OpAccessChain %26 %2358 %190
       %2382 = OpLoad %15 %2381
       %2383 = OpAccessChain %26 %2358 %205
       %2384 = OpLoad %15 %2383
       %2385 = OpFAdd %15 %2382 %2384
       %2386 = OpAccessChain %26 %2358 %251
       %2387 = OpLoad %15 %2386
       %2388 = OpFAdd %15 %2385 %2387
       %2389 = OpFOrdGreaterThan %20 %2388 %332
       %2390 = OpLoad %6 %2350
       %2391 = OpSLessThan %20 %2390 %544
       %2392 = OpLogicalAnd %20 %2389 %2391
               OpBranchConditional %2392 %2377 %2378
       %2377 = OpLabel
       %2393 = OpLoad %6 %2364
       %2394 = OpSGreaterThanEqual %20 %2393 %441
       %2395 = OpLogicalOr %20 %2394 %184
       %2396 = OpCompositeConstruct %1650 %2395 %184 %184 %211
       %2397 = OpCompositeExtract %20 %2396 0
               OpSelectionMerge %2399 None
               OpBranchConditional %2397 %2398 %2399
       %2398 = OpLabel
               OpBranch %2378
       %2399 = OpLabel
       %2401 = OpLoad %6 %2364
       %2402 = OpIAdd %6 %2401 %181
               OpStore %2364 %2402
               OpBranch %2403
       %2403 = OpLabel
               OpLoopMerge %2405 %2406 None
               OpBranch %2404
       %2404 = OpLabel
               OpStore %2407 %2410
               OpStore %2411 %2412
       %2413 = OpLoad %6 %2411
       %2414 = OpISub %6 %2413 %181
               OpStore %2411 %2414
       %2415 = OpAccessChain %9 %2407 %190
       %2416 = OpLoad %6 %2415
       %2417 = OpAccessChain %9 %2407 %205
       %2418 = OpLoad %6 %2417
       %2419 = OpIMul %6 %2418 %544
       %2420 = OpIAdd %6 %2416 %2419
       %2421 = OpExtInst %6 %1 SClamp %2420 %103 %547
       %2422 = OpAccessChain %382 %96 %2421
               OpStore %2422 %181
               OpStore %2423 %103
               OpBranch %2424
       %2424 = OpLabel
               OpLoopMerge %2426 %2427 None
               OpBranch %2428
       %2428 = OpLabel
       %2429 = OpLoad %6 %2423
       %2430 = OpINotEqual %20 %2429 %181
               OpBranchConditional %2430 %2425 %2426
       %2425 = OpLabel
       %2431 = OpAccessChain %9 %2407 %190
       %2432 = OpLoad %6 %2431
       %2433 = OpIAdd %6 %2432 %181
       %2434 = OpAccessChain %9 %2407 %205
       %2435 = OpLoad %6 %2434
       %2436 = OpIMul %6 %2435 %544
       %2437 = OpIAdd %6 %2433 %2436
       %2438 = OpExtInst %6 %1 SClamp %2437 %103 %547
       %2439 = OpAccessChain %382 %96 %2438
               OpStore %2439 %181
               OpBranch %2427
       %2427 = OpLabel
       %2440 = OpLoad %6 %2423
       %2441 = OpIAdd %6 %2440 %181
               OpStore %2423 %2441
               OpBranch %2424
       %2426 = OpLabel
       %2442 = OpAccessChain %9 %2407 %190
       %2443 = OpLoad %6 %2442
       %2444 = OpIAdd %6 %2443 %188
       %2445 = OpAccessChain %9 %2407 %205
       %2446 = OpLoad %6 %2445
       %2447 = OpIMul %6 %2446 %544
       %2448 = OpIAdd %6 %2444 %2447
       %2449 = OpExtInst %6 %1 SClamp %2448 %103 %547
       %2450 = OpAccessChain %382 %96 %2449
               OpStore %2450 %181
       %2451 = OpAccessChain %9 %2407 %190
       %2452 = OpLoad %6 %2451
       %2453 = OpIAdd %6 %2452 %188
       %2454 = OpAccessChain %9 %2407 %190
               OpStore %2454 %2453
               OpBranch %2406
       %2406 = OpLabel
               OpBranchConditional %184 %2403 %2405
       %2405 = OpLabel
       %2455 = OpLoad %18 %2358
       %2456 = OpVectorShuffle %16 %2455 %2455 0 2
       %2457 = OpLoad %18 %2358
       %2458 = OpVectorShuffle %16 %2457 %2457 1 1
       %2459 = OpFAdd %16 %2456 %2458
               OpStore %2352 %2459
               OpSelectionMerge %2461 None
               OpBranchConditional %211 %2460 %2461
       %2460 = OpLabel
               OpStore %2462 %181
               OpBranch %2463
       %2463 = OpLabel
               OpLoopMerge %2465 %2466 None
               OpBranch %2467
       %2467 = OpLabel
       %2468 = OpLoad %6 %2462
       %2469 = OpAccessChain %202 %201 %103 %190
       %2470 = OpLoad %15 %2469
       %2471 = OpConvertFToS %6 %2470
       %2472 = OpBitwiseXor %6 %2471 %103
       %2473 = OpSGreaterThan %20 %2468 %2472
               OpBranchConditional %2473 %2464 %2465
       %2464 = OpLabel
       %2474 = OpLoad %16 %2352
       %2476 = OpVectorTimesScalar %16 %2474 %2475
       %2477 = OpExtInst %16 %1 Floor %2476
       %2478 = OpCompositeConstruct %16 %2475 %2475
       %2479 = OpFDiv %16 %2477 %2478
               OpStore %2352 %2479
               OpSelectionMerge %2481 None
               OpBranchConditional %184 %2480 %2481
       %2480 = OpLabel
               OpBranch %2465
       %2481 = OpLabel
               OpBranch %2466
       %2466 = OpLabel
       %2483 = OpLoad %6 %2462
       %2484 = OpISub %6 %2483 %181
               OpStore %2462 %2484
               OpBranch %2463
       %2465 = OpLabel
               OpBranch %2461
       %2461 = OpLabel
       %2485 = OpAccessChain %282 %281 %205
       %2486 = OpLoad %15 %2485
       %2487 = OpFOrdLessThan %20 %2486 %285
               OpSelectionMerge %2489 None
               OpBranchConditional %2487 %2488 %2489
       %2488 = OpLabel
               OpBranch %2378
       %2489 = OpLabel
       %2492 = OpLoad %1000 %2491
       %2493 = OpLoad %16 %2352
       %2494 = OpImageSampleImplicitLod %18 %2492 %2493
               OpStore %2358 %2494
               OpStore %2495 %103
               OpBranch %2496
       %2496 = OpLabel
               OpLoopMerge %2498 %2499 None
               OpBranch %2500
       %2500 = OpLabel
       %2501 = OpLoad %6 %2495
       %2502 = OpINotEqual %20 %2501 %181
               OpBranchConditional %2502 %2497 %2498
       %2497 = OpLabel
       %2503 = OpLoad %6 %2350
       %2504 = OpIAdd %6 %2503 %181
               OpStore %2350 %2504
               OpBranch %2499
       %2499 = OpLabel
       %2505 = OpLoad %6 %2495
       %2506 = OpIAdd %6 %2505 %181
               OpStore %2495 %2506
               OpBranch %2496
       %2498 = OpLabel
               OpBranch %2379
       %2379 = OpLabel
               OpBranch %2376
       %2378 = OpLabel
               OpBranch %2371
       %2371 = OpLabel
       %2507 = OpAccessChain %202 %201 %103 %190
       %2508 = OpLoad %15 %2507
       %2509 = OpAccessChain %202 %201 %103 %205
       %2510 = OpLoad %15 %2509
       %2511 = OpFOrdGreaterThan %20 %2508 %2510
               OpSelectionMerge %2513 None
               OpBranchConditional %2511 %2512 %2513
       %2512 = OpLabel
               OpReturn
       %2513 = OpLabel
               OpBranch %2515
       %2515 = OpLabel
               OpLoopMerge %2517 %2518 None
               OpBranch %2519
       %2519 = OpLabel
       %2520 = OpAccessChain %26 %1421 %190
       %2521 = OpLoad %15 %2520
       %2522 = OpAccessChain %26 %1421 %205
       %2523 = OpLoad %15 %2522
       %2524 = OpFOrdLessThan %20 %2521 %2523
       %2525 = OpLoad %6 %1412
       %2527 = OpSLessThan %20 %2525 %2526
       %2528 = OpLogicalAnd %20 %2524 %2527
       %2529 = OpAccessChain %202 %201 %103 %190
       %2530 = OpLoad %15 %2529
       %2531 = OpAccessChain %202 %201 %103 %205
       %2532 = OpLoad %15 %2531
       %2533 = OpFOrdGreaterThan %20 %2530 %2532
       %2534 = OpCompositeConstruct %897 %2528 %2533 %211
       %2535 = OpCompositeExtract %20 %2534 0
       %2536 = OpCompositeExtract %20 %2534 1
       %2537 = OpCompositeExtract %20 %2534 2
       %2538 = OpCompositeConstruct %897 %2535 %2536 %2537
       %2539 = OpCompositeExtract %20 %2538 0
       %2540 = OpCompositeExtract %20 %2538 1
       %2541 = OpCompositeExtract %20 %2538 2
       %2542 = OpCompositeConstruct %897 %2539 %2540 %2541
       %2543 = OpCompositeExtract %20 %2542 0
               OpBranchConditional %2543 %2516 %2517
       %2516 = OpLabel
               OpSelectionMerge %2545 None
               OpBranchConditional %184 %2544 %2545
       %2544 = OpLabel
               OpBranch %2518
       %2545 = OpLabel
       %2547 = OpLoad %18 %1421
       %2548 = OpVectorShuffle %16 %2547 %2547 2 3
       %2549 = OpLoad %1077 %1455
       %2550 = OpVectorShuffle %16 %2549 %2549 0 1
       %2551 = OpFSub %16 %2550 %2548
       %2552 = OpLoad %1077 %1455
       %2553 = OpVectorShuffle %1077 %2552 %2551 3 4 2
               OpStore %1455 %2553
       %2554 = OpAccessChain %26 %1455 %251
       %2555 = OpLoad %15 %2554
       %2556 = OpAccessChain %26 %1421 %205
       %2557 = OpLoad %15 %2556
       %2558 = OpFAdd %15 %2557 %2555
       %2559 = OpAccessChain %26 %1421 %205
               OpStore %2559 %2558
       %2560 = OpAccessChain %202 %201 %103 %190
       %2561 = OpLoad %15 %2560
       %2562 = OpAccessChain %202 %201 %103 %205
       %2563 = OpLoad %15 %2562
       %2564 = OpFOrdGreaterThan %20 %2561 %2563
               OpSelectionMerge %2566 None
               OpBranchConditional %2564 %2565 %2566
       %2565 = OpLabel
               OpBranch %2518
       %2566 = OpLabel
               OpStore %2568 %2569
       %2570 = OpAccessChain %349 %128 %205
       %2571 = OpLoad %15 %2570
       %2572 = OpConvertFToS %6 %2571
       %2574 = OpSLessThan %20 %2572 %2573
               OpSelectionMerge %2576 None
               OpBranchConditional %2574 %2575 %2717
       %2575 = OpLabel
       %2578 = OpLoad %18 %43
       %2579 = OpVectorShuffle %16 %2578 %2578 0 1
       %2580 = OpAccessChain %1169 %1168 %103
       %2581 = OpLoad %16 %2580
       %2582 = OpFDiv %16 %2579 %2581
               OpStore %2577 %2582
       %2584 = OpAccessChain %26 %2577 %190
       %2585 = OpLoad %15 %2584
       %2586 = OpFMul %15 %2585 %1176
       %2587 = OpConvertFToS %6 %2586
       %2588 = OpAccessChain %26 %2577 %205
       %2589 = OpLoad %15 %2588
       %2590 = OpFMul %15 %2589 %1176
       %2591 = OpConvertFToS %6 %2590
       %2592 = OpCompositeConstruct %489 %2587 %2591
               OpStore %2583 %2592
       %2594 = OpAccessChain %9 %2583 %190
       %2595 = OpLoad %6 %2594
       %2596 = OpAccessChain %9 %2583 %205
       %2597 = OpLoad %6 %2596
       %2598 = OpIMul %6 %2597 %138
       %2599 = OpIAdd %6 %2595 %2598
               OpStore %2593 %2599
               OpStore %2600 %1195
       %2602 = OpLoad %6 %2593
               OpStore %2601 %2602
               OpStore %2603 %103
               OpStore %2601 %103
               OpBranch %2604
       %2604 = OpLabel
               OpLoopMerge %2606 %2607 None
               OpBranch %2608
       %2608 = OpLabel
       %2609 = OpLoad %6 %2601
       %2610 = OpLoad %6 %2593
       %2611 = OpSLessThan %20 %2609 %2610
               OpBranchConditional %2611 %2605 %2606
       %2605 = OpLabel
       %2612 = OpLoad %6 %2603
       %2613 = OpSGreaterThanEqual %20 %2612 %476
               OpSelectionMerge %2615 None
               OpBranchConditional %2613 %2614 %2615
       %2614 = OpLabel
               OpBranch %2606
       %2615 = OpLabel
               OpStore %2620 %103
               OpBranch %2621
       %2621 = OpLabel
               OpLoopMerge %2623 %2624 None
               OpBranch %2625
       %2625 = OpLabel
       %2626 = OpLoad %6 %2620
       %2627 = OpINotEqual %20 %2626 %181
               OpBranchConditional %2627 %2622 %2623
       %2622 = OpLabel
       %2628 = OpLoad %6 %2603
       %2629 = OpIAdd %6 %2628 %181
               OpStore %2603 %2629
               OpBranch %2624
       %2624 = OpLabel
       %2630 = OpLoad %6 %2620
       %2631 = OpIAdd %6 %2630 %181
               OpStore %2620 %2631
               OpBranch %2621
       %2623 = OpLabel
       %2632 = OpLoad %6 %2600
       %2633 = OpIMul %6 %894 %2632
       %2634 = OpLoad %6 %2600
       %2635 = OpISub %6 %1216 %2634
       %2636 = OpIMul %6 %2633 %2635
       %2637 = OpSDiv %6 %2636 %1216
               OpStore %2600 %2637
               OpBranch %2607
       %2607 = OpLabel
       %2638 = OpLoad %6 %2601
       %2639 = OpIAdd %6 %2638 %181
               OpStore %2601 %2639
               OpBranch %2604
       %2606 = OpLabel
       %2640 = OpLoad %6 %2600
       %2641 = OpSMod %6 %2640 %544
       %2642 = OpExtInst %6 %1 SClamp %2641 %103 %708
               OpStore %2643 %688
       %2644 = OpAccessChain %19 %2643 %2642
       %2645 = OpLoad %18 %2644
               OpStore %49 %2645
       %2647 = OpAccessChain %382 %136 %103
       %2648 = OpLoad %6 %2647
       %2649 = OpConvertSToF %15 %2648
       %2650 = OpFDiv %15 %2649 %1176
       %2651 = OpSelect %15 %211 %2650 %2646
       %2652 = OpAccessChain %382 %136 %103
       %2653 = OpLoad %6 %2652
       %2654 = OpConvertSToF %15 %2653
       %2655 = OpFDiv %15 %2654 %1176
       %2656 = OpAccessChain %382 %136 %103
       %2657 = OpLoad %6 %2656
       %2658 = OpConvertSToF %15 %2657
       %2659 = OpFDiv %15 %2658 %1176
       %2660 = OpExtInst %15 %1 FClamp %2651 %2655 %2659
       %2661 = OpFAdd %15 %674 %2660
               OpStore %2568 %2661
               OpSelectionMerge %2663 None
               OpBranchConditional %184 %2662 %2663
       %2662 = OpLabel
               OpBranch %2664
       %2664 = OpLabel
               OpLoopMerge %2666 %2667 None
               OpBranch %2665
       %2665 = OpLabel
               OpStore %2668 %138
               OpStore %2669 %2670
               OpStore %2671 %2672
       %2673 = OpLoad %6 %2669
       %2674 = OpExtInst %6 %1 SClamp %2673 %103 %380
       %2675 = OpAccessChain %382 %59 %2674 %181
       %2676 = OpLoad %6 %2675
       %2677 = OpIEqual %20 %2676 %182
               OpSelectionMerge %2679 None
               OpBranchConditional %2677 %2678 %2703
       %2678 = OpLabel
       %2680 = OpLoad %6 %2669
       %2681 = OpExtInst %6 %1 SClamp %2680 %103 %380
       %2682 = OpLoad %6 %2668
       %2683 = OpAccessChain %382 %59 %2681 %181
               OpStore %2683 %2682
       %2684 = OpLoad %6 %2668
       %2685 = OpExtInst %6 %1 SClamp %2684 %103 %380
       %2687 = OpAccessChain %2105 %59 %2685
       %2688 = OpLoad %7 %2687
               OpStore %2686 %2688
       %2690 = OpLoad %6 %2671
               OpStore %2689 %2690
       %2691 = OpFunctionCall %2 %13 %2686 %2689
       %2692 = OpLoad %7 %2686
       %2693 = OpAccessChain %2105 %59 %2685
               OpStore %2693 %2692
       %2694 = OpAccessChain %282 %281 %205
       %2695 = OpLoad %15 %2694
       %2696 = OpFOrdLessThan %20 %2695 %285
               OpSelectionMerge %2698 None
               OpBranchConditional %2696 %2697 %2699
       %2697 = OpLabel
               OpBranch %2698
       %2699 = OpLabel
               OpBranch %2698
       %2698 = OpLabel
               OpSelectionMerge %2701 None
               OpBranchConditional %184 %2700 %2701
       %2700 = OpLabel
               OpBranch %2667
       %2701 = OpLabel
               OpBranch %2679
       %2703 = OpLabel
       %2704 = OpLoad %6 %2669
       %2705 = OpExtInst %6 %1 SClamp %2704 %103 %380
       %2706 = OpAccessChain %382 %59 %2705 %181
       %2707 = OpLoad %6 %2706
               OpStore %2669 %2707
               OpBranch %2679
       %2679 = OpLabel
               OpBranch %2667
       %2667 = OpLabel
               OpBranchConditional %184 %2664 %2666
       %2666 = OpLabel
       %2708 = OpAccessChain %202 %201 %103 %190
       %2709 = OpLoad %15 %2708
       %2710 = OpAccessChain %202 %201 %103 %205
       %2711 = OpLoad %15 %2710
       %2712 = OpFOrdGreaterThan %20 %2709 %2711
               OpSelectionMerge %2714 None
               OpBranchConditional %2712 %2713 %2714
       %2713 = OpLabel
               OpBranch %2518
       %2714 = OpLabel
               OpBranch %2517
       %2663 = OpLabel
               OpBranch %2576
       %2717 = OpLabel
       %2718 = OpAccessChain %349 %128 %205
       %2719 = OpLoad %15 %2718
       %2720 = OpConvertFToS %6 %2719
       %2721 = OpNot %6 %2720
       %2722 = OpBitwiseXor %6 %103 %2721
       %2723 = OpNot %6 %2722
       %2725 = OpSLessThan %20 %2723 %2724
               OpSelectionMerge %2727 None
               OpBranchConditional %2725 %2726 %2753
       %2726 = OpLabel
       %2728 = OpAccessChain %282 %281 %190
       %2729 = OpLoad %15 %2728
       %2730 = OpFOrdGreaterThanEqual %20 %2729 %285
               OpSelectionMerge %2732 None
               OpBranchConditional %2730 %2731 %2732
       %2731 = OpLabel
       %2733 = OpAccessChain %382 %136 %181
       %2734 = OpLoad %6 %2733
       %2735 = OpConvertSToF %15 %2734
       %2736 = OpFDiv %15 %2735 %1176
       %2737 = OpFAdd %15 %674 %2736
               OpStore %2568 %2737
               OpBranch %2732
       %2732 = OpLabel
       %2738 = OpAccessChain %282 %281 %205
       %2739 = OpLoad %15 %2738
       %2740 = OpFOrdLessThan %20 %2739 %285
               OpSelectionMerge %2742 None
               OpBranchConditional %2740 %2741 %2742
       %2741 = OpLabel
               OpBranch %2518
       %2742 = OpLabel
       %2744 = OpAccessChain %282 %281 %205
       %2745 = OpLoad %15 %2744
       %2746 = OpFOrdLessThan %20 %2745 %285
               OpSelectionMerge %2748 None
               OpBranchConditional %2746 %2747 %2748
       %2747 = OpLabel
               OpSelectionMerge %2750 None
               OpBranchConditional %184 %2749 %2750
       %2749 = OpLabel
               OpKill
       %2750 = OpLabel
               OpBranch %2517
       %2748 = OpLabel
               OpBranch %2727
       %2753 = OpLabel
       %2754 = OpAccessChain %349 %128 %205
       %2755 = OpLoad %15 %2754
       %2756 = OpConvertFToS %6 %2755
       %2758 = OpSLessThan %20 %2756 %2757
               OpSelectionMerge %2760 None
               OpBranchConditional %2758 %2759 %2766
       %2759 = OpLabel
       %2761 = OpAccessChain %382 %136 %188
       %2762 = OpLoad %6 %2761
       %2763 = OpConvertSToF %15 %2762
       %2764 = OpFDiv %15 %2763 %1176
       %2765 = OpFAdd %15 %674 %2764
               OpStore %2568 %2765
               OpBranch %2760
       %2766 = OpLabel
       %2767 = OpAccessChain %349 %128 %205
       %2768 = OpLoad %15 %2767
       %2769 = OpConvertFToS %6 %2768
       %2771 = OpSLessThan %20 %2769 %2770
               OpSelectionMerge %2773 None
               OpBranchConditional %2771 %2772 %2798
       %2772 = OpLabel
               OpSelectionMerge %2775 None
               OpBranchConditional %184 %2774 %2775
       %2774 = OpLabel
               OpBranch %2518
       %2775 = OpLabel
       %2778 = OpAccessChain %202 %201 %103 %205
       %2779 = OpLoad %15 %2778
       %2780 = OpConvertFToS %6 %2779
               OpStore %2777 %2780
               OpBranch %2781
       %2781 = OpLabel
               OpLoopMerge %2783 %2784 None
               OpBranch %2785
       %2785 = OpLabel
       %2786 = OpLoad %6 %2777
       %2787 = OpAccessChain %202 %201 %103 %190
       %2788 = OpLoad %15 %2787
       %2789 = OpConvertFToS %6 %2788
       %2790 = OpINotEqual %20 %2786 %2789
               OpBranchConditional %2790 %2782 %2783
       %2782 = OpLabel
       %2791 = OpAccessChain %382 %136 %476
       %2792 = OpLoad %6 %2791
       %2793 = OpConvertSToF %15 %2792
       %2794 = OpFDiv %15 %2793 %1176
       %2795 = OpFAdd %15 %674 %2794
               OpStore %2568 %2795
               OpBranch %2784
       %2784 = OpLabel
       %2796 = OpLoad %6 %2777
       %2797 = OpISub %6 %2796 %181
               OpStore %2777 %2797
               OpBranch %2781
       %2783 = OpLabel
               OpBranch %2773
       %2798 = OpLabel
       %2799 = OpAccessChain %349 %128 %205
       %2800 = OpLoad %15 %2799
       %2801 = OpConvertFToS %6 %2800
       %2802 = OpSLessThan %20 %2801 %1150
               OpSelectionMerge %2804 None
               OpBranchConditional %2802 %2803 %2808
       %2803 = OpLabel
               OpSelectionMerge %2806 None
               OpBranchConditional %184 %2805 %2806
       %2805 = OpLabel
               OpKill
       %2806 = OpLabel
               OpBranch %2804
       %2808 = OpLabel
       %2809 = OpAccessChain %349 %128 %205
       %2810 = OpLoad %15 %2809
       %2811 = OpConvertFToS %6 %2810
       %2812 = OpSLessThan %20 %2811 %1236
               OpSelectionMerge %2814 None
               OpBranchConditional %2812 %2813 %2820
       %2813 = OpLabel
       %2815 = OpAccessChain %382 %136 %292
       %2816 = OpLoad %6 %2815
       %2817 = OpConvertSToF %15 %2816
       %2818 = OpFDiv %15 %2817 %1176
       %2819 = OpFAdd %15 %674 %2818
               OpStore %2568 %2819
               OpBranch %2814
       %2820 = OpLabel
       %2821 = OpAccessChain %349 %128 %205
       %2822 = OpLoad %15 %2821
       %2823 = OpConvertFToS %6 %2822
       %2824 = OpSLessThan %20 %2823 %1279
               OpSelectionMerge %2826 None
               OpBranchConditional %2824 %2825 %2860
       %2825 = OpLabel
       %2827 = OpAccessChain %282 %281 %190
       %2828 = OpLoad %15 %2827
       %2829 = OpFOrdLessThan %20 %2828 %285
               OpSelectionMerge %2831 None
               OpBranchConditional %2829 %2830 %2831
       %2830 = OpLabel
               OpSelectionMerge %2833 None
               OpBranchConditional %184 %2832 %2833
       %2832 = OpLabel
               OpKill
       %2833 = OpLabel
               OpSelectionMerge %2836 None
               OpBranchConditional %184 %2835 %2836
       %2835 = OpLabel
               OpBranch %2518
       %2836 = OpLabel
               OpReturn
       %2831 = OpLabel
       %2840 = OpAccessChain %202 %201 %103 %205
       %2841 = OpLoad %15 %2840
       %2842 = OpConvertFToS %6 %2841
               OpStore %2839 %2842
               OpBranch %2843
       %2843 = OpLabel
               OpLoopMerge %2845 %2846 None
               OpBranch %2847
       %2847 = OpLabel
       %2848 = OpLoad %6 %2839
       %2849 = OpAccessChain %202 %201 %103 %190
       %2850 = OpLoad %15 %2849
       %2851 = OpConvertFToS %6 %2850
       %2852 = OpSGreaterThan %20 %2848 %2851
               OpBranchConditional %2852 %2844 %2845
       %2844 = OpLabel
       %2853 = OpAccessChain %382 %136 %441
       %2854 = OpLoad %6 %2853
       %2855 = OpConvertSToF %15 %2854
       %2856 = OpFDiv %15 %2855 %1176
       %2857 = OpFAdd %15 %674 %2856
               OpStore %2568 %2857
               OpBranch %2846
       %2846 = OpLabel
       %2858 = OpLoad %6 %2839
       %2859 = OpISub %6 %2858 %181
               OpStore %2839 %2859
               OpBranch %2843
       %2845 = OpLabel
               OpBranch %2826
       %2860 = OpLabel
               OpSelectionMerge %2862 None
               OpBranchConditional %184 %2861 %2862
       %2861 = OpLabel
               OpReturn
       %2862 = OpLabel
               OpStore %2864 %103
               OpStore %2865 %2866
               OpStore %2867 %211
               OpStore %2868 %138
               OpStore %2869 %2872
               OpStore %2868 %103
               OpBranch %2873
       %2873 = OpLabel
               OpLoopMerge %2875 %2876 None
               OpBranch %2877
       %2877 = OpLabel
       %2878 = OpLoad %6 %2868
       %2879 = OpSLessThan %20 %2878 %505
               OpBranchConditional %2879 %2874 %2875
       %2874 = OpLabel
       %2880 = OpLoad %6 %2864
       %2881 = OpSGreaterThanEqual %20 %2880 %476
               OpSelectionMerge %2883 None
               OpBranchConditional %2881 %2882 %2883
       %2882 = OpLabel
               OpBranch %2875
       %2883 = OpLabel
       %2885 = OpLoad %6 %2864
       %2886 = OpIAdd %6 %2885 %181
               OpStore %2864 %2886
               OpStore %2887 %103
               OpStore %2865 %103
               OpBranch %2888
       %2888 = OpLabel
               OpLoopMerge %2890 %2891 None
               OpBranch %2892
       %2892 = OpLabel
       %2893 = OpLoad %6 %2865
       %2894 = OpSLessThan %20 %2893 %505
               OpBranchConditional %2894 %2889 %2890
       %2889 = OpLabel
       %2895 = OpLoad %6 %2887
       %2896 = OpSGreaterThanEqual %20 %2895 %476
               OpSelectionMerge %2898 None
               OpBranchConditional %2896 %2897 %2898
       %2897 = OpLabel
               OpBranch %2890
       %2898 = OpLabel
       %2900 = OpLoad %6 %2887
       %2901 = OpIAdd %6 %2900 %181
               OpStore %2887 %2901
       %2902 = OpLoad %6 %2865
       %2903 = OpIMul %6 %2902 %188
       %2904 = OpLoad %6 %2868
       %2905 = OpIMul %6 %2904 %188
       %2906 = OpIMul %6 %2905 %544
       %2907 = OpIAdd %6 %2903 %2906
       %2908 = OpExtInst %6 %1 SClamp %2907 %103 %547
       %2909 = OpAccessChain %382 %96 %2908
       %2910 = OpLoad %6 %2909
       %2911 = OpIEqual %20 %2910 %103
               OpSelectionMerge %2913 None
               OpBranchConditional %2911 %2912 %2913
       %2912 = OpLabel
       %2914 = OpLoad %6 %2865
       %2915 = OpIMul %6 %2914 %188
       %2916 = OpAccessChain %9 %2869 %190
               OpStore %2916 %2915
       %2917 = OpLoad %6 %2868
       %2918 = OpIMul %6 %2917 %188
       %2919 = OpAccessChain %9 %2869 %205
               OpStore %2919 %2918
               OpStore %2867 %211
               OpBranch %2913
       %2913 = OpLabel
               OpBranch %2891
       %2891 = OpLabel
       %2920 = OpLoad %6 %2865
       %2921 = OpIAdd %6 %2920 %181
               OpStore %2865 %2921
               OpBranch %2888
       %2890 = OpLabel
               OpBranch %2876
       %2876 = OpLabel
       %2922 = OpLoad %6 %2868
       %2923 = OpIAdd %6 %2922 %181
               OpStore %2868 %2923
               OpBranch %2873
       %2875 = OpLabel
               OpStore %2924 %181
               OpBranch %2925
       %2925 = OpLabel
               OpLoopMerge %2927 %2928 None
               OpBranch %2929
       %2929 = OpLabel
       %2930 = OpLoad %6 %2924
       %2931 = OpSGreaterThan %20 %2930 %103
               OpBranchConditional %2931 %2926 %2927
       %2926 = OpLabel
               OpSelectionMerge %2933 None
               OpBranchConditional %184 %2932 %2933
       %2932 = OpLabel
               OpReturn
       %2933 = OpLabel
       %2935 = OpAccessChain %349 %128 %205
       %2936 = OpLoad %15 %2935
       %2937 = OpConvertFToS %6 %2936
       %2938 = OpSLessThan %20 %2937 %1322
               OpSelectionMerge %2940 None
               OpBranchConditional %2938 %2939 %2955
       %2939 = OpLabel
       %2941 = OpAccessChain %382 %136 %653
       %2942 = OpLoad %6 %2941
       %2943 = OpConvertSToF %15 %2942
       %2944 = OpFDiv %15 %2943 %1176
       %2945 = OpFAdd %15 %674 %2944
               OpStore %2568 %2945
               OpSelectionMerge %2947 None
               OpBranchConditional %184 %2946 %2947
       %2946 = OpLabel
       %2948 = OpAccessChain %282 %281 %190
       %2949 = OpLoad %15 %2948
       %2950 = OpFOrdLessThan %20 %2949 %285
               OpSelectionMerge %2952 None
               OpBranchConditional %2950 %2951 %2952
       %2951 = OpLabel
               OpBranch %2928
       %2952 = OpLabel
               OpReturn
       %2947 = OpLabel
               OpBranch %2940
       %2955 = OpLabel
               OpStore %2956 %2957
               OpStore %2958 %138
               OpStore %2959 %2960
               OpStore %2961 %103
               OpStore %2956 %103
               OpBranch %2962
       %2962 = OpLabel
               OpLoopMerge %2964 %2965 None
               OpBranch %2966
       %2966 = OpLabel
       %2967 = OpLoad %6 %2956
       %2968 = OpLoad %6 %2959
       %2969 = OpSLessThan %20 %2967 %2968
               OpBranchConditional %2969 %2963 %2964
       %2963 = OpLabel
       %2970 = OpLoad %6 %2961
       %2971 = OpSGreaterThanEqual %20 %2970 %476
               OpSelectionMerge %2973 None
               OpBranchConditional %2971 %2972 %2973
       %2972 = OpLabel
               OpBranch %2964
       %2973 = OpLabel
               OpSelectionMerge %2976 None
               OpBranchConditional %184 %2975 %2977
       %2975 = OpLabel
               OpBranch %2976
       %2977 = OpLabel
               OpSelectionMerge %2979 None
               OpBranchConditional %184 %2978 %2979
       %2978 = OpLabel
               OpReturn
       %2979 = OpLabel
       %2981 = OpLoad %6 %2961
       %2982 = OpIAdd %6 %2981 %181
               OpStore %2961 %2982
               OpBranch %2976
       %2976 = OpLabel
       %2983 = OpLoad %6 %2958
       %2984 = OpIMul %6 %894 %2983
       %2985 = OpLoad %6 %2958
       %2986 = OpISub %6 %1216 %2985
       %2987 = OpIMul %6 %2984 %2986
       %2988 = OpSDiv %6 %2987 %1216
               OpStore %2958 %2988
               OpBranch %2965
       %2965 = OpLabel
       %2989 = OpLoad %6 %2956
       %2990 = OpIAdd %6 %2989 %181
               OpStore %2956 %2990
               OpBranch %2962
       %2964 = OpLabel
       %2991 = OpAccessChain %202 %201 %103 %190
       %2992 = OpLoad %15 %2991
       %2993 = OpFDiv %15 %2992 %332
       %2994 = OpFSub %15 %2993 %285
       %2995 = OpAccessChain %202 %201 %103 %205
       %2996 = OpLoad %15 %2995
       %2997 = OpFOrdGreaterThan %20 %2994 %2996
               OpSelectionMerge %2999 None
               OpBranchConditional %2997 %2998 %3003
       %2998 = OpLabel
               OpSelectionMerge %3001 None
               OpBranchConditional %184 %3000 %3001
       %3000 = OpLabel
               OpReturn
       %3001 = OpLabel
               OpBranch %2999
       %3003 = OpLabel
       %3004 = OpAccessChain %349 %128 %205
       %3005 = OpLoad %15 %3004
       %3006 = OpConvertFToS %6 %3005
       %3007 = OpSLessThan %20 %3006 %1360
               OpSelectionMerge %3009 None
               OpBranchConditional %3007 %3008 %3015
       %3008 = OpLabel
       %3010 = OpAccessChain %382 %136 %505
       %3011 = OpLoad %6 %3010
       %3012 = OpConvertSToF %15 %3011
       %3013 = OpFDiv %15 %3012 %1176
       %3014 = OpFAdd %15 %674 %3013
               OpStore %2568 %3014
               OpBranch %3009
       %3015 = OpLabel
               OpBranch %3009
       %3009 = OpLabel
       %3016 = OpAccessChain %282 %281 %205
       %3017 = OpLoad %15 %3016
       %3018 = OpFOrdLessThan %20 %3017 %285
               OpSelectionMerge %3020 None
               OpBranchConditional %3018 %3019 %3020
       %3019 = OpLabel
               OpBranch %2927
       %3020 = OpLabel
               OpBranch %2999
       %2999 = OpLabel
               OpBranch %2940
       %2940 = OpLabel
               OpBranch %2928
       %2928 = OpLabel
       %3022 = OpLoad %6 %2924
       %3023 = OpISub %6 %3022 %181
               OpStore %2924 %3023
               OpBranch %2925
       %2927 = OpLabel
               OpBranch %2826
       %2826 = OpLabel
               OpBranch %2814
       %2814 = OpLabel
               OpSelectionMerge %3025 None
               OpBranchConditional %184 %3024 %3025
       %3024 = OpLabel
               OpReturn
       %3025 = OpLabel
               OpBranch %2804
       %2804 = OpLabel
               OpBranch %2773
       %2773 = OpLabel
               OpBranch %2760
       %2760 = OpLabel
               OpBranch %2727
       %2727 = OpLabel
               OpBranch %2576
       %2576 = OpLabel
               OpSelectionMerge %3028 None
               OpBranchConditional %184 %3027 %3028
       %3027 = OpLabel
               OpBranch %2517
       %3028 = OpLabel
       %3030 = OpLoad %1000 %1481
       %3031 = OpLoad %1077 %1455
       %3032 = OpVectorShuffle %16 %3031 %3031 0 1
       %3033 = OpImageSampleImplicitLod %18 %3030 %3032
       %3034 = OpCompositeExtract %15 %3033 1
       %3035 = OpAccessChain %26 %1421 %190
               OpStore %3035 %3034
       %3036 = OpAccessChain %202 %201 %103 %190
       %3037 = OpLoad %15 %3036
       %3038 = OpAccessChain %202 %201 %103 %205
       %3039 = OpLoad %15 %3038
       %3040 = OpFOrdLessThan %20 %3037 %3039
       %3041 = OpLogicalAnd %20 %3040 %211
               OpSelectionMerge %3043 None
               OpBranchConditional %3041 %3042 %3043
       %3042 = OpLabel
       %3044 = OpLoad %6 %1412
       %3045 = OpIAdd %6 %3044 %181
               OpStore %1412 %3045
               OpSelectionMerge %3047 None
               OpBranchConditional %184 %3046 %3047
       %3046 = OpLabel
               OpBranch %2517
       %3047 = OpLabel
               OpBranch %3043
       %3043 = OpLabel
       %3049 = OpAccessChain %282 %281 %190
       %3050 = OpLoad %15 %3049
       %3051 = OpFOrdLessThan %20 %3050 %285
               OpSelectionMerge %3053 None
               OpBranchConditional %3051 %3052 %3053
       %3052 = OpLabel
               OpReturn
       %3053 = OpLabel
               OpStore %3055 %103
       %3057 = OpLoad %6 %3055
       %3058 = OpAccessChain %9 %3056 %190
               OpStore %3058 %3057
               OpStore %3059 %3060
               OpSelectionMerge %3062 None
               OpBranchConditional %184 %3061 %3062
       %3061 = OpLabel
               OpBranch %2517
       %3062 = OpLabel
               OpStore %3064 %181
               OpBranch %3065
       %3065 = OpLabel
               OpLoopMerge %3067 %3068 None
               OpBranch %3069
       %3069 = OpLabel
       %3070 = OpLoad %6 %3064
       %3071 = OpAccessChain %202 %201 %103 %190
       %3072 = OpLoad %15 %3071
       %3073 = OpConvertFToS %6 %3072
       %3074 = OpSGreaterThan %20 %3070 %3073
               OpBranchConditional %3074 %3066 %3067
       %3066 = OpLabel
       %3075 = OpLoad %6 %3059
       %3076 = OpAccessChain %9 %3056 %205
               OpStore %3076 %3075
               OpBranch %3068
       %3068 = OpLabel
       %3077 = OpLoad %6 %3064
       %3078 = OpISub %6 %3077 %181
               OpStore %3064 %3078
               OpBranch %3065
       %3067 = OpLabel
               OpStore %3079 %3080
               OpSelectionMerge %3087 None
               OpBranchConditional %211 %3086 %3089
       %3086 = OpLabel
               OpStore %3085 %3088
               OpBranch %3087
       %3089 = OpLabel
       %3090 = OpLoad %15 %1480
       %3091 = OpBitcast %6 %3090
               OpStore %3085 %3091
               OpBranch %3087
       %3087 = OpLabel
       %3092 = OpLoad %6 %3085
       %3097 = OpAccessChain %202 %201 %103 %205
       %3098 = OpLoad %15 %3097
       %3099 = OpConvertFToS %6 %3098
       %3101 = OpCompositeConstruct %3100 %3093 %181 %3099 %103
       %3102 = OpCompositeExtract %6 %3101 0
       %3103 = OpSDiv %6 %3102 %181
       %3104 = OpCompositeConstruct %134 %3083 %3084 %3092 %3093 %3094 %3095 %103 %3096 %3084 %3103
               OpStore %3082 %3104
               OpStore %3105 %3106
               OpBranch %3107
       %3107 = OpLabel
               OpLoopMerge %3109 %3110 None
               OpBranch %3108
       %3108 = OpLabel
       %3111 = OpAccessChain %282 %281 %205
       %3112 = OpLoad %15 %3111
       %3113 = OpFOrdLessThan %20 %3112 %285
               OpSelectionMerge %3115 None
               OpBranchConditional %3113 %3114 %3115
       %3114 = OpLabel
               OpBranch %3109
       %3115 = OpLabel
       %3117 = OpAccessChain %282 %281 %190
       %3118 = OpLoad %15 %3117
       %3119 = OpFOrdLessThan %20 %3118 %285
               OpSelectionMerge %3121 None
               OpBranchConditional %3119 %3120 %3122
       %3120 = OpLabel
               OpBranch %3121
       %3122 = OpLabel
       %3123 = OpAccessChain %282 %281 %205
       %3124 = OpLoad %15 %3123
       %3125 = OpFOrdLessThan %20 %3124 %285
               OpSelectionMerge %3127 None
               OpBranchConditional %3125 %3126 %3127
       %3126 = OpLabel
               OpBranch %3109
       %3127 = OpLabel
               OpSelectionMerge %3130 None
               OpBranchConditional %211 %3129 %3130
       %3129 = OpLabel
               OpBranch %3131
       %3131 = OpLabel
               OpLoopMerge %3133 %3134 None
               OpBranch %3135
       %3135 = OpLabel
       %3136 = OpAccessChain %9 %3056 %205
       %3137 = OpLoad %6 %3136
       %3138 = OpSGreaterThanEqual %20 %3137 %103
               OpBranchConditional %3138 %3132 %3133
       %3132 = OpLabel
               OpSelectionMerge %3140 None
               OpBranchConditional %184 %3139 %3140
       %3139 = OpLabel
       %3141 = OpAccessChain %282 %281 %205
       %3142 = OpLoad %15 %3141
       %3143 = OpFOrdLessThan %20 %3142 %285
               OpSelectionMerge %3145 None
               OpBranchConditional %3143 %3144 %3146
       %3144 = OpLabel
               OpBranch %3145
       %3146 = OpLabel
               OpReturn
       %3145 = OpLabel
               OpBranch %3140
       %3140 = OpLabel
       %3148 = OpAccessChain %9 %3056 %190
       %3149 = OpLoad %6 %3148
       %3150 = OpSGreaterThanEqual %20 %3149 %441
               OpSelectionMerge %3152 None
               OpBranchConditional %3150 %3151 %3152
       %3151 = OpLabel
               OpBranch %3133
       %3152 = OpLabel
       %3154 = OpAccessChain %9 %3056 %190
       %3155 = OpLoad %6 %3154
       %3156 = OpIAdd %6 %3155 %181
               OpStore %3154 %3156
       %3157 = OpAccessChain %9 %3056 %205
       %3158 = OpLoad %6 %3157
       %3159 = OpISub %6 %3158 %181
               OpStore %3157 %3159
       %3160 = OpExtInst %6 %1 SClamp %3158 %103 %380
       %3161 = OpAccessChain %9 %3082 %3160
       %3162 = OpLoad %6 %3161
               OpStore %3079 %3162
               OpSelectionMerge %3164 None
               OpBranchConditional %184 %3163 %3164
       %3163 = OpLabel
               OpBranch %3133
       %3164 = OpLabel
       %3166 = OpLogicalNot %20 %184
               OpSelectionMerge %3168 None
               OpBranchConditional %3166 %3167 %3168
       %3167 = OpLabel
       %3169 = OpAccessChain %282 %281 %190
       %3170 = OpLoad %15 %3169
       %3171 = OpFOrdGreaterThanEqual %20 %3170 %285
               OpBranch %3168
       %3168 = OpLabel
       %3172 = OpPhi %20 %184 %3164 %3171 %3167
               OpSelectionMerge %3174 None
               OpBranchConditional %3172 %3173 %3174
       %3173 = OpLabel
       %3175 = OpAccessChain %9 %3056 %205
       %3176 = OpLoad %6 %3175
       %3177 = OpISub %6 %3176 %181
               OpStore %3175 %3177
       %3178 = OpExtInst %6 %1 SClamp %3176 %103 %380
       %3179 = OpAccessChain %9 %3082 %3178
       %3180 = OpLoad %6 %3179
               OpStore %3105 %3180
       %3181 = OpAccessChain %202 %201 %103 %190
       %3182 = OpLoad %15 %3181
       %3183 = OpAccessChain %202 %201 %103 %205
       %3184 = OpLoad %15 %3183
       %3185 = OpFOrdGreaterThan %20 %3182 %3184
               OpSelectionMerge %3187 None
               OpBranchConditional %3185 %3186 %3187
       %3186 = OpLabel
               OpBranch %3133
       %3187 = OpLabel
               OpBranch %3174
       %3174 = OpLabel
       %3191 = OpLoad %6 %3105
               OpStore %3190 %3191
       %3193 = OpLoad %6 %3079
               OpStore %3192 %3193
       %3194 = OpFunctionCall %6 %40 %3190 %3192
               OpStore %3189 %3194
       %3195 = OpAccessChain %282 %281 %205
       %3196 = OpLoad %15 %3195
       %3197 = OpFOrdLessThan %20 %3196 %285
               OpSelectionMerge %3199 None
               OpBranchConditional %3197 %3198 %3199
       %3198 = OpLabel
               OpBranch %3133
       %3199 = OpLabel
               OpStore %3201 %3202
               OpStore %3203 %3206
               OpStore %3207 %103
       %3208 = OpAccessChain %202 %201 %103 %190
       %3209 = OpLoad %15 %3208
       %3210 = OpAccessChain %202 %201 %103 %205
       %3211 = OpLoad %15 %3210
       %3213 = OpCompositeConstruct %16 %3211 %285
       %3214 = OpCompositeConstruct %16 %285 %285
       %3215 = OpCompositeConstruct %3212 %3213 %3214
       %3216 = OpCompositeExtract %15 %3215 0 0
       %3217 = OpFOrdGreaterThan %20 %3209 %3216
               OpSelectionMerge %3219 None
               OpBranchConditional %3217 %3218 %3219
       %3218 = OpLabel
               OpBranch %3134
       %3219 = OpLabel
       %3225 = OpAccessChain %202 %201 %103 %205
       %3226 = OpLoad %15 %3225
       %3227 = OpCompositeConstruct %1077 %3224 %285 %3226
       %3228 = OpCompositeExtract %15 %3227 0
       %3229 = OpCompositeConstruct %18 %3222 %1483 %3223 %3228
               OpStore %3221 %3229
               OpBranch %3230
       %3230 = OpLabel
               OpLoopMerge %3232 %3233 None
               OpBranch %3234
       %3234 = OpLabel
       %3235 = OpAccessChain %26 %3221 %190
       %3236 = OpLoad %15 %3235
       %3237 = OpAccessChain %26 %3221 %205
       %3238 = OpLoad %15 %3237
       %3239 = OpFAdd %15 %3236 %3238
       %3240 = OpAccessChain %26 %3221 %251
       %3241 = OpLoad %15 %3240
       %3242 = OpFAdd %15 %3239 %3241
       %3243 = OpFOrdGreaterThan %20 %3242 %332
       %3244 = OpLoad %6 %3201
       %3245 = OpSLessThan %20 %3244 %544
       %3246 = OpLogicalAnd %20 %3243 %3245
               OpBranchConditional %3246 %3231 %3232
       %3231 = OpLabel
       %3247 = OpLoad %6 %3207
       %3248 = OpSGreaterThanEqual %20 %3247 %441
               OpSelectionMerge %3250 None
               OpBranchConditional %3248 %3249 %3250
       %3249 = OpLabel
               OpBranch %3232
       %3250 = OpLabel
       %3252 = OpLoad %6 %3207
       %3253 = OpIAdd %6 %3252 %181
               OpStore %3207 %3253
               OpBranch %3254
       %3254 = OpLabel
               OpLoopMerge %3256 %3257 None
               OpBranch %3255
       %3255 = OpLabel
       %3258 = OpLoad %18 %3221
       %3259 = OpVectorShuffle %16 %3258 %3258 0 2
       %3260 = OpLoad %18 %3221
       %3261 = OpVectorShuffle %16 %3260 %3260 1 1
       %3262 = OpFAdd %16 %3259 %3261
               OpStore %3203 %3262
               OpSelectionMerge %3264 None
               OpBranchConditional %184 %3263 %3264
       %3263 = OpLabel
               OpBranch %3256
       %3264 = OpLabel
               OpBranch %3257
       %3257 = OpLabel
               OpBranchConditional %184 %3254 %3256
       %3256 = OpLabel
               OpSelectionMerge %3267 None
               OpBranchConditional %184 %3266 %3267
       %3266 = OpLabel
               OpBranch %3233
       %3267 = OpLabel
       %3269 = OpLoad %16 %3203
       %3270 = OpVectorTimesScalar %16 %3269 %2475
       %3271 = OpAccessChain %202 %201 %103 %205
       %3272 = OpLoad %15 %3271
       %3273 = OpCompositeConstruct %16 %3272 %285
       %3274 = OpCompositeConstruct %16 %285 %3272
       %3275 = OpCompositeConstruct %3212 %3273 %3274
       %3276 = OpVectorTimesMatrix %16 %3270 %3275
       %3277 = OpLoad %16 %3203
       %3278 = OpVectorTimesScalar %16 %3277 %2475
       %3279 = OpAccessChain %202 %201 %103 %205
       %3280 = OpLoad %15 %3279
       %3281 = OpCompositeConstruct %16 %3280 %285
       %3282 = OpCompositeConstruct %16 %285 %3280
       %3283 = OpCompositeConstruct %3212 %3281 %3282
       %3284 = OpVectorTimesMatrix %16 %3278 %3283
       %3285 = OpLoad %16 %3203
       %3286 = OpVectorTimesScalar %16 %3285 %2475
       %3287 = OpAccessChain %202 %201 %103 %205
       %3288 = OpLoad %15 %3287
       %3289 = OpCompositeConstruct %16 %3288 %285
       %3290 = OpCompositeConstruct %16 %285 %3288
       %3291 = OpCompositeConstruct %3212 %3289 %3290
       %3292 = OpVectorTimesMatrix %16 %3286 %3291
       %3293 = OpExtInst %16 %1 FClamp %3276 %3284 %3292
       %3294 = OpExtInst %16 %1 Floor %3293
       %3295 = OpCompositeConstruct %16 %2475 %2475
       %3296 = OpFDiv %16 %3294 %3295
               OpStore %3203 %3296
       %3297 = OpAccessChain %202 %201 %103 %190
       %3298 = OpLoad %15 %3297
       %3299 = OpAccessChain %202 %201 %103 %205
       %3300 = OpLoad %15 %3299
       %3301 = OpFOrdLessThan %20 %3298 %3300
               OpSelectionMerge %3303 None
               OpBranchConditional %3301 %3302 %3303
       %3302 = OpLabel
       %3304 = OpLoad %1000 %2491
       %3305 = OpLoad %16 %3203
       %3306 = OpImageSampleImplicitLod %18 %3304 %3305
               OpStore %3221 %3306
               OpBranch %3303
       %3303 = OpLabel
       %3307 = OpLoad %6 %3201
       %3308 = OpIAdd %6 %3307 %181
               OpStore %3201 %3308
               OpBranch %3233
       %3233 = OpLabel
               OpBranch %3230
       %3232 = OpLabel
               OpSelectionMerge %3310 None
               OpBranchConditional %211 %3309 %3310
       %3309 = OpLabel
       %3311 = OpLoad %6 %3189
       %3312 = OpISub %6 %3311 %181
       %3313 = OpLoad %6 %3105
       %3314 = OpSGreaterThan %20 %3312 %3313
               OpSelectionMerge %3316 None
               OpBranchConditional %3314 %3315 %3316
       %3315 = OpLabel
               OpStore %3317 %103
               OpBranch %3318
       %3318 = OpLabel
               OpLoopMerge %3320 %3321 None
               OpBranch %3322
       %3322 = OpLabel
       %3323 = OpLoad %6 %3317
       %3324 = OpINotEqual %20 %3323 %181
               OpBranchConditional %3324 %3319 %3320
       %3319 = OpLabel
       %3325 = OpAccessChain %202 %201 %103 %190
       %3326 = OpLoad %15 %3325
       %3327 = OpAccessChain %202 %201 %103 %205
       %3328 = OpLoad %15 %3327
       %3329 = OpFOrdGreaterThan %20 %3326 %3328
               OpSelectionMerge %3331 None
               OpBranchConditional %3329 %3330 %3331
       %3330 = OpLabel
               OpBranch %3321
       %3331 = OpLabel
       %3333 = OpAccessChain %9 %3056 %205
       %3334 = OpLoad %6 %3333
       %3335 = OpIAdd %6 %3334 %181
               OpStore %3333 %3335
       %3336 = OpExtInst %6 %1 SClamp %3335 %103 %380
       %3337 = OpLoad %6 %3105
       %3338 = OpAccessChain %9 %3082 %3336
               OpStore %3338 %3337
       %3339 = OpISub %6 %3337 %103
               OpBranch %3321
       %3321 = OpLabel
       %3340 = OpLoad %6 %3317
       %3341 = OpIAdd %6 %3340 %181
               OpStore %3317 %3341
               OpBranch %3318
       %3320 = OpLabel
       %3342 = OpAccessChain %9 %3056 %205
       %3343 = OpLoad %6 %3342
       %3344 = OpIAdd %6 %3343 %181
               OpStore %3342 %3344
       %3345 = OpExtInst %6 %1 SClamp %3344 %103 %380
       %3346 = OpLoad %6 %3189
       %3347 = OpISub %6 %3346 %181
       %3348 = OpAccessChain %9 %3082 %3345
               OpStore %3348 %3347
               OpBranch %3316
       %3316 = OpLabel
               OpBranch %3310
       %3310 = OpLabel
       %3349 = OpLogicalNot %20 %184
               OpSelectionMerge %3351 None
               OpBranchConditional %3349 %3350 %3351
       %3350 = OpLabel
       %3352 = OpLoad %6 %3189
       %3353 = OpIAdd %6 %3352 %181
       %3354 = OpLoad %6 %3079
       %3355 = OpSLessThan %20 %3353 %3354
               OpBranch %3351
       %3351 = OpLabel
       %3356 = OpPhi %20 %184 %3310 %3355 %3350
               OpSelectionMerge %3358 None
               OpBranchConditional %3356 %3357 %3358
       %3357 = OpLabel
       %3359 = OpAccessChain %9 %3056 %205
       %3360 = OpLoad %6 %3359
       %3361 = OpIAdd %6 %3360 %181
               OpStore %3359 %3361
       %3362 = OpExtInst %6 %1 SClamp %3361 %103 %380
       %3363 = OpLoad %6 %3189
       %3364 = OpIAdd %6 %3363 %181
       %3365 = OpAccessChain %9 %3082 %3362
               OpStore %3365 %3364
       %3366 = OpAccessChain %202 %201 %103 %190
       %3367 = OpLoad %15 %3366
       %3368 = OpAccessChain %202 %201 %103 %205
       %3369 = OpLoad %15 %3368
       %3370 = OpFOrdGreaterThan %20 %3367 %3369
               OpSelectionMerge %3372 None
               OpBranchConditional %3370 %3371 %3372
       %3371 = OpLabel
               OpReturn
       %3372 = OpLabel
       %3374 = OpAccessChain %9 %3056 %205
       %3375 = OpLoad %6 %3374
       %3376 = OpIAdd %6 %3375 %181
               OpStore %3374 %3376
       %3377 = OpExtInst %6 %1 SClamp %3376 %103 %380
       %3378 = OpLoad %6 %3079
       %3379 = OpAccessChain %9 %3082 %3377
               OpStore %3379 %3378
               OpSelectionMerge %3381 None
               OpBranchConditional %184 %3380 %3381
       %3380 = OpLabel
               OpBranch %3133
       %3381 = OpLabel
               OpBranch %3358
       %3358 = OpLabel
               OpStore %3383 %3384
               OpStore %3385 %3386
       %3387 = OpLoad %6 %3383
       %3388 = OpIEqual %20 %3387 %182
               OpSelectionMerge %3390 None
               OpBranchConditional %3388 %3389 %3390
       %3389 = OpLabel
       %3391 = OpLoad %6 %3385
       %3392 = OpIAdd %6 %3391 %181
               OpStore %3385 %3392
               OpBranch %3390
       %3390 = OpLabel
               OpBranch %3134
       %3134 = OpLabel
               OpBranch %3131
       %3133 = OpLabel
               OpBranch %3130
       %3130 = OpLabel
               OpBranch %3121
       %3121 = OpLabel
               OpBranch %3110
       %3110 = OpLabel
       %3393 = OpAccessChain %282 %281 %205
       %3394 = OpLoad %15 %3393
       %3395 = OpFOrdLessThan %20 %3394 %285
       %3396 = OpCompositeConstruct %1503 %3395 %184
       %3397 = OpCompositeExtract %20 %3396 0
               OpBranchConditional %3397 %3107 %3109
       %3109 = OpLabel
               OpBranch %2518
       %2518 = OpLabel
               OpBranch %2515
       %2517 = OpLabel
               OpBranch %2042
       %2042 = OpLabel
               OpSelectionMerge %3399 None
               OpBranchConditional %184 %3398 %3399
       %3398 = OpLabel
               OpReturn
       %3399 = OpLabel
       %3402 = OpLoad %18 %43
       %3403 = OpVectorShuffle %16 %3402 %3402 0 1
       %3404 = OpAccessChain %1169 %1168 %103
       %3405 = OpLoad %16 %3404
       %3406 = OpFDiv %16 %3403 %3405
               OpStore %3401 %3406
               OpSelectionMerge %3408 None
               OpBranchConditional %184 %3407 %3408
       %3407 = OpLabel
               OpReturn
       %3408 = OpLabel
       %3411 = OpAccessChain %26 %3401 %190
       %3412 = OpLoad %15 %3411
       %3413 = OpFMul %15 %3412 %1176
       %3414 = OpConvertFToS %6 %3413
       %3415 = OpAccessChain %26 %3401 %205
       %3416 = OpLoad %15 %3415
       %3417 = OpFMul %15 %3416 %1176
       %3418 = OpConvertFToS %6 %3417
       %3419 = OpCompositeConstruct %489 %3414 %3418
               OpStore %3410 %3419
       %3421 = OpAccessChain %9 %3410 %190
       %3422 = OpLoad %6 %3421
       %3423 = OpAccessChain %9 %3410 %205
       %3424 = OpLoad %6 %3423
       %3425 = OpIMul %6 %3424 %138
       %3426 = OpIAdd %6 %3422 %3425
               OpStore %3420 %3426
               OpStore %3427 %1195
               OpSelectionMerge %3429 None
               OpBranchConditional %184 %3428 %3429
       %3428 = OpLabel
               OpReturn
       %3429 = OpLabel
       %3432 = OpLoad %6 %3420
               OpStore %3431 %3432
               OpStore %3433 %103
               OpStore %3431 %103
               OpBranch %3434
       %3434 = OpLabel
               OpLoopMerge %3436 %3437 None
               OpBranch %3438
       %3438 = OpLabel
       %3439 = OpLoad %6 %3431
       %3440 = OpLoad %6 %3420
       %3441 = OpSLessThan %20 %3439 %3440
               OpBranchConditional %3441 %3435 %3436
       %3435 = OpLabel
       %3442 = OpLoad %6 %3433
       %3443 = OpSGreaterThanEqual %20 %3442 %476
               OpSelectionMerge %3445 None
               OpBranchConditional %3443 %3444 %3445
       %3444 = OpLabel
               OpBranch %3436
       %3445 = OpLabel
       %3447 = OpLoad %6 %3433
       %3448 = OpIAdd %6 %3447 %181
               OpStore %3433 %3448
               OpStore %3449 %103
               OpBranch %3450
       %3450 = OpLabel
               OpLoopMerge %3452 %3453 None
               OpBranch %3454
       %3454 = OpLabel
       %3455 = OpLoad %6 %3449
       %3456 = OpINotEqual %20 %3455 %181
               OpBranchConditional %3456 %3451 %3452
       %3451 = OpLabel
               OpSelectionMerge %3458 None
               OpBranchConditional %184 %3457 %3458
       %3457 = OpLabel
               OpBranch %3453
       %3458 = OpLabel
       %3460 = OpLoad %6 %3427
       %3461 = OpIMul %6 %894 %3460
       %3462 = OpLoad %6 %3427
       %3463 = OpISub %6 %1216 %3462
       %3464 = OpIMul %6 %3461 %3463
       %3465 = OpSDiv %6 %3464 %1216
               OpStore %3427 %3465
               OpBranch %3453
       %3453 = OpLabel
       %3466 = OpLoad %6 %3449
       %3467 = OpIAdd %6 %3466 %181
               OpStore %3449 %3467
               OpBranch %3450
       %3452 = OpLabel
               OpBranch %3437
       %3437 = OpLabel
       %3468 = OpLoad %6 %3431
       %3469 = OpIAdd %6 %3468 %181
               OpStore %3431 %3469
               OpBranch %3434
       %3436 = OpLabel
       %3470 = OpLoad %6 %3427
       %3471 = OpSMod %6 %3470 %544
       %3472 = OpExtInst %6 %1 SClamp %3471 %103 %708
               OpStore %3473 %688
       %3474 = OpAccessChain %19 %3473 %3472
       %3475 = OpLoad %18 %3474
               OpStore %49 %3475
               OpBranch %2040
       %2040 = OpLabel
               OpBranch %3476
       %3476 = OpLabel
               OpLoopMerge %3478 %3479 None
               OpBranch %3477
       %3477 = OpLabel
               OpBranch %3479
       %3479 = OpLabel
       %3480 = OpAccessChain %202 %201 %103 %190
       %3481 = OpLoad %15 %3480
       %3482 = OpAccessChain %202 %201 %103 %205
       %3483 = OpLoad %15 %3482
       %3484 = OpFOrdGreaterThan %20 %3481 %3483
               OpBranchConditional %3484 %3476 %3478
       %3478 = OpLabel
       %3487 = OpLoad %6 %1412
       %3488 = OpConvertSToF %15 %3487
       %3490 = OpFMul %15 %3488 %3489
       %3491 = OpCompositeConstruct %1077 %3490 %3490 %3490
       %3492 = OpCompositeExtract %15 %3491 0
       %3493 = OpCompositeExtract %15 %3491 1
       %3494 = OpCompositeExtract %15 %3491 2
       %3495 = OpCompositeConstruct %18 %3492 %3493 %3494 %332
               OpStore %3486 %3495
               OpReturn
               OpFunctionEnd
         %13 = OpFunction %2 None %10
         %11 = OpFunctionParameter %8
         %12 = OpFunctionParameter %9
         %14 = OpLabel
        %179 = OpLoad %6 %12
        %180 = OpAccessChain %9 %11 %103
               OpStore %180 %179
        %183 = OpAccessChain %9 %11 %181
               OpStore %183 %182
               OpSelectionMerge %186 None
               OpBranchConditional %184 %185 %186
        %185 = OpLabel
               OpReturn
        %186 = OpLabel
        %189 = OpAccessChain %9 %11 %188
               OpStore %189 %182
               OpReturn
               OpFunctionEnd
         %24 = OpFunction %20 None %21
         %22 = OpFunctionParameter %17
         %23 = OpFunctionParameter %19
         %25 = OpLabel
        %231 = OpVariable %26 Function
        %246 = OpVariable %26 Function
        %290 = OpVariable %9 Function
        %300 = OpVariable %9 Function
        %320 = OpVariable %9 Function
        %191 = OpAccessChain %26 %22 %190
        %192 = OpLoad %15 %191
        %193 = OpAccessChain %26 %23 %190
        %194 = OpLoad %15 %193
        %195 = OpFOrdLessThan %20 %192 %194
               OpSelectionMerge %197 None
               OpBranchConditional %195 %196 %197
        %196 = OpLabel
               OpReturnValue %184
        %197 = OpLabel
        %203 = OpAccessChain %202 %201 %103 %190
        %204 = OpLoad %15 %203
        %206 = OpAccessChain %202 %201 %103 %205
        %207 = OpLoad %15 %206
        %208 = OpFOrdGreaterThan %20 %204 %207
               OpSelectionMerge %210 None
               OpBranchConditional %208 %209 %210
        %209 = OpLabel
               OpReturnValue %211
        %210 = OpLabel
               OpSelectionMerge %214 None
               OpBranchConditional %184 %213 %214
        %213 = OpLabel
               OpReturnValue %211
        %214 = OpLabel
               OpSelectionMerge %217 None
               OpBranchConditional %184 %216 %217
        %216 = OpLabel
               OpReturnValue %211
        %217 = OpLabel
        %219 = OpAccessChain %26 %22 %205
        %220 = OpLoad %15 %219
        %221 = OpAccessChain %26 %23 %205
        %222 = OpLoad %15 %221
        %223 = OpFOrdLessThan %20 %220 %222
               OpSelectionMerge %225 None
               OpBranchConditional %223 %224 %225
        %224 = OpLabel
               OpBranch %226
        %226 = OpLabel
               OpLoopMerge %228 %229 None
               OpBranch %227
        %227 = OpLabel
               OpReturnValue %184
        %229 = OpLabel
               OpBranch %226
        %228 = OpLabel
               OpUnreachable
        %225 = OpLabel
               OpSelectionMerge %233 None
               OpBranchConditional %184 %232 %235
        %232 = OpLabel
               OpStore %231 %234
               OpBranch %233
        %235 = OpLabel
        %236 = OpAccessChain %26 %22 %190
        %237 = OpLoad %15 %236
               OpStore %231 %237
               OpBranch %233
        %233 = OpLabel
        %238 = OpLoad %15 %231
        %239 = OpAccessChain %26 %22 %190
        %240 = OpLoad %15 %239
        %241 = OpAccessChain %26 %22 %190
        %242 = OpLoad %15 %241
        %243 = OpExtInst %15 %1 FClamp %238 %240 %242
        %244 = OpAccessChain %26 %23 %190
        %245 = OpLoad %15 %244
               OpSelectionMerge %248 None
               OpBranchConditional %184 %247 %250
        %247 = OpLabel
               OpStore %246 %249
               OpBranch %248
        %250 = OpLabel
        %252 = OpAccessChain %26 %23 %251
        %253 = OpLoad %15 %252
               OpStore %246 %253
               OpBranch %248
        %248 = OpLabel
        %254 = OpLoad %15 %246
        %255 = OpAccessChain %26 %23 %251
        %256 = OpLoad %15 %255
        %257 = OpAccessChain %26 %23 %251
        %258 = OpLoad %15 %257
        %259 = OpExtInst %15 %1 FClamp %254 %256 %258
        %260 = OpFAdd %15 %245 %259
        %261 = OpFOrdGreaterThan %20 %243 %260
               OpSelectionMerge %263 None
               OpBranchConditional %261 %262 %263
        %262 = OpLabel
               OpReturnValue %184
        %263 = OpLabel
               OpBranch %265
        %265 = OpLabel
               OpLoopMerge %267 %268 None
               OpBranch %266
        %266 = OpLabel
        %269 = OpAccessChain %26 %22 %205
        %270 = OpLoad %15 %269
        %271 = OpAccessChain %26 %23 %205
        %272 = OpLoad %15 %271
        %274 = OpAccessChain %26 %23 %273
        %275 = OpLoad %15 %274
        %276 = OpFAdd %15 %272 %275
        %277 = OpFOrdGreaterThan %20 %270 %276
               OpSelectionMerge %279 None
               OpBranchConditional %277 %278 %279
        %278 = OpLabel
        %283 = OpAccessChain %282 %281 %205
        %284 = OpLoad %15 %283
        %286 = OpFOrdLessThan %20 %284 %285
               OpSelectionMerge %288 None
               OpBranchConditional %286 %287 %288
        %287 = OpLabel
               OpReturnValue %211
        %288 = OpLabel
               OpStore %290 %103
        %291 = OpLoad %6 %290
        %293 = OpSGreaterThanEqual %20 %291 %292
               OpSelectionMerge %295 None
               OpBranchConditional %293 %294 %295
        %294 = OpLabel
               OpBranch %295
        %295 = OpLabel
               OpReturnValue %184
        %279 = OpLabel
               OpBranch %268
        %268 = OpLabel
        %297 = OpAccessChain %282 %281 %190
        %298 = OpLoad %15 %297
        %299 = OpFOrdLessThan %20 %298 %285
               OpBranchConditional %299 %265 %267
        %267 = OpLabel
        %301 = OpAccessChain %202 %201 %103 %190
        %302 = OpLoad %15 %301
        %303 = OpConvertFToS %6 %302
               OpStore %300 %303
               OpBranch %304
        %304 = OpLabel
               OpLoopMerge %306 %307 None
               OpBranch %308
        %308 = OpLabel
        %309 = OpLoad %6 %300
        %310 = OpSLessThan %20 %309 %181
               OpBranchConditional %310 %305 %306
        %305 = OpLabel
               OpReturnValue %211
        %307 = OpLabel
               OpBranch %304
        %306 = OpLabel
               OpSelectionMerge %318 None
               OpBranchConditional %184 %317 %319
        %317 = OpLabel
               OpBranch %318
        %319 = OpLabel
               OpStore %320 %103
               OpBranch %321
        %321 = OpLabel
               OpLoopMerge %323 %324 None
               OpBranch %325
        %325 = OpLabel
        %326 = OpLoad %6 %320
        %327 = OpINotEqual %20 %326 %181
               OpBranchConditional %327 %322 %323
        %322 = OpLabel
               OpSelectionMerge %329 None
               OpBranchConditional %184 %328 %329
        %328 = OpLabel
        %330 = OpAccessChain %282 %281 %205
        %331 = OpLoad %15 %330
        %334 = OpAccessChain %202 %201 %103 %190
        %335 = OpLoad %15 %334
        %336 = OpCompositeConstruct %18 %332 %285 %332 %335
        %337 = OpDot %15 %333 %336
        %338 = OpFOrdLessThan %20 %331 %337
               OpSelectionMerge %340 None
               OpBranchConditional %338 %339 %340
        %339 = OpLabel
               OpBranch %324
        %340 = OpLabel
               OpReturnValue %211
        %329 = OpLabel
               OpBranch %324
        %324 = OpLabel
        %343 = OpLoad %6 %320
        %344 = OpIAdd %6 %343 %181
               OpStore %320 %344
               OpBranch %321
        %323 = OpLabel
               OpSelectionMerge %346 None
               OpBranchConditional %184 %345 %346
        %345 = OpLabel
               OpReturnValue %211
        %346 = OpLabel
               OpBranch %318
        %318 = OpLabel
        %348 = OpUndef %20
               OpReturnValue %348
               OpFunctionEnd
         %30 = OpFunction %20 None %27
         %28 = OpFunctionParameter %26
         %29 = OpFunctionParameter %26
         %31 = OpLabel
        %362 = OpVariable %361 Function
        %350 = OpAccessChain %349 %158 %205
        %351 = OpLoad %15 %350
        %356 = OpAccessChain %355 %354 %103 %205
        %357 = OpLoad %15 %356
        %359 = OpFDiv %15 %357 %358
        %360 = OpFOrdLessThan %20 %351 %359
               OpSelectionMerge %364 None
               OpBranchConditional %360 %363 %368
        %363 = OpLabel
        %365 = OpLoad %15 %28
        %366 = OpLoad %15 %29
        %367 = OpFOrdGreaterThan %20 %365 %366
               OpStore %362 %367
               OpBranch %364
        %368 = OpLabel
        %369 = OpLoad %15 %28
        %370 = OpLoad %15 %29
        %371 = OpFOrdLessThan %20 %369 %370
               OpStore %362 %371
               OpBranch %364
        %364 = OpLabel
        %372 = OpLoad %20 %362
        %373 = OpLogicalOr %20 %372 %184
               OpReturnValue %373
               OpFunctionEnd
         %35 = OpFunction %2 None %32
         %33 = OpFunctionParameter %9
         %34 = OpFunctionParameter %9
         %36 = OpLabel
        %376 = OpVariable %9 Function
        %388 = OpVariable %9 Function
        %377 = OpLoad %6 %33
        %378 = OpBitwiseOr %6 %103 %377
        %379 = OpBitwiseXor %6 %378 %103
        %381 = OpExtInst %6 %1 SClamp %379 %103 %380
        %383 = OpAccessChain %382 %166 %103 %381
        %384 = OpLoad %6 %383
               OpStore %376 %384
               OpSelectionMerge %386 None
               OpBranchConditional %184 %385 %386
        %385 = OpLabel
               OpReturn
        %386 = OpLabel
               OpStore %388 %103
               OpBranch %389
        %389 = OpLabel
               OpLoopMerge %391 %392 None
               OpBranch %393
        %393 = OpLabel
        %394 = OpLoad %6 %388
        %395 = OpINotEqual %20 %394 %181
               OpBranchConditional %395 %390 %391
        %390 = OpLabel
        %396 = OpLoad %6 %33
        %397 = OpExtInst %6 %1 SClamp %396 %103 %380
        %398 = OpLoad %6 %34
        %399 = OpExtInst %6 %1 SClamp %398 %103 %380
        %400 = OpISub %6 %399 %103
        %401 = OpAccessChain %382 %166 %103 %400
        %402 = OpLoad %6 %401
        %403 = OpAccessChain %382 %166 %103 %397
               OpStore %403 %402
               OpBranch %392
        %392 = OpLabel
        %404 = OpLoad %6 %388
        %405 = OpIAdd %6 %404 %181
               OpStore %388 %405
               OpBranch %389
        %391 = OpLabel
               OpSelectionMerge %407 None
               OpBranchConditional %184 %406 %408
        %406 = OpLabel
               OpBranch %407
        %408 = OpLabel
        %409 = OpAccessChain %202 %201 %103 %190
        %410 = OpLoad %15 %409
        %411 = OpConvertFToS %6 %410
        %412 = OpLoad %6 %34
        %413 = OpExtInst %6 %1 SClamp %412 %103 %380
        %414 = OpLoad %6 %376
        %415 = OpAccessChain %382 %166 %103 %413
               OpStore %415 %414
        %416 = OpIAdd %6 %411 %414
               OpBranch %407
        %407 = OpLabel
               OpReturn
               OpFunctionEnd
         %40 = OpFunction %6 None %37
         %38 = OpFunctionParameter %9
         %39 = OpFunctionParameter %9
         %41 = OpLabel
        %417 = OpVariable %9 Function
        %425 = OpVariable %9 Function
        %428 = OpVariable %9 Function
        %429 = OpVariable %9 Function
        %462 = OpVariable %17 Function
        %466 = OpVariable %9 Function
        %468 = OpVariable %9 Function
        %469 = OpVariable %19 Function
        %486 = OpVariable %361 Function
        %487 = OpVariable %9 Function
        %491 = OpVariable %490 Function
        %495 = OpVariable %9 Function
        %498 = OpVariable %9 Function
        %514 = OpVariable %9 Function
        %557 = OpVariable %9 Function
        %592 = OpVariable %9 Function
        %613 = OpVariable %9 Function
        %618 = OpVariable %9 Function
        %656 = OpVariable %655 Function
        %666 = OpVariable %17 Function
        %668 = OpVariable %19 Function
        %691 = OpVariable %655 Function
        %697 = OpVariable %655 Function
        %711 = OpVariable %710 Function
        %714 = OpVariable %17 Function
        %736 = OpVariable %9 Function
        %738 = OpVariable %9 Function
        %743 = OpVariable %9 Function
        %744 = OpVariable %9 Function
        %745 = OpVariable %17 Function
        %783 = OpVariable %9 Function
        %839 = OpVariable %9 Function
        %847 = OpVariable %17 Function
        %864 = OpVariable %9 Function
        %875 = OpVariable %26 Function
        %876 = OpVariable %19 Function
        %881 = OpVariable %9 Function
        %882 = OpVariable %9 Function
        %917 = OpVariable %17 Function
        %947 = OpVariable %9 Function
        %951 = OpVariable %9 Function
        %970 = OpVariable %9 Function
       %1030 = OpVariable %1029 Function
       %1074 = OpVariable %19 Function
       %1090 = OpVariable %9 Function
       %1113 = OpVariable %9 Function
       %1115 = OpVariable %9 Function
       %1124 = OpVariable %9 Function
       %1145 = OpVariable %26 Function
       %1163 = OpVariable %17 Function
       %1173 = OpVariable %490 Function
       %1184 = OpVariable %9 Function
       %1194 = OpVariable %9 Function
       %1196 = OpVariable %9 Function
       %1198 = OpVariable %9 Function
       %1229 = OpVariable %710 Function
       %1283 = OpVariable %9 Function
       %1284 = OpVariable %9 Function
       %1342 = OpVariable %9 Function
        %418 = OpLoad %6 %39
        %419 = OpExtInst %6 %1 SClamp %418 %103 %380
        %420 = OpAccessChain %382 %166 %103 %419
        %421 = OpLoad %6 %420
               OpStore %417 %421
               OpSelectionMerge %423 None
               OpBranchConditional %184 %422 %423
        %422 = OpLabel
               OpReturnValue %181
        %423 = OpLabel
        %426 = OpLoad %6 %38
        %427 = OpISub %6 %426 %181
               OpStore %425 %427
               OpStore %428 %103
        %430 = OpLoad %6 %38
               OpStore %429 %430
               OpBranch %431
        %431 = OpLabel
               OpLoopMerge %433 %434 None
               OpBranch %435
        %435 = OpLabel
        %436 = OpLoad %6 %429
        %437 = OpLoad %6 %39
        %438 = OpISub %6 %437 %181
        %439 = OpSLessThanEqual %20 %436 %438
               OpBranchConditional %439 %432 %433
        %432 = OpLabel
        %440 = OpLoad %6 %428
        %442 = OpSGreaterThanEqual %20 %440 %441
               OpSelectionMerge %444 None
               OpBranchConditional %442 %443 %444
        %443 = OpLabel
        %445 = OpAccessChain %282 %281 %190
        %446 = OpLoad %15 %445
        %447 = OpFOrdLessThan %20 %446 %285
               OpSelectionMerge %449 None
               OpBranchConditional %447 %448 %449
        %448 = OpLabel
               OpBranch %433
        %449 = OpLabel
               OpBranch %433
        %444 = OpLabel
        %452 = OpLoad %6 %428
        %453 = OpIAdd %6 %452 %181
               OpStore %428 %453
        %454 = OpLoad %6 %429
        %455 = OpExtInst %6 %1 SClamp %454 %103 %380
        %456 = OpAccessChain %382 %166 %103 %455
        %457 = OpLoad %6 %456
        %458 = OpLoad %6 %417
        %459 = OpSLessThanEqual %20 %457 %458
               OpSelectionMerge %461 None
               OpBranchConditional %459 %460 %461
        %460 = OpLabel
               OpStore %462 %465
               OpStore %466 %467
               OpStore %468 %103
               OpStore %469 %474
        %475 = OpLoad %6 %468
        %477 = OpSGreaterThanEqual %20 %475 %476
               OpSelectionMerge %479 None
               OpBranchConditional %477 %478 %479
        %478 = OpLabel
               OpSelectionMerge %481 None
               OpBranchConditional %184 %480 %481
        %480 = OpLabel
               OpBranch %433
        %481 = OpLabel
               OpSelectionMerge %484 None
               OpBranchConditional %184 %483 %484
        %483 = OpLabel
               OpBranch %433
        %484 = OpLabel
               OpStore %486 %211
               OpStore %487 %488
               OpStore %491 %494
               OpStore %486 %184
        %496 = OpLoad %6 %487
        %497 = OpIAdd %6 %496 %181
               OpStore %487 %497
               OpStore %495 %497
               OpStore %498 %103
               OpStore %487 %103
               OpBranch %499
        %499 = OpLabel
               OpLoopMerge %501 %502 None
               OpBranch %503
        %503 = OpLabel
        %504 = OpLoad %6 %487
        %506 = OpSLessThan %20 %504 %505
               OpBranchConditional %506 %500 %501
        %500 = OpLabel
        %507 = OpLoad %6 %498
        %508 = OpSGreaterThanEqual %20 %507 %476
               OpSelectionMerge %510 None
               OpBranchConditional %508 %509 %510
        %509 = OpLabel
               OpBranch %501
        %510 = OpLabel
        %512 = OpLoad %6 %498
        %513 = OpIAdd %6 %512 %181
               OpStore %498 %513
               OpStore %514 %103
               OpStore %495 %103
               OpBranch %515
        %515 = OpLabel
               OpLoopMerge %517 %518 None
               OpBranch %519
        %519 = OpLabel
        %520 = OpLoad %6 %495
        %521 = OpSLessThan %20 %520 %505
               OpBranchConditional %521 %516 %517
        %516 = OpLabel
               OpSelectionMerge %523 None
               OpBranchConditional %184 %522 %523
        %522 = OpLabel
               OpBranch %517
        %523 = OpLabel
        %525 = OpLoad %6 %514
        %526 = OpSGreaterThanEqual %20 %525 %476
               OpSelectionMerge %528 None
               OpBranchConditional %526 %527 %528
        %527 = OpLabel
               OpBranch %517
        %528 = OpLabel
        %530 = OpLoad %6 %514
        %531 = OpIAdd %6 %530 %181
               OpStore %514 %531
        %532 = OpAccessChain %202 %201 %103 %190
        %533 = OpLoad %15 %532
        %534 = OpAccessChain %202 %201 %103 %205
        %535 = OpLoad %15 %534
        %536 = OpFOrdGreaterThan %20 %533 %535
               OpSelectionMerge %538 None
               OpBranchConditional %536 %537 %538
        %537 = OpLabel
               OpKill
        %538 = OpLabel
        %540 = OpLoad %6 %495
        %541 = OpIMul %6 %540 %188
        %542 = OpLoad %6 %487
        %543 = OpIMul %6 %542 %188
        %545 = OpIMul %6 %543 %544
        %546 = OpIAdd %6 %541 %545
        %548 = OpExtInst %6 %1 SClamp %546 %103 %547
        %549 = OpAccessChain %382 %96 %548
        %550 = OpLoad %6 %549
        %551 = OpIEqual %20 %550 %103
               OpSelectionMerge %553 None
               OpBranchConditional %551 %552 %553
        %552 = OpLabel
        %554 = OpLoad %6 %495
        %555 = OpIMul %6 %554 %188
        %556 = OpAccessChain %9 %491 %190
               OpStore %556 %555
               OpStore %557 %181
               OpBranch %558
        %558 = OpLabel
               OpLoopMerge %560 %561 None
               OpBranch %562
        %562 = OpLabel
        %563 = OpLoad %6 %557
        %564 = OpINotEqual %20 %563 %103
               OpBranchConditional %564 %559 %560
        %559 = OpLabel
        %565 = OpLoad %6 %487
        %566 = OpIMul %6 %565 %188
        %567 = OpAccessChain %9 %491 %205
               OpStore %567 %566
               OpBranch %561
        %561 = OpLabel
        %568 = OpLoad %6 %557
        %569 = OpISub %6 %568 %181
               OpStore %557 %569
               OpBranch %558
        %560 = OpLabel
               OpSelectionMerge %571 None
               OpBranchConditional %184 %570 %571
        %570 = OpLabel
               OpReturnValue %181
        %571 = OpLabel
               OpStore %486 %211
               OpBranch %553
        %553 = OpLabel
               OpBranch %518
        %518 = OpLabel
        %573 = OpLoad %6 %495
        %574 = OpIAdd %6 %573 %181
               OpStore %495 %574
               OpBranch %515
        %517 = OpLabel
               OpBranch %502
        %502 = OpLabel
        %575 = OpLoad %6 %487
        %576 = OpIAdd %6 %575 %181
               OpStore %487 %576
               OpBranch %499
        %501 = OpLabel
        %577 = OpAccessChain %202 %201 %103 %190
        %578 = OpLoad %15 %577
        %579 = OpAccessChain %202 %201 %103 %205
        %580 = OpLoad %15 %579
        %581 = OpFOrdLessThan %20 %578 %580
               OpSelectionMerge %583 None
               OpBranchConditional %581 %582 %583
        %582 = OpLabel
        %584 = OpAccessChain %9 %491 %190
        %585 = OpLoad %6 %584
        %586 = OpAccessChain %9 %491 %205
        %587 = OpLoad %6 %586
        %588 = OpIMul %6 %587 %544
        %589 = OpIAdd %6 %585 %588
        %590 = OpExtInst %6 %1 SClamp %589 %103 %547
        %591 = OpAccessChain %382 %96 %590
               OpStore %591 %181
               OpBranch %583
        %583 = OpLabel
               OpBranch %479
        %479 = OpLabel
               OpStore %592 %103
               OpBranch %593
        %593 = OpLabel
               OpLoopMerge %595 %596 None
               OpBranch %597
        %597 = OpLabel
        %598 = OpLoad %6 %592
        %599 = OpSLessThan %20 %598 %181
               OpBranchConditional %599 %594 %595
        %594 = OpLabel
               OpSelectionMerge %601 None
               OpBranchConditional %211 %600 %601
        %600 = OpLabel
               OpSelectionMerge %603 None
               OpBranchConditional %184 %602 %603
        %602 = OpLabel
               OpBranch %596
        %603 = OpLabel
        %605 = OpAccessChain %282 %281 %190
        %606 = OpLoad %15 %605
        %607 = OpFOrdLessThan %20 %606 %285
               OpSelectionMerge %609 None
               OpBranchConditional %607 %608 %610
        %608 = OpLabel
               OpBranch %609
        %610 = OpLabel
        %611 = OpLoad %6 %468
        %612 = OpIAdd %6 %611 %181
               OpStore %468 %612
               OpBranch %609
        %609 = OpLabel
               OpStore %613 %103
        %614 = OpLoad %6 %613
        %615 = OpSGreaterThanEqual %20 %614 %476
               OpSelectionMerge %617 None
               OpBranchConditional %615 %616 %617
        %616 = OpLabel
               OpStore %618 %103
               OpBranch %619
        %619 = OpLabel
               OpLoopMerge %621 %622 None
               OpBranch %623
        %623 = OpLabel
        %624 = OpLoad %6 %618
        %625 = OpAccessChain %202 %201 %103 %205
        %626 = OpLoad %15 %625
        %627 = OpConvertFToS %6 %626
        %628 = OpBitwiseXor %6 %103 %627
        %629 = OpINotEqual %20 %624 %628
               OpBranchConditional %629 %620 %621
        %620 = OpLabel
               OpBranch %622
        %622 = OpLabel
        %630 = OpLoad %6 %618
        %631 = OpIAdd %6 %630 %181
               OpStore %618 %631
               OpBranch %619
        %621 = OpLabel
               OpBranch %617
        %617 = OpLabel
               OpBranch %601
        %601 = OpLabel
               OpBranch %596
        %596 = OpLabel
        %632 = OpLoad %6 %592
        %633 = OpIAdd %6 %632 %181
               OpStore %592 %633
               OpBranch %593
        %595 = OpLabel
        %652 = OpLoad %6 %466
        %654 = OpExtInst %6 %1 SClamp %652 %103 %653
               OpStore %656 %651
        %657 = OpAccessChain %19 %656 %654
        %658 = OpLoad %18 %657
        %665 = OpVectorTimesMatrix %18 %658 %664
        %667 = OpLoad %16 %462
               OpStore %666 %667
               OpStore %668 %665
        %669 = OpFunctionCall %20 %24 %666 %668
               OpSelectionMerge %671 None
               OpBranchConditional %669 %670 %671
        %670 = OpLabel
        %689 = OpLoad %6 %466
        %690 = OpExtInst %6 %1 SClamp %689 %103 %653
               OpStore %691 %651
        %692 = OpAccessChain %26 %691 %690 %190
        %693 = OpLoad %15 %692
        %694 = OpConvertFToS %6 %693
        %695 = OpLoad %6 %466
        %696 = OpExtInst %6 %1 SClamp %695 %103 %653
               OpStore %697 %651
        %698 = OpAccessChain %26 %697 %696 %205
        %699 = OpLoad %15 %698
        %700 = OpConvertFToS %6 %699
        %701 = OpIMul %6 %694 %700
        %702 = OpLoad %6 %466
        %703 = OpIMul %6 %702 %380
        %704 = OpIAdd %6 %701 %703
        %706 = OpIAdd %6 %704 %705
        %707 = OpSMod %6 %706 %544
        %709 = OpExtInst %6 %1 SClamp %707 %103 %708
               OpStore %711 %688
        %712 = OpAccessChain %19 %711 %709
        %713 = OpLoad %18 %712
               OpStore %469 %713
               OpStore %714 %717
        %718 = OpAccessChain %26 %714 %205
        %719 = OpLoad %15 %718
        %720 = OpFOrdGreaterThan %20 %719 %332
               OpSelectionMerge %722 None
               OpBranchConditional %720 %721 %722
        %721 = OpLabel
        %723 = OpAccessChain %26 %714 %205
        %724 = OpLoad %15 %723
        %725 = OpFSub %15 %724 %332
        %726 = OpAccessChain %26 %714 %205
               OpStore %726 %725
               OpBranch %722
        %722 = OpLabel
               OpBranch %671
        %671 = OpLabel
        %727 = OpLoad %6 %425
        %728 = OpIAdd %6 %727 %181
               OpStore %425 %728
               OpBranch %729
        %729 = OpLabel
               OpLoopMerge %731 %732 None
               OpBranch %730
        %730 = OpLabel
               OpSelectionMerge %734 None
               OpBranchConditional %184 %733 %734
        %733 = OpLabel
               OpReturnValue %181
        %734 = OpLabel
        %737 = OpLoad %6 %425
               OpStore %736 %737
        %739 = OpLoad %6 %429
               OpStore %738 %739
        %740 = OpFunctionCall %2 %35 %736 %738
               OpBranch %732
        %732 = OpLabel
               OpBranchConditional %184 %729 %731
        %731 = OpLabel
               OpBranch %461
        %461 = OpLabel
               OpSelectionMerge %742 None
               OpBranchConditional %184 %741 %742
        %741 = OpLabel
               OpStore %743 %138
               OpStore %744 %103
               OpStore %745 %747
               OpBranch %748
        %748 = OpLabel
               OpLoopMerge %750 %751 None
               OpBranch %752
        %752 = OpLabel
        %753 = OpLoad %6 %743
        %754 = OpSLessThan %20 %753 %181
               OpSelectionMerge %756 None
               OpBranchConditional %754 %755 %756
        %755 = OpLabel
        %757 = OpAccessChain %26 %745 %190
        %758 = OpLoad %15 %757
        %759 = OpFOrdGreaterThan %20 %758 %332
               OpBranch %756
        %756 = OpLabel
        %760 = OpPhi %20 %754 %752 %759 %755
        %761 = OpLogicalNot %20 %760
               OpSelectionMerge %763 None
               OpBranchConditional %761 %762 %763
        %762 = OpLabel
        %764 = OpAccessChain %26 %745 %205
        %765 = OpLoad %15 %764
        %766 = OpFOrdGreaterThan %20 %765 %332
               OpBranch %763
        %763 = OpLabel
        %767 = OpPhi %20 %760 %756 %766 %762
               OpBranchConditional %767 %749 %750
        %749 = OpLabel
        %768 = OpLoad %6 %744
        %769 = OpSGreaterThanEqual %20 %768 %476
               OpSelectionMerge %771 None
               OpBranchConditional %769 %770 %771
        %770 = OpLabel
               OpBranch %750
        %771 = OpLabel
        %773 = OpLoad %6 %744
        %774 = OpIAdd %6 %773 %181
               OpStore %744 %774
               OpSelectionMerge %776 None
               OpBranchConditional %184 %775 %777
        %775 = OpLabel
               OpBranch %776
        %777 = OpLabel
        %778 = OpAccessChain %26 %745 %190
        %779 = OpLoad %15 %778
        %780 = OpFOrdGreaterThan %20 %779 %332
               OpSelectionMerge %782 None
               OpBranchConditional %780 %781 %782
        %781 = OpLabel
        %784 = OpAccessChain %202 %201 %103 %205
        %785 = OpLoad %15 %784
        %786 = OpConvertFToS %6 %785
               OpStore %783 %786
               OpBranch %787
        %787 = OpLabel
               OpLoopMerge %789 %790 None
               OpBranch %791
        %791 = OpLabel
        %792 = OpLoad %6 %783
        %793 = OpINotEqual %20 %792 %103
               OpBranchConditional %793 %788 %789
        %788 = OpLabel
        %794 = OpAccessChain %26 %745 %190
        %795 = OpLoad %15 %794
        %796 = OpFSub %15 %795 %332
        %797 = OpAccessChain %26 %745 %190
               OpStore %797 %796
               OpBranch %790
        %790 = OpLabel
        %798 = OpLoad %6 %783
        %799 = OpISub %6 %798 %181
               OpStore %783 %799
               OpBranch %787
        %789 = OpLabel
               OpBranch %782
        %782 = OpLabel
               OpBranch %776
        %776 = OpLabel
        %800 = OpAccessChain %26 %745 %205
        %801 = OpLoad %15 %800
        %802 = OpFOrdGreaterThan %20 %801 %332
               OpSelectionMerge %804 None
               OpBranchConditional %802 %803 %804
        %803 = OpLabel
        %805 = OpAccessChain %26 %745 %205
        %806 = OpLoad %15 %805
        %807 = OpFSub %15 %806 %332
        %808 = OpAccessChain %26 %745 %205
               OpStore %808 %807
               OpBranch %804
        %804 = OpLabel
        %809 = OpLoad %16 %745
        %810 = OpVectorTimesScalar %16 %809 %358
               OpStore %745 %810
        %811 = OpLoad %6 %743
        %812 = OpIAdd %6 %811 %181
               OpStore %743 %812
               OpBranch %751
        %751 = OpLabel
               OpBranch %748
        %750 = OpLabel
               OpBranch %433
        %742 = OpLabel
               OpBranch %434
        %434 = OpLabel
        %814 = OpLoad %6 %429
        %815 = OpIAdd %6 %814 %181
               OpStore %429 %815
               OpBranch %431
        %433 = OpLabel
               OpSelectionMerge %817 None
               OpBranchConditional %211 %816 %817
        %816 = OpLabel
        %818 = OpAccessChain %282 %281 %190
        %819 = OpLoad %15 %818
        %820 = OpFMul %15 %819 %332
        %821 = OpFAdd %15 %820 %285
        %822 = OpFOrdLessThan %20 %821 %285
               OpBranch %817
        %817 = OpLabel
        %823 = OpPhi %20 %211 %433 %822 %816
               OpSelectionMerge %825 None
               OpBranchConditional %823 %824 %825
        %824 = OpLabel
        %826 = OpAccessChain %282 %281 %190
        %827 = OpLoad %15 %826
        %828 = OpFOrdLessThan %20 %827 %285
               OpSelectionMerge %830 None
               OpBranchConditional %828 %829 %831
        %829 = OpLabel
               OpBranch %830
        %831 = OpLabel
               OpSelectionMerge %833 None
               OpBranchConditional %184 %832 %833
        %832 = OpLabel
               OpReturnValue %181
        %833 = OpLabel
               OpBranch %830
        %830 = OpLabel
               OpReturnValue %181
        %825 = OpLabel
               OpSelectionMerge %837 None
               OpBranchConditional %184 %836 %837
        %836 = OpLabel
               OpReturnValue %181
        %837 = OpLabel
               OpStore %839 %181
               OpBranch %840
        %840 = OpLabel
               OpLoopMerge %842 %843 None
               OpBranch %844
        %844 = OpLabel
        %845 = OpLoad %6 %839
        %846 = OpINotEqual %20 %845 %103
               OpBranchConditional %846 %841 %842
        %841 = OpLabel
        %848 = OpLoad %18 %146
        %849 = OpVectorShuffle %16 %848 %848 0 1
        %851 = OpFSub %16 %849 %850
        %853 = OpCompositeExtract %15 %851 0
        %854 = OpCompositeExtract %15 %851 1
        %855 = OpCompositeConstruct %18 %853 %854 %285 %332
        %856 = OpCompositeConstruct %18 %285 %332 %332 %332
        %857 = OpCompositeConstruct %18 %332 %332 %332 %332
        %858 = OpCompositeConstruct %852 %855 %856 %857
        %859 = OpCompositeExtract %15 %858 0 0
        %860 = OpCompositeExtract %15 %858 0 1
        %861 = OpCompositeConstruct %16 %859 %860
        %863 = OpVectorTimesScalar %16 %861 %862
               OpStore %847 %863
               OpStore %864 %103
        %865 = OpLoad %6 %864
        %866 = OpSGreaterThanEqual %20 %865 %292
               OpSelectionMerge %868 None
               OpBranchConditional %866 %867 %868
        %867 = OpLabel
        %869 = OpAccessChain %282 %281 %205
        %870 = OpLoad %15 %869
        %871 = OpFOrdLessThan %20 %870 %285
               OpSelectionMerge %873 None
               OpBranchConditional %871 %872 %873
        %872 = OpLabel
               OpBranch %843
        %873 = OpLabel
               OpBranch %868
        %868 = OpLabel
               OpStore %875 %862
               OpStore %876 %877
               OpSelectionMerge %879 None
               OpBranchConditional %184 %878 %879
        %878 = OpLabel
               OpKill
        %879 = OpLabel
               OpStore %881 %103
               OpStore %882 %103
               OpBranch %883
        %883 = OpLabel
               OpLoopMerge %885 %886 None
               OpBranch %887
        %887 = OpLabel
        %888 = OpLoad %6 %882
        %889 = OpSLessThan %20 %888 %476
               OpBranchConditional %889 %884 %885
        %884 = OpLabel
               OpSelectionMerge %891 None
               OpBranchConditional %184 %890 %891
        %890 = OpLabel
               OpBranch %886
        %891 = OpLabel
        %893 = OpLoad %6 %881
        %895 = OpSGreaterThanEqual %20 %893 %894
        %896 = OpLogicalAnd %20 %895 %211
        %898 = OpCompositeConstruct %897 %896 %211 %211
        %899 = OpCompositeExtract %20 %898 0
        %900 = OpCompositeExtract %20 %898 1
        %901 = OpCompositeExtract %20 %898 2
        %902 = OpCompositeConstruct %897 %899 %900 %901
        %903 = OpCompositeExtract %20 %902 0
        %904 = OpCompositeExtract %20 %902 1
        %905 = OpCompositeExtract %20 %902 2
        %906 = OpCompositeConstruct %897 %903 %904 %905
        %907 = OpCompositeExtract %20 %906 0
               OpSelectionMerge %909 None
               OpBranchConditional %907 %908 %909
        %908 = OpLabel
        %910 = OpAccessChain %282 %281 %205
        %911 = OpLoad %15 %910
        %912 = OpFOrdLessThan %20 %911 %285
               OpSelectionMerge %914 None
               OpBranchConditional %912 %913 %914
        %913 = OpLabel
               OpReturnValue %181
        %914 = OpLabel
               OpBranch %885
        %909 = OpLabel
               OpStore %917 %920
        %921 = OpAccessChain %26 %917 %205
        %922 = OpLoad %15 %921
        %923 = OpFOrdGreaterThan %20 %922 %332
               OpSelectionMerge %925 None
               OpBranchConditional %923 %924 %925
        %924 = OpLabel
        %926 = OpAccessChain %26 %917 %205
        %927 = OpLoad %15 %926
        %928 = OpFSub %15 %927 %332
        %929 = OpAccessChain %26 %917 %205
               OpStore %929 %928
               OpBranch %925
        %925 = OpLabel
               OpSelectionMerge %931 None
               OpBranchConditional %184 %930 %931
        %930 = OpLabel
               OpReturnValue %181
        %931 = OpLabel
               OpSelectionMerge %934 None
               OpBranchConditional %184 %933 %934
        %933 = OpLabel
               OpBranch %885
        %934 = OpLabel
        %936 = OpAccessChain %282 %281 %205
        %937 = OpLoad %15 %936
        %938 = OpFOrdGreaterThanEqual %20 %937 %285
               OpSelectionMerge %940 None
               OpBranchConditional %938 %939 %940
        %939 = OpLabel
        %941 = OpLoad %6 %881
        %942 = OpIAdd %6 %941 %181
               OpStore %881 %942
               OpBranch %940
        %940 = OpLabel
               OpBranch %943
        %943 = OpLabel
               OpLoopMerge %945 %946 None
               OpBranch %944
        %944 = OpLabel
               OpStore %947 %103
               OpSelectionMerge %949 None
               OpBranchConditional %184 %948 %949
        %948 = OpLabel
               OpBranch %946
        %949 = OpLabel
               OpStore %951 %103
               OpBranch %952
        %952 = OpLabel
               OpLoopMerge %954 %955 None
               OpBranch %956
        %956 = OpLabel
        %957 = OpLoad %6 %951
        %958 = OpINotEqual %20 %957 %181
               OpBranchConditional %958 %953 %954
        %953 = OpLabel
        %959 = OpAccessChain %282 %281 %190
        %960 = OpLoad %15 %959
        %961 = OpFOrdLessThan %20 %960 %285
               OpSelectionMerge %963 None
               OpBranchConditional %961 %962 %963
        %962 = OpLabel
               OpKill
        %963 = OpLabel
        %965 = OpAccessChain %282 %281 %205
        %966 = OpLoad %15 %965
        %967 = OpFOrdGreaterThanEqual %20 %966 %285
               OpSelectionMerge %969 None
               OpBranchConditional %967 %968 %969
        %968 = OpLabel
               OpStore %970 %103
               OpBranch %971
        %971 = OpLabel
               OpLoopMerge %973 %974 None
               OpBranch %975
        %975 = OpLabel
        %976 = OpLoad %6 %970
        %977 = OpSLessThan %20 %976 %476
               OpBranchConditional %977 %972 %973
        %972 = OpLabel
               OpSelectionMerge %979 None
               OpBranchConditional %184 %978 %979
        %978 = OpLabel
               OpBranch %974
        %979 = OpLabel
        %981 = OpLoad %6 %947
        %982 = OpSGreaterThanEqual %20 %981 %894
               OpSelectionMerge %984 None
               OpBranchConditional %982 %983 %984
        %983 = OpLabel
               OpBranch %973
        %984 = OpLabel
        %989 = OpAccessChain %202 %201 %103 %190
        %990 = OpLoad %15 %989
        %991 = OpAccessChain %202 %201 %103 %205
        %992 = OpLoad %15 %991
        %993 = OpFOrdGreaterThan %20 %990 %992
               OpSelectionMerge %995 None
               OpBranchConditional %993 %994 %996
        %994 = OpLabel
               OpBranch %995
        %996 = OpLabel
        %997 = OpLoad %6 %947
        %998 = OpIAdd %6 %997 %181
               OpStore %947 %998
               OpBranch %995
        %995 = OpLabel
       %1003 = OpLoad %1000 %1002
       %1004 = OpLoad %16 %847
       %1005 = OpLoad %6 %882
       %1006 = OpISub %6 %1005 %181
       %1007 = OpConvertSToF %15 %1006
       %1008 = OpLoad %15 %875
       %1009 = OpFMul %15 %1007 %1008
       %1010 = OpLoad %6 %970
       %1011 = OpISub %6 %1010 %181
       %1012 = OpConvertSToF %15 %1011
       %1013 = OpLoad %15 %875
       %1014 = OpFMul %15 %1012 %1013
       %1015 = OpCompositeConstruct %16 %1009 %1014
       %1016 = OpFAdd %16 %1004 %1015
       %1017 = OpImageSampleImplicitLod %18 %1003 %1016
       %1024 = OpLoad %6 %882
       %1025 = OpIMul %6 %1024 %476
       %1026 = OpLoad %6 %970
       %1027 = OpIAdd %6 %1025 %1026
       %1028 = OpExtInst %6 %1 SClamp %1027 %103 %505
               OpStore %1030 %1023
       %1031 = OpAccessChain %26 %1030 %1028
       %1032 = OpLoad %15 %1031
       %1033 = OpVectorTimesScalar %18 %1017 %1032
       %1034 = OpLoad %18 %876
       %1035 = OpFAdd %18 %1034 %1033
               OpStore %876 %1035
               OpBranch %974
        %974 = OpLabel
       %1036 = OpLoad %6 %970
       %1037 = OpIAdd %6 %1036 %181
               OpStore %970 %1037
               OpBranch %971
        %973 = OpLabel
               OpBranch %969
        %969 = OpLabel
               OpBranch %955
        %955 = OpLabel
       %1038 = OpLoad %6 %951
       %1039 = OpIAdd %6 %1038 %181
               OpStore %951 %1039
               OpBranch %952
        %954 = OpLabel
       %1040 = OpAccessChain %202 %201 %103 %190
       %1041 = OpLoad %15 %1040
       %1042 = OpAccessChain %202 %201 %103 %205
       %1043 = OpLoad %15 %1042
       %1044 = OpFOrdGreaterThan %20 %1041 %1043
               OpSelectionMerge %1046 None
               OpBranchConditional %1044 %1045 %1046
       %1045 = OpLabel
               OpSelectionMerge %1048 None
               OpBranchConditional %184 %1047 %1048
       %1047 = OpLabel
               OpBranch %945
       %1048 = OpLabel
               OpKill
       %1046 = OpLabel
               OpBranch %946
        %946 = OpLabel
               OpBranchConditional %184 %943 %945
        %945 = OpLabel
               OpBranch %886
        %886 = OpLabel
       %1051 = OpLoad %6 %882
       %1052 = OpIAdd %6 %1051 %181
               OpStore %882 %1052
               OpBranch %883
        %885 = OpLabel
       %1053 = OpAccessChain %282 %281 %190
       %1054 = OpLoad %15 %1053
       %1055 = OpFOrdLessThan %20 %1054 %285
               OpSelectionMerge %1057 None
               OpBranchConditional %1055 %1056 %1057
       %1056 = OpLabel
               OpBranch %843
       %1057 = OpLabel
               OpSelectionMerge %1060 None
               OpBranchConditional %184 %1059 %1061
       %1059 = OpLabel
               OpBranch %1060
       %1061 = OpLabel
               OpSelectionMerge %1063 None
               OpBranchConditional %184 %1062 %1063
       %1062 = OpLabel
               OpKill
       %1063 = OpLabel
               OpBranch %1060
       %1060 = OpLabel
       %1065 = OpAccessChain %282 %281 %190
       %1066 = OpLoad %15 %1065
       %1067 = OpFOrdGreaterThanEqual %20 %1066 %285
               OpSelectionMerge %1069 None
               OpBranchConditional %1067 %1068 %1069
       %1068 = OpLabel
               OpBranch %1069
       %1069 = OpLabel
               OpBranch %1070
       %1070 = OpLabel
               OpLoopMerge %1072 %1073 None
               OpBranch %1071
       %1071 = OpLabel
               OpSelectionMerge %1076 None
               OpBranchConditional %211 %1075 %1084
       %1075 = OpLabel
       %1078 = OpLoad %18 %876
       %1079 = OpVectorShuffle %1077 %1078 %1078 0 1 2
       %1080 = OpCompositeExtract %15 %1079 0
       %1081 = OpCompositeExtract %15 %1079 1
       %1082 = OpCompositeExtract %15 %1079 2
       %1083 = OpCompositeConstruct %18 %1080 %1081 %1082 %332
               OpStore %152 %1083
               OpStore %1074 %1083
               OpBranch %1076
       %1084 = OpLabel
       %1085 = OpLoad %18 %146
               OpStore %1074 %1085
               OpBranch %1076
       %1076 = OpLabel
               OpBranch %1073
       %1073 = OpLabel
               OpBranchConditional %184 %1070 %1072
       %1072 = OpLabel
               OpSelectionMerge %1087 None
               OpBranchConditional %184 %1086 %1087
       %1086 = OpLabel
               OpSelectionMerge %1089 None
               OpBranchConditional %184 %1088 %1089
       %1088 = OpLabel
               OpStore %1090 %103
       %1091 = OpLoad %6 %1090
       %1092 = OpSGreaterThanEqual %20 %1091 %476
               OpSelectionMerge %1094 None
               OpBranchConditional %1092 %1093 %1094
       %1093 = OpLabel
               OpSelectionMerge %1096 None
               OpBranchConditional %184 %1095 %1097
       %1095 = OpLabel
               OpBranch %1096
       %1097 = OpLabel
               OpBranch %1096
       %1096 = OpLabel
               OpBranch %1094
       %1094 = OpLabel
               OpBranch %843
       %1089 = OpLabel
               OpReturnValue %181
       %1087 = OpLabel
               OpBranch %843
        %843 = OpLabel
       %1100 = OpLoad %6 %839
       %1101 = OpISub %6 %1100 %181
               OpStore %839 %1101
               OpBranch %840
        %842 = OpLabel
               OpBranch %1102
       %1102 = OpLabel
               OpLoopMerge %1104 %1105 None
               OpBranch %1103
       %1103 = OpLabel
       %1106 = OpLoad %6 %425
       %1107 = OpIAdd %6 %1106 %181
               OpStore %425 %1107
               OpBranch %1105
       %1105 = OpLabel
       %1108 = OpAccessChain %202 %201 %103 %190
       %1109 = OpLoad %15 %1108
       %1110 = OpAccessChain %202 %201 %103 %205
       %1111 = OpLoad %15 %1110
       %1112 = OpFOrdGreaterThan %20 %1109 %1111
               OpBranchConditional %1112 %1102 %1104
       %1104 = OpLabel
       %1114 = OpLoad %6 %425
               OpStore %1113 %1114
       %1116 = OpLoad %6 %39
               OpStore %1115 %1116
       %1117 = OpFunctionCall %2 %35 %1113 %1115
               OpBranch %1118
       %1118 = OpLabel
               OpLoopMerge %1120 %1121 None
               OpBranch %1119
       %1119 = OpLabel
               OpSelectionMerge %1123 None
               OpBranchConditional %184 %1122 %1123
       %1122 = OpLabel
       %1125 = OpAccessChain %202 %201 %103 %190
       %1126 = OpLoad %15 %1125
       %1127 = OpConvertFToS %6 %1126
               OpStore %1124 %1127
               OpBranch %1128
       %1128 = OpLabel
               OpLoopMerge %1130 %1131 None
               OpBranch %1132
       %1132 = OpLabel
       %1133 = OpLoad %6 %1124
       %1134 = OpINotEqual %20 %1133 %181
               OpBranchConditional %1134 %1129 %1130
       %1129 = OpLabel
               OpReturnValue %181
       %1131 = OpLabel
               OpBranch %1128
       %1130 = OpLabel
               OpBranch %1123
       %1123 = OpLabel
               OpBranch %1121
       %1121 = OpLabel
       %1138 = OpAccessChain %202 %201 %103 %190
       %1139 = OpLoad %15 %1138
       %1140 = OpAccessChain %202 %201 %103 %205
       %1141 = OpLoad %15 %1140
       %1142 = OpFOrdGreaterThan %20 %1139 %1141
               OpBranchConditional %1142 %1118 %1120
       %1120 = OpLabel
       %1143 = OpLoad %6 %425
               OpReturnValue %1143
               OpFunctionEnd
END

# uniforms for variant

# tex
SAMPLER variant_tex

# injectionSwitch
BUFFER variant_injectionSwitch DATA_TYPE vec2<float> STD140 DATA
 0.0 1.0
END
# GLF_live8resolution
BUFFER variant_GLF_live8resolution DATA_TYPE vec2<float> STD140 DATA
 0.523897 0.42755985
END
# GLF_live9tex
SAMPLER variant_GLF_live9tex

# GLF_live3tex
SAMPLER variant_GLF_live3tex

# GLF_live5tex
SAMPLER variant_GLF_live5tex

# GLF_live0resolution
BUFFER variant_GLF_live0resolution DATA_TYPE vec2<float> STD140 DATA
 0.19772995 0.2786163
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_tex DESCRIPTOR_SET 0 BINDING 5
  BIND BUFFER variant_injectionSwitch AS uniform DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER variant_GLF_live8resolution AS uniform DESCRIPTOR_SET 0 BINDING 1
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live9tex DESCRIPTOR_SET 0 BINDING 2
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live3tex DESCRIPTOR_SET 0 BINDING 3
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_GLF_live5tex DESCRIPTOR_SET 0 BINDING 4
  BIND BUFFER variant_GLF_live0resolution AS push_constant
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT reference_framebuffer EQ_HISTOGRAM_EMD_BUFFER variant_framebuffer TOLERANCE 0.005
