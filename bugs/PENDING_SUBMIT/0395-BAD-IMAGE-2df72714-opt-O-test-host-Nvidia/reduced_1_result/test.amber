#!amber

# Optimized using spirv-opt with the following arguments:
# '-O'
# spirv-opt commit hash: 1f2fcddd3963b9c29bf360daf7656c5977c2aadd



SET ENGINE_DATA fence_timeout_ms 60000

SHADER vertex texgen_vert PASSTHROUGH

SHADER fragment texgen_frag GLSL
#version 430
precision highp float;

layout(location = 0) out vec4 _GLF_color;

void main()
{
 _GLF_color = vec4(
 gl_FragCoord.x * (1.0 / 256.0),
 (int(gl_FragCoord.x) ^ int(gl_FragCoord.y)) * (1.0 / 256.0),
 gl_FragCoord.y * (1.0 / 256.0),
 1.0);
}
END
BUFFER default_texture FORMAT B8G8R8A8_UNORM

PIPELINE graphics texgen_pipeline
  ATTACH texgen_vert
  ATTACH texgen_frag
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER default_texture AS color LOCATION 0
END

CLEAR_COLOR texgen_pipeline 0 0 0 255
CLEAR texgen_pipeline
RUN texgen_pipeline DRAW_RECT POS 0 0  SIZE 256 256

SHADER vertex reference_vertex_shader PASSTHROUGH

# reference_fragment_shader is derived from the following GLSL:
# #version 320 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# float ReallyApproxNormalizedAtan2(vec2 v)
# {
#  float pi2 = 1.0 / (355.0 / 113.0);
#  if(length(v) < 0.001)
#   {
#    return 0.0;
#   }
#  vec2 a = abs(v);
#  float z;
#  if(a.y > a.x)
#   {
#    z = a.x / a.y;
#   }
#  else
#   {
#    z = a.y / a.x;
#   }
#  float th = (0.97 - 0.19 * z * z) * z * pi2;
#  if(a.y < a.x)
#   {
#    th = 0.5 - th;
#   }
#  if(v.x < 0.0)
#   {
#    th = 1.0 - th;
#   }
#  if(v.y < 0.0)
#   {
#    th = - th;
#   }
#  return th;
# }
# vec2 polarize(vec2 coord)
# {
#  float pi = (355.0 / 113.0);
#  vec2 center = coord - vec2(0.5);
#  float dist = length(center);
#  float angle = ReallyApproxNormalizedAtan2(center);
#  return vec2(dist, angle);
# }
# void main()
# {
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  vec2 coord1 = polarize(coord + vec2(20.0 / 256.0, - 80.0 / 256.0));
#  vec2 coord2 = polarize(coord + vec2(- 60.0 / 256.0, 40.0 / 256.0));
#  vec2 coord3 = polarize(coord);
#  coord = coord1 - coord2 + coord3;
#  coord = floor(coord * 256.0) / 256.0;
#  _GLF_color = vec4(texture(tex, coord).xyz, 1.0);
# }
SHADER fragment reference_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 492
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %115 %152
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %115 "gl_FragCoord"
               OpName %152 "_GLF_color"
               OpName %156 "tex"
               OpDecorate %115 BuiltIn FragCoord
               OpDecorate %152 Location 0
               OpDecorate %156 RelaxedPrecision
               OpDecorate %156 DescriptorSet 0
               OpDecorate %156 Binding 0
               OpDecorate %157 RelaxedPrecision
               OpDecorate %159 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
         %19 = OpConstant %6 0.318309873
         %22 = OpConstant %6 0.00100000005
         %23 = OpTypeBool
         %27 = OpConstant %6 0
         %32 = OpTypeInt 32 0
         %36 = OpConstant %32 0
         %55 = OpConstant %6 0.970000029
         %56 = OpConstant %6 0.189999998
         %73 = OpConstant %6 0.5
         %81 = OpConstant %6 1
         %98 = OpConstantComposite %7 %73 %73
        %113 = OpTypeVector %6 4
        %114 = OpTypePointer Input %113
        %115 = OpVariable %114 Input
        %118 = OpConstant %6 0.00390625
        %146 = OpConstant %6 256
        %151 = OpTypePointer Output %113
        %152 = OpVariable %151 Output
        %153 = OpTypeImage %6 2D 0 0 0 1 Unknown
        %154 = OpTypeSampledImage %153
        %155 = OpTypePointer UniformConstant %154
        %156 = OpVariable %155 UniformConstant
        %485 = OpConstant %6 -0.421875
        %486 = OpConstant %6 -0.8125
        %487 = OpConstantComposite %7 %485 %486
        %488 = OpConstant %6 -0.734375
        %489 = OpConstant %6 -0.34375
        %490 = OpConstantComposite %7 %488 %489
        %491 = OpConstantComposite %7 %118 %118
          %4 = OpFunction %2 None %3
          %5 = OpLabel
        %116 = OpLoad %113 %115
        %117 = OpVectorShuffle %7 %116 %116 0 1
        %119 = OpVectorTimesScalar %7 %117 %118
        %182 = OpFAdd %7 %119 %487
        %184 = OpExtInst %6 %1 Length %182
               OpSelectionMerge %257 None
               OpSwitch %36 %198
        %198 = OpLabel
        %201 = OpFOrdLessThan %23 %184 %22
               OpSelectionMerge %203 None
               OpBranchConditional %201 %202 %203
        %202 = OpLabel
               OpBranch %257
        %203 = OpLabel
        %205 = OpExtInst %7 %1 FAbs %182
        %207 = OpCompositeExtract %6 %205 1
        %209 = OpCompositeExtract %6 %205 0
        %210 = OpFOrdGreaterThan %23 %207 %209
               OpSelectionMerge %223 None
               OpBranchConditional %210 %211 %217
        %211 = OpLabel
        %216 = OpFDiv %6 %209 %207
               OpBranch %223
        %217 = OpLabel
        %222 = OpFDiv %6 %207 %209
               OpBranch %223
        %223 = OpLabel
        %459 = OpPhi %6 %216 %211 %222 %217
        %225 = OpFMul %6 %56 %459
        %227 = OpFMul %6 %225 %459
        %228 = OpFSub %6 %55 %227
        %230 = OpFMul %6 %228 %459
        %232 = OpFMul %6 %230 %19
        %237 = OpFOrdLessThan %23 %207 %209
               OpSelectionMerge %241 None
               OpBranchConditional %237 %238 %241
        %238 = OpLabel
        %240 = OpFSub %6 %73 %232
               OpBranch %241
        %241 = OpLabel
        %460 = OpPhi %6 %232 %223 %240 %238
        %243 = OpCompositeExtract %6 %182 0
        %244 = OpFOrdLessThan %23 %243 %27
               OpSelectionMerge %248 None
               OpBranchConditional %244 %245 %248
        %245 = OpLabel
        %247 = OpFSub %6 %81 %460
               OpBranch %248
        %248 = OpLabel
        %461 = OpPhi %6 %460 %241 %247 %245
        %250 = OpCompositeExtract %6 %182 1
        %251 = OpFOrdLessThan %23 %250 %27
               OpSelectionMerge %255 None
               OpBranchConditional %251 %252 %255
        %252 = OpLabel
        %254 = OpFNegate %6 %461
               OpBranch %255
        %255 = OpLabel
        %462 = OpPhi %6 %461 %248 %254 %252
               OpBranch %257
        %257 = OpLabel
        %463 = OpPhi %6 %27 %202 %462 %255
        %189 = OpCompositeConstruct %7 %184 %463
        %267 = OpFAdd %7 %119 %490
        %269 = OpExtInst %6 %1 Length %267
               OpSelectionMerge %342 None
               OpSwitch %36 %283
        %283 = OpLabel
        %286 = OpFOrdLessThan %23 %269 %22
               OpSelectionMerge %288 None
               OpBranchConditional %286 %287 %288
        %287 = OpLabel
               OpBranch %342
        %288 = OpLabel
        %290 = OpExtInst %7 %1 FAbs %267
        %292 = OpCompositeExtract %6 %290 1
        %294 = OpCompositeExtract %6 %290 0
        %295 = OpFOrdGreaterThan %23 %292 %294
               OpSelectionMerge %308 None
               OpBranchConditional %295 %296 %302
        %296 = OpLabel
        %301 = OpFDiv %6 %294 %292
               OpBranch %308
        %302 = OpLabel
        %307 = OpFDiv %6 %292 %294
               OpBranch %308
        %308 = OpLabel
        %469 = OpPhi %6 %301 %296 %307 %302
        %310 = OpFMul %6 %56 %469
        %312 = OpFMul %6 %310 %469
        %313 = OpFSub %6 %55 %312
        %315 = OpFMul %6 %313 %469
        %317 = OpFMul %6 %315 %19
        %322 = OpFOrdLessThan %23 %292 %294
               OpSelectionMerge %326 None
               OpBranchConditional %322 %323 %326
        %323 = OpLabel
        %325 = OpFSub %6 %73 %317
               OpBranch %326
        %326 = OpLabel
        %470 = OpPhi %6 %317 %308 %325 %323
        %328 = OpCompositeExtract %6 %267 0
        %329 = OpFOrdLessThan %23 %328 %27
               OpSelectionMerge %333 None
               OpBranchConditional %329 %330 %333
        %330 = OpLabel
        %332 = OpFSub %6 %81 %470
               OpBranch %333
        %333 = OpLabel
        %471 = OpPhi %6 %470 %326 %332 %330
        %335 = OpCompositeExtract %6 %267 1
        %336 = OpFOrdLessThan %23 %335 %27
               OpSelectionMerge %340 None
               OpBranchConditional %336 %337 %340
        %337 = OpLabel
        %339 = OpFNegate %6 %471
               OpBranch %340
        %340 = OpLabel
        %472 = OpPhi %6 %471 %333 %339 %337
               OpBranch %342
        %342 = OpLabel
        %473 = OpPhi %6 %27 %287 %472 %340
        %274 = OpCompositeConstruct %7 %269 %473
        %352 = OpFSub %7 %119 %98
        %354 = OpExtInst %6 %1 Length %352
               OpSelectionMerge %427 None
               OpSwitch %36 %368
        %368 = OpLabel
        %371 = OpFOrdLessThan %23 %354 %22
               OpSelectionMerge %373 None
               OpBranchConditional %371 %372 %373
        %372 = OpLabel
               OpBranch %427
        %373 = OpLabel
        %375 = OpExtInst %7 %1 FAbs %352
        %377 = OpCompositeExtract %6 %375 1
        %379 = OpCompositeExtract %6 %375 0
        %380 = OpFOrdGreaterThan %23 %377 %379
               OpSelectionMerge %393 None
               OpBranchConditional %380 %381 %387
        %381 = OpLabel
        %386 = OpFDiv %6 %379 %377
               OpBranch %393
        %387 = OpLabel
        %392 = OpFDiv %6 %377 %379
               OpBranch %393
        %393 = OpLabel
        %479 = OpPhi %6 %386 %381 %392 %387
        %395 = OpFMul %6 %56 %479
        %397 = OpFMul %6 %395 %479
        %398 = OpFSub %6 %55 %397
        %400 = OpFMul %6 %398 %479
        %402 = OpFMul %6 %400 %19
        %407 = OpFOrdLessThan %23 %377 %379
               OpSelectionMerge %411 None
               OpBranchConditional %407 %408 %411
        %408 = OpLabel
        %410 = OpFSub %6 %73 %402
               OpBranch %411
        %411 = OpLabel
        %480 = OpPhi %6 %402 %393 %410 %408
        %413 = OpCompositeExtract %6 %352 0
        %414 = OpFOrdLessThan %23 %413 %27
               OpSelectionMerge %418 None
               OpBranchConditional %414 %415 %418
        %415 = OpLabel
        %417 = OpFSub %6 %81 %480
               OpBranch %418
        %418 = OpLabel
        %481 = OpPhi %6 %480 %411 %417 %415
        %420 = OpCompositeExtract %6 %352 1
        %421 = OpFOrdLessThan %23 %420 %27
               OpSelectionMerge %425 None
               OpBranchConditional %421 %422 %425
        %422 = OpLabel
        %424 = OpFNegate %6 %481
               OpBranch %425
        %425 = OpLabel
        %482 = OpPhi %6 %481 %418 %424 %422
               OpBranch %427
        %427 = OpLabel
        %483 = OpPhi %6 %27 %372 %482 %425
        %359 = OpCompositeConstruct %7 %354 %483
        %142 = OpFSub %7 %189 %274
        %144 = OpFAdd %7 %142 %359
        %147 = OpVectorTimesScalar %7 %144 %146
        %148 = OpExtInst %7 %1 Floor %147
        %150 = OpFMul %7 %148 %491
        %157 = OpLoad %154 %156
        %159 = OpImageSampleImplicitLod %113 %157 %150
        %162 = OpCompositeExtract %6 %159 0
        %163 = OpCompositeExtract %6 %159 1
        %164 = OpCompositeExtract %6 %159 2
        %165 = OpCompositeConstruct %113 %162 %163 %164 %81
               OpStore %152 %165
               OpReturn
               OpFunctionEnd
END

# uniforms for reference

# tex
SAMPLER reference_tex


BUFFER reference_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics reference_pipeline
  ATTACH reference_vertex_shader
  ATTACH reference_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER reference_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER reference_tex DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR reference_pipeline 0 0 0 255

CLEAR reference_pipeline
RUN reference_pipeline DRAW_RECT POS 0 0 SIZE 256 256


SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
#
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# float ReallyApproxNormalizedAtan2(vec2 v)
# {
#  float pi2 = 1.0 / (355.0 / 113.0);
#  if(length(v) < 0.001)
#   {
#    return 0.0;
#   }
#  vec2 a = abs(v);
#  float z;
#  if(a.y > a.x)
#   {
#    z = a.x / a.y;
#   }
#  else
#   {
#    z = a.y / a.x;
#   }
#  float th = (0.97 - 0.19 * z * z) * z * pi2;
#  if(a.y < a.x)
#   {
#    th = 0.5 - th;
#   }
#  if(v.x < 0.0)
#   {
#    th = 1.0 - th;
#   }
#  if(v.y < 0.0)
#   {
#    th = - th;
#   }
#  return th;
# }
# vec2 polarize(vec2 coord)
# {
#  vec2 center = coord - vec2(0.5);
#  float dist = length(center);
#  float angle = ReallyApproxNormalizedAtan2(center);
#  return vec2(dist, angle);
# }
# void main()
# {
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  vec2 coord1 = polarize(coord + vec2(20.0 / 256.0, - 80.0 / 256.0));
#  vec2 coord2 = polarize(coord + vec2(- 60.0 / 256.0, 40.0 / 256.0));
#  vec2 coord3 = polarize(coord);
#  coord = coord1 - coord2 + coord3;
#  coord = floor(coord * 256.0) / 256.0;
#  _GLF_color = vec4(min(vec3(vec3(texture(tex, coord).xyz)), vec3(mix(vec3((vec3(texture(tex, coord).xyz))[0], 1.0, min((vec3(texture(tex, coord).xyz))[2], (vec3(texture(tex, coord).xyz))[2])), vec3(1.0, (vec3(texture(tex, coord).xyz))[1], 1.0), bvec3(false, true, false)))), 1.0);
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 543
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %113 %150
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %113 "gl_FragCoord"
               OpName %150 "_GLF_color"
               OpName %154 "tex"
               OpDecorate %113 BuiltIn FragCoord
               OpDecorate %150 Location 0
               OpDecorate %154 RelaxedPrecision
               OpDecorate %154 DescriptorSet 0
               OpDecorate %154 Binding 0
               OpDecorate %155 RelaxedPrecision
               OpDecorate %157 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
         %19 = OpConstant %6 0.318309873
         %22 = OpConstant %6 0.00100000005
         %23 = OpTypeBool
         %27 = OpConstant %6 0
         %32 = OpTypeInt 32 0
         %36 = OpConstant %32 0
         %55 = OpConstant %6 0.970000029
         %56 = OpConstant %6 0.189999998
         %73 = OpConstant %6 0.5
         %81 = OpConstant %6 1
         %96 = OpConstantComposite %7 %73 %73
        %111 = OpTypeVector %6 4
        %112 = OpTypePointer Input %111
        %113 = OpVariable %112 Input
        %116 = OpConstant %6 0.00390625
        %144 = OpConstant %6 256
        %149 = OpTypePointer Output %111
        %150 = OpVariable %149 Output
        %151 = OpTypeImage %6 2D 0 0 0 1 Unknown
        %152 = OpTypeSampledImage %151
        %153 = OpTypePointer UniformConstant %152
        %154 = OpVariable %153 UniformConstant
        %158 = OpTypeVector %6 3
        %536 = OpConstant %6 -0.421875
        %537 = OpConstant %6 -0.8125
        %538 = OpConstantComposite %7 %536 %537
        %539 = OpConstant %6 -0.734375
        %540 = OpConstant %6 -0.34375
        %541 = OpConstantComposite %7 %539 %540
        %542 = OpConstantComposite %7 %116 %116
          %4 = OpFunction %2 None %3
          %5 = OpLabel
        %114 = OpLoad %111 %113
        %115 = OpVectorShuffle %7 %114 %114 0 1
        %117 = OpVectorTimesScalar %7 %115 %116
        %235 = OpFAdd %7 %117 %538
        %237 = OpExtInst %6 %1 Length %235
               OpSelectionMerge %310 None
               OpSwitch %36 %251
        %251 = OpLabel
        %254 = OpFOrdLessThan %23 %237 %22
               OpSelectionMerge %256 None
               OpBranchConditional %254 %255 %256
        %255 = OpLabel
               OpBranch %310
        %256 = OpLabel
        %258 = OpExtInst %7 %1 FAbs %235
        %260 = OpCompositeExtract %6 %258 1
        %262 = OpCompositeExtract %6 %258 0
        %263 = OpFOrdGreaterThan %23 %260 %262
               OpSelectionMerge %276 None
               OpBranchConditional %263 %264 %270
        %264 = OpLabel
        %269 = OpFDiv %6 %262 %260
               OpBranch %276
        %270 = OpLabel
        %275 = OpFDiv %6 %260 %262
               OpBranch %276
        %276 = OpLabel
        %510 = OpPhi %6 %269 %264 %275 %270
        %278 = OpFMul %6 %56 %510
        %280 = OpFMul %6 %278 %510
        %281 = OpFSub %6 %55 %280
        %283 = OpFMul %6 %281 %510
        %285 = OpFMul %6 %283 %19
        %290 = OpFOrdLessThan %23 %260 %262
               OpSelectionMerge %294 None
               OpBranchConditional %290 %291 %294
        %291 = OpLabel
        %293 = OpFSub %6 %73 %285
               OpBranch %294
        %294 = OpLabel
        %511 = OpPhi %6 %285 %276 %293 %291
        %296 = OpCompositeExtract %6 %235 0
        %297 = OpFOrdLessThan %23 %296 %27
               OpSelectionMerge %301 None
               OpBranchConditional %297 %298 %301
        %298 = OpLabel
        %300 = OpFSub %6 %81 %511
               OpBranch %301
        %301 = OpLabel
        %512 = OpPhi %6 %511 %294 %300 %298
        %303 = OpCompositeExtract %6 %235 1
        %304 = OpFOrdLessThan %23 %303 %27
               OpSelectionMerge %308 None
               OpBranchConditional %304 %305 %308
        %305 = OpLabel
        %307 = OpFNegate %6 %512
               OpBranch %308
        %308 = OpLabel
        %513 = OpPhi %6 %512 %301 %307 %305
               OpBranch %310
        %310 = OpLabel
        %514 = OpPhi %6 %27 %255 %513 %308
        %242 = OpCompositeConstruct %7 %237 %514
        %319 = OpFAdd %7 %117 %541
        %321 = OpExtInst %6 %1 Length %319
               OpSelectionMerge %394 None
               OpSwitch %36 %335
        %335 = OpLabel
        %338 = OpFOrdLessThan %23 %321 %22
               OpSelectionMerge %340 None
               OpBranchConditional %338 %339 %340
        %339 = OpLabel
               OpBranch %394
        %340 = OpLabel
        %342 = OpExtInst %7 %1 FAbs %319
        %344 = OpCompositeExtract %6 %342 1
        %346 = OpCompositeExtract %6 %342 0
        %347 = OpFOrdGreaterThan %23 %344 %346
               OpSelectionMerge %360 None
               OpBranchConditional %347 %348 %354
        %348 = OpLabel
        %353 = OpFDiv %6 %346 %344
               OpBranch %360
        %354 = OpLabel
        %359 = OpFDiv %6 %344 %346
               OpBranch %360
        %360 = OpLabel
        %520 = OpPhi %6 %353 %348 %359 %354
        %362 = OpFMul %6 %56 %520
        %364 = OpFMul %6 %362 %520
        %365 = OpFSub %6 %55 %364
        %367 = OpFMul %6 %365 %520
        %369 = OpFMul %6 %367 %19
        %374 = OpFOrdLessThan %23 %344 %346
               OpSelectionMerge %378 None
               OpBranchConditional %374 %375 %378
        %375 = OpLabel
        %377 = OpFSub %6 %73 %369
               OpBranch %378
        %378 = OpLabel
        %521 = OpPhi %6 %369 %360 %377 %375
        %380 = OpCompositeExtract %6 %319 0
        %381 = OpFOrdLessThan %23 %380 %27
               OpSelectionMerge %385 None
               OpBranchConditional %381 %382 %385
        %382 = OpLabel
        %384 = OpFSub %6 %81 %521
               OpBranch %385
        %385 = OpLabel
        %522 = OpPhi %6 %521 %378 %384 %382
        %387 = OpCompositeExtract %6 %319 1
        %388 = OpFOrdLessThan %23 %387 %27
               OpSelectionMerge %392 None
               OpBranchConditional %388 %389 %392
        %389 = OpLabel
        %391 = OpFNegate %6 %522
               OpBranch %392
        %392 = OpLabel
        %523 = OpPhi %6 %522 %385 %391 %389
               OpBranch %394
        %394 = OpLabel
        %524 = OpPhi %6 %27 %339 %523 %392
        %326 = OpCompositeConstruct %7 %321 %524
        %403 = OpFSub %7 %117 %96
        %405 = OpExtInst %6 %1 Length %403
               OpSelectionMerge %478 None
               OpSwitch %36 %419
        %419 = OpLabel
        %422 = OpFOrdLessThan %23 %405 %22
               OpSelectionMerge %424 None
               OpBranchConditional %422 %423 %424
        %423 = OpLabel
               OpBranch %478
        %424 = OpLabel
        %426 = OpExtInst %7 %1 FAbs %403
        %428 = OpCompositeExtract %6 %426 1
        %430 = OpCompositeExtract %6 %426 0
        %431 = OpFOrdGreaterThan %23 %428 %430
               OpSelectionMerge %444 None
               OpBranchConditional %431 %432 %438
        %432 = OpLabel
        %437 = OpFDiv %6 %430 %428
               OpBranch %444
        %438 = OpLabel
        %443 = OpFDiv %6 %428 %430
               OpBranch %444
        %444 = OpLabel
        %530 = OpPhi %6 %437 %432 %443 %438
        %446 = OpFMul %6 %56 %530
        %448 = OpFMul %6 %446 %530
        %449 = OpFSub %6 %55 %448
        %451 = OpFMul %6 %449 %530
        %453 = OpFMul %6 %451 %19
        %458 = OpFOrdLessThan %23 %428 %430
               OpSelectionMerge %462 None
               OpBranchConditional %458 %459 %462
        %459 = OpLabel
        %461 = OpFSub %6 %73 %453
               OpBranch %462
        %462 = OpLabel
        %531 = OpPhi %6 %453 %444 %461 %459
        %464 = OpCompositeExtract %6 %403 0
        %465 = OpFOrdLessThan %23 %464 %27
               OpSelectionMerge %469 None
               OpBranchConditional %465 %466 %469
        %466 = OpLabel
        %468 = OpFSub %6 %81 %531
               OpBranch %469
        %469 = OpLabel
        %532 = OpPhi %6 %531 %462 %468 %466
        %471 = OpCompositeExtract %6 %403 1
        %472 = OpFOrdLessThan %23 %471 %27
               OpSelectionMerge %476 None
               OpBranchConditional %472 %473 %476
        %473 = OpLabel
        %475 = OpFNegate %6 %532
               OpBranch %476
        %476 = OpLabel
        %533 = OpPhi %6 %532 %469 %475 %473
               OpBranch %478
        %478 = OpLabel
        %534 = OpPhi %6 %27 %423 %533 %476
        %410 = OpCompositeConstruct %7 %405 %534
        %140 = OpFSub %7 %242 %326
        %142 = OpFAdd %7 %140 %410
        %145 = OpVectorTimesScalar %7 %142 %144
        %146 = OpExtInst %7 %1 Floor %145
        %148 = OpFMul %7 %146 %542
        %155 = OpLoad %152 %154
        %157 = OpImageSampleImplicitLod %111 %155 %148
        %160 = OpCompositeExtract %6 %157 0
        %161 = OpCompositeExtract %6 %157 1
        %162 = OpCompositeExtract %6 %157 2
        %167 = OpCompositeConstruct %158 %160 %161 %162
        %196 = OpExtInst %6 %1 FMin %162 %162
        %216 = OpCompositeConstruct %158 %160 %161 %196
        %217 = OpExtInst %158 %1 FMin %167 %216
        %218 = OpCompositeExtract %6 %217 0
        %219 = OpCompositeExtract %6 %217 1
        %220 = OpCompositeExtract %6 %217 2
        %221 = OpCompositeConstruct %111 %218 %219 %220 %81
               OpStore %150 %221
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# tex
SAMPLER variant_tex


BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_tex DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT reference_framebuffer EQ_HISTOGRAM_EMD_BUFFER variant_framebuffer TOLERANCE 0.005
