#!amber

# Optimized using spirv-opt with the following arguments:
# '-O'
# spirv-opt commit hash: 1f2fcddd3963b9c29bf360daf7656c5977c2aadd



SET ENGINE_DATA fence_timeout_ms 60000

SHADER vertex texgen_vert PASSTHROUGH

SHADER fragment texgen_frag GLSL
#version 430
precision highp float;

layout(location = 0) out vec4 _GLF_color;

void main()
{
 _GLF_color = vec4(
 gl_FragCoord.x * (1.0 / 256.0),
 (int(gl_FragCoord.x) ^ int(gl_FragCoord.y)) * (1.0 / 256.0),
 gl_FragCoord.y * (1.0 / 256.0),
 1.0);
}
END
BUFFER default_texture FORMAT B8G8R8A8_UNORM

PIPELINE graphics texgen_pipeline
  ATTACH texgen_vert
  ATTACH texgen_frag
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER default_texture AS color LOCATION 0
END

CLEAR_COLOR texgen_pipeline 0 0 0 255
CLEAR texgen_pipeline
RUN texgen_pipeline DRAW_RECT POS 0 0  SIZE 256 256

SHADER vertex reference_vertex_shader PASSTHROUGH

# reference_fragment_shader is derived from the following GLSL:
# #version 320 es
# precision highp float;
#
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# float ReallyApproxNormalizedAtan2(vec2 v)
# {
#  float pi2 = 1.0 / (355.0 / 113.0);
#  if(length(v) < 0.001)
#   {
#    return 0.0;
#   }
#  vec2 a = abs(v);
#  float z;
#  if(a.y > a.x)
#   {
#    z = a.x / a.y;
#   }
#  else
#   {
#    z = a.y / a.x;
#   }
#  float th = (0.97 - 0.19 * z * z) * z * pi2;
#  if(a.y < a.x)
#   {
#    th = 0.5 - th;
#   }
#  if(v.x < 0.0)
#   {
#    th = 1.0 - th;
#   }
#  if(v.y < 0.0)
#   {
#    th = - th;
#   }
#  return th;
# }
# vec2 polarize(vec2 coord)
# {
#  float pi = (355.0 / 113.0);
#  vec2 center = coord - vec2(0.5);
#  float dist = length(center);
#  float angle = ReallyApproxNormalizedAtan2(center);
#  return vec2(dist, angle);
# }
# void main()
# {
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  vec2 coord1 = polarize(coord + vec2(20.0 / 256.0, - 80.0 / 256.0));
#  vec2 coord2 = polarize(coord + vec2(- 60.0 / 256.0, 40.0 / 256.0));
#  vec2 coord3 = polarize(coord);
#  coord = coord1 - coord2 + coord3;
#  coord = floor(coord * 256.0) / 256.0;
#  _GLF_color = vec4(texture(tex, coord).xyz, 1.0);
# }
SHADER fragment reference_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 492
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %115 %152
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %115 "gl_FragCoord"
               OpName %152 "_GLF_color"
               OpName %156 "tex"
               OpDecorate %115 BuiltIn FragCoord
               OpDecorate %152 Location 0
               OpDecorate %156 RelaxedPrecision
               OpDecorate %156 DescriptorSet 0
               OpDecorate %156 Binding 0
               OpDecorate %157 RelaxedPrecision
               OpDecorate %159 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
         %19 = OpConstant %6 0.318309873
         %22 = OpConstant %6 0.00100000005
         %23 = OpTypeBool
         %27 = OpConstant %6 0
         %32 = OpTypeInt 32 0
         %36 = OpConstant %32 0
         %55 = OpConstant %6 0.970000029
         %56 = OpConstant %6 0.189999998
         %73 = OpConstant %6 0.5
         %81 = OpConstant %6 1
         %98 = OpConstantComposite %7 %73 %73
        %113 = OpTypeVector %6 4
        %114 = OpTypePointer Input %113
        %115 = OpVariable %114 Input
        %118 = OpConstant %6 0.00390625
        %146 = OpConstant %6 256
        %151 = OpTypePointer Output %113
        %152 = OpVariable %151 Output
        %153 = OpTypeImage %6 2D 0 0 0 1 Unknown
        %154 = OpTypeSampledImage %153
        %155 = OpTypePointer UniformConstant %154
        %156 = OpVariable %155 UniformConstant
        %485 = OpConstant %6 -0.421875
        %486 = OpConstant %6 -0.8125
        %487 = OpConstantComposite %7 %485 %486
        %488 = OpConstant %6 -0.734375
        %489 = OpConstant %6 -0.34375
        %490 = OpConstantComposite %7 %488 %489
        %491 = OpConstantComposite %7 %118 %118
          %4 = OpFunction %2 None %3
          %5 = OpLabel
        %116 = OpLoad %113 %115
        %117 = OpVectorShuffle %7 %116 %116 0 1
        %119 = OpVectorTimesScalar %7 %117 %118
        %182 = OpFAdd %7 %119 %487
        %184 = OpExtInst %6 %1 Length %182
               OpSelectionMerge %257 None
               OpSwitch %36 %198
        %198 = OpLabel
        %201 = OpFOrdLessThan %23 %184 %22
               OpSelectionMerge %203 None
               OpBranchConditional %201 %202 %203
        %202 = OpLabel
               OpBranch %257
        %203 = OpLabel
        %205 = OpExtInst %7 %1 FAbs %182
        %207 = OpCompositeExtract %6 %205 1
        %209 = OpCompositeExtract %6 %205 0
        %210 = OpFOrdGreaterThan %23 %207 %209
               OpSelectionMerge %223 None
               OpBranchConditional %210 %211 %217
        %211 = OpLabel
        %216 = OpFDiv %6 %209 %207
               OpBranch %223
        %217 = OpLabel
        %222 = OpFDiv %6 %207 %209
               OpBranch %223
        %223 = OpLabel
        %459 = OpPhi %6 %216 %211 %222 %217
        %225 = OpFMul %6 %56 %459
        %227 = OpFMul %6 %225 %459
        %228 = OpFSub %6 %55 %227
        %230 = OpFMul %6 %228 %459
        %232 = OpFMul %6 %230 %19
        %237 = OpFOrdLessThan %23 %207 %209
               OpSelectionMerge %241 None
               OpBranchConditional %237 %238 %241
        %238 = OpLabel
        %240 = OpFSub %6 %73 %232
               OpBranch %241
        %241 = OpLabel
        %460 = OpPhi %6 %232 %223 %240 %238
        %243 = OpCompositeExtract %6 %182 0
        %244 = OpFOrdLessThan %23 %243 %27
               OpSelectionMerge %248 None
               OpBranchConditional %244 %245 %248
        %245 = OpLabel
        %247 = OpFSub %6 %81 %460
               OpBranch %248
        %248 = OpLabel
        %461 = OpPhi %6 %460 %241 %247 %245
        %250 = OpCompositeExtract %6 %182 1
        %251 = OpFOrdLessThan %23 %250 %27
               OpSelectionMerge %255 None
               OpBranchConditional %251 %252 %255
        %252 = OpLabel
        %254 = OpFNegate %6 %461
               OpBranch %255
        %255 = OpLabel
        %462 = OpPhi %6 %461 %248 %254 %252
               OpBranch %257
        %257 = OpLabel
        %463 = OpPhi %6 %27 %202 %462 %255
        %189 = OpCompositeConstruct %7 %184 %463
        %267 = OpFAdd %7 %119 %490
        %269 = OpExtInst %6 %1 Length %267
               OpSelectionMerge %342 None
               OpSwitch %36 %283
        %283 = OpLabel
        %286 = OpFOrdLessThan %23 %269 %22
               OpSelectionMerge %288 None
               OpBranchConditional %286 %287 %288
        %287 = OpLabel
               OpBranch %342
        %288 = OpLabel
        %290 = OpExtInst %7 %1 FAbs %267
        %292 = OpCompositeExtract %6 %290 1
        %294 = OpCompositeExtract %6 %290 0
        %295 = OpFOrdGreaterThan %23 %292 %294
               OpSelectionMerge %308 None
               OpBranchConditional %295 %296 %302
        %296 = OpLabel
        %301 = OpFDiv %6 %294 %292
               OpBranch %308
        %302 = OpLabel
        %307 = OpFDiv %6 %292 %294
               OpBranch %308
        %308 = OpLabel
        %469 = OpPhi %6 %301 %296 %307 %302
        %310 = OpFMul %6 %56 %469
        %312 = OpFMul %6 %310 %469
        %313 = OpFSub %6 %55 %312
        %315 = OpFMul %6 %313 %469
        %317 = OpFMul %6 %315 %19
        %322 = OpFOrdLessThan %23 %292 %294
               OpSelectionMerge %326 None
               OpBranchConditional %322 %323 %326
        %323 = OpLabel
        %325 = OpFSub %6 %73 %317
               OpBranch %326
        %326 = OpLabel
        %470 = OpPhi %6 %317 %308 %325 %323
        %328 = OpCompositeExtract %6 %267 0
        %329 = OpFOrdLessThan %23 %328 %27
               OpSelectionMerge %333 None
               OpBranchConditional %329 %330 %333
        %330 = OpLabel
        %332 = OpFSub %6 %81 %470
               OpBranch %333
        %333 = OpLabel
        %471 = OpPhi %6 %470 %326 %332 %330
        %335 = OpCompositeExtract %6 %267 1
        %336 = OpFOrdLessThan %23 %335 %27
               OpSelectionMerge %340 None
               OpBranchConditional %336 %337 %340
        %337 = OpLabel
        %339 = OpFNegate %6 %471
               OpBranch %340
        %340 = OpLabel
        %472 = OpPhi %6 %471 %333 %339 %337
               OpBranch %342
        %342 = OpLabel
        %473 = OpPhi %6 %27 %287 %472 %340
        %274 = OpCompositeConstruct %7 %269 %473
        %352 = OpFSub %7 %119 %98
        %354 = OpExtInst %6 %1 Length %352
               OpSelectionMerge %427 None
               OpSwitch %36 %368
        %368 = OpLabel
        %371 = OpFOrdLessThan %23 %354 %22
               OpSelectionMerge %373 None
               OpBranchConditional %371 %372 %373
        %372 = OpLabel
               OpBranch %427
        %373 = OpLabel
        %375 = OpExtInst %7 %1 FAbs %352
        %377 = OpCompositeExtract %6 %375 1
        %379 = OpCompositeExtract %6 %375 0
        %380 = OpFOrdGreaterThan %23 %377 %379
               OpSelectionMerge %393 None
               OpBranchConditional %380 %381 %387
        %381 = OpLabel
        %386 = OpFDiv %6 %379 %377
               OpBranch %393
        %387 = OpLabel
        %392 = OpFDiv %6 %377 %379
               OpBranch %393
        %393 = OpLabel
        %479 = OpPhi %6 %386 %381 %392 %387
        %395 = OpFMul %6 %56 %479
        %397 = OpFMul %6 %395 %479
        %398 = OpFSub %6 %55 %397
        %400 = OpFMul %6 %398 %479
        %402 = OpFMul %6 %400 %19
        %407 = OpFOrdLessThan %23 %377 %379
               OpSelectionMerge %411 None
               OpBranchConditional %407 %408 %411
        %408 = OpLabel
        %410 = OpFSub %6 %73 %402
               OpBranch %411
        %411 = OpLabel
        %480 = OpPhi %6 %402 %393 %410 %408
        %413 = OpCompositeExtract %6 %352 0
        %414 = OpFOrdLessThan %23 %413 %27
               OpSelectionMerge %418 None
               OpBranchConditional %414 %415 %418
        %415 = OpLabel
        %417 = OpFSub %6 %81 %480
               OpBranch %418
        %418 = OpLabel
        %481 = OpPhi %6 %480 %411 %417 %415
        %420 = OpCompositeExtract %6 %352 1
        %421 = OpFOrdLessThan %23 %420 %27
               OpSelectionMerge %425 None
               OpBranchConditional %421 %422 %425
        %422 = OpLabel
        %424 = OpFNegate %6 %481
               OpBranch %425
        %425 = OpLabel
        %482 = OpPhi %6 %481 %418 %424 %422
               OpBranch %427
        %427 = OpLabel
        %483 = OpPhi %6 %27 %372 %482 %425
        %359 = OpCompositeConstruct %7 %354 %483
        %142 = OpFSub %7 %189 %274
        %144 = OpFAdd %7 %142 %359
        %147 = OpVectorTimesScalar %7 %144 %146
        %148 = OpExtInst %7 %1 Floor %147
        %150 = OpFMul %7 %148 %491
        %157 = OpLoad %154 %156
        %159 = OpImageSampleImplicitLod %113 %157 %150
        %162 = OpCompositeExtract %6 %159 0
        %163 = OpCompositeExtract %6 %159 1
        %164 = OpCompositeExtract %6 %159 2
        %165 = OpCompositeConstruct %113 %162 %163 %164 %81
               OpStore %152 %165
               OpReturn
               OpFunctionEnd
END

# uniforms for reference

# tex
SAMPLER reference_tex


BUFFER reference_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics reference_pipeline
  ATTACH reference_vertex_shader
  ATTACH reference_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER reference_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER reference_tex DESCRIPTOR_SET 0 BINDING 0
END
CLEAR_COLOR reference_pipeline 0 0 0 255

CLEAR reference_pipeline
RUN reference_pipeline DRAW_RECT POS 0 0 SIZE 256 256


SHADER vertex variant_vertex_shader PASSTHROUGH

# variant_fragment_shader is derived from the following GLSL:
# #version 320 es
#
# #ifndef REDUCER
# #define _GLF_ZERO(X, Y)                   (Y)
# #define _GLF_ONE(X, Y)                    (Y)
# #define _GLF_FALSE(X, Y)                  (Y)
# #define _GLF_TRUE(X, Y)                   (Y)
# #define _GLF_IDENTITY(X, Y)               (Y)
# #define _GLF_DEAD(X)                      (X)
# #define _GLF_FUZZED(X)                    (X)
# #define _GLF_WRAPPED_LOOP(X)              X
# #define _GLF_WRAPPED_IF_TRUE(X)           X
# #define _GLF_WRAPPED_IF_FALSE(X)          X
# #define _GLF_SWITCH(X)                    X
# #define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
# #define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
# #endif
#
# // END OF GENERATED HEADER
# precision highp float;
#
# struct _GLF_struct_14 {
#  uvec3 _f0;
# } ;
#
# struct _GLF_struct_13 {
#  mat3x2 _f0;
#  int _f1;
#  mat4x2 _f2;
# } ;
#
# struct _GLF_struct_15 {
#  _GLF_struct_13 _f0;
#  _GLF_struct_14 _f1;
# } ;
#
# struct _GLF_struct_11 {
#  bvec2 _f0;
#  int _f1;
#  mat2x3 _f2;
#  bool _f3;
# } ;
#
# struct _GLF_struct_10 {
#  mat4x2 _f0;
#  uvec4 _f1;
#  mat4x2 _f2;
#  mat4x2 _f3;
#  mat2 _f4;
#  vec4 _f5;
# } ;
#
# struct _GLF_struct_12 {
#  ivec2 _f0;
#  mat2 _f1;
#  _GLF_struct_10 _f2;
#  uvec4 _f3;
#  float dist;
#  vec4 _f4;
#  _GLF_struct_11 _f5;
#  mat2 _f6;
# } ;
#
# struct _GLF_struct_8 {
#  mat4 _f0;
#  bool _f1;
#  vec3 _f2;
# } ;
#
# struct _GLF_struct_7 {
#  bvec3 _f0;
#  ivec3 _f1;
# } ;
#
# struct _GLF_struct_6 {
#  uvec4 _f0;
#  ivec4 _f1;
# } ;
#
# struct _GLF_struct_5 {
#  mat4x3 _f0;
#  mat2x3 _f1;
#  mat4 _f2;
#  mat2x3 _f3;
#  vec2 _f4;
#  ivec3 _f5;
#  bvec4 _f6;
# } ;
#
# struct _GLF_struct_9 {
#  _GLF_struct_5 _f0;
#  mat4x2 _f1;
#  _GLF_struct_6 _f2;
#  vec4 _f3;
#  _GLF_struct_7 _f4;
#  _GLF_struct_8 _f5;
#  mat3x2 _f6;
# } ;
#
# struct _GLF_struct_3 {
#  mat3 _f0;
#  mat4 _f1;
#  uvec3 _f2;
# } ;
#
# struct _GLF_struct_2 {
#  float _f0;
#  uvec2 _f1;
#  mat3 _f2;
#  bvec2 _f3;
#  uvec2 _f4;
#  bvec2 _f5;
# } ;
#
# struct _GLF_struct_1 {
#  uvec2 _f0;
#  mat2x4 _f1;
#  vec4 _f2;
#  ivec3 _f3;
# } ;
#
# struct _GLF_struct_0 {
#  vec3 _f0;
#  mat4x2 _f1;
#  float _f2;
# } ;
#
# struct _GLF_struct_4 {
#  uvec4 _f0;
#  _GLF_struct_0 _f1;
#  bvec2 _f2;
#  _GLF_struct_1 _f3;
#  _GLF_struct_2 _f4;
#  _GLF_struct_3 _f5;
#  bool _f6;
# } ;
#
# struct _GLF_struct_16 {
#  _GLF_struct_4 _f0;
#  _GLF_struct_9 _f1;
#  _GLF_struct_12 _f2;
#  mat2x4 _f3;
#  _GLF_struct_15 _f4;
#  ivec3 _f5;
#  ivec4 _f6;
# } ;
#
# layout(push_constant) uniform buf_push {
#  highp vec2 injectionSwitch;
# };
# layout(location = 0) out vec4 _GLF_color;
#
# layout(set = 0, binding = 0) uniform sampler2D tex;
#
# float ReallyApproxNormalizedAtan2(vec2 v)
# {
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = log(vec4(-6607.5278, 957.013, -8.6, 4.1));
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7892.0894) : 0.0))))))
#    {
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#    }
#  }
#  {
#   if(_GLF_DEAD(false))
#    return 1.0;
#   if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#    {
#     _GLF_color = (6.5 * vec4(-92.86, -9.1, 0.9, -83.32)).tsts;
#    }
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#    {
#     _GLF_color = vec4(vec2(-2.5, -7823.2245), dFdy(vec2(9.0, -1.9)));
#    }
#   _GLF_color = vec4(469.208, 0.5, 9.9, 6.5);
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
#    {
#     if(_GLF_DEAD(false))
#      return 1.0;
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#    }
#  }
#  float pi2 = _GLF_IDENTITY(1.0 / (_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(18.52)), bool(false)))), float(_GLF_FUZZED(-31.67)), bool(false))), 1.0)), 0.0, 0.0))) / 113.0), min(1.0 / (_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_IDENTITY(tan(0.0), (true ? _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))) : _GLF_FUZZED(6.1)))), float(_GLF_FUZZED(95.30)), bool(false))), 1.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))) / 113.0), 1.0 / (_GLF_IDENTITY(_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 0.0, tan(0.0), 1.0, _GLF_IDENTITY(determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 1.0)), cos(0.0) * (determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), exp(0.0), 1.0), (false ? _GLF_FUZZED(mat2x4(3096.1869, 18.83, -6.0, -7508.8798, -121.266, -2.9, -3.9, -0.4)) : mat2x4(1.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), exp(0.0), 1.0))))))))), 0.0, 0.0))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 1.0)), 0.0, 0.0))), clamp(_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(tan(0.0), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), clamp(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(_GLF_IDENTITY(mat2x4(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 0.0), mat2x4(mat3x4(mat2x4(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), _GLF_IDENTITY(tan(0.0), (tan(0.0)) * 1.0), _GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0, 0.0))))))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), (float(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))) / 1.0), float(vec3(_GLF_IDENTITY(tan(0.0), _GLF_IDENTITY(clamp(tan(0.0), tan(0.0), tan(0.0)), max(clamp(tan(0.0), tan(0.0), tan(0.0)), clamp(tan(0.0), tan(0.0), tan(0.0))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), float(vec3(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, _GLF_IDENTITY(log(exp(0.0)), (true ? log(exp(0.0)) : _GLF_FUZZED(6.6))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, log(exp(_GLF_IDENTITY(0.0, float(vec4(0.0, 1.0, 1.0, 1.0))))), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), (mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, log(exp(0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), (true ? float(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, log(exp(0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, log(exp(0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0), (mat4(0.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), 1.0, 1.0, log(exp(0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))) : _GLF_FUZZED(77.58)))), 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)))))), float(_GLF_FUZZED(409.012)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), ((0.0)) * 1.0) - 0.0), 0.0, 0.0, 1.0)), 0.0, 0.0))), clamp(_GLF_IDENTITY(355.0, _GLF_IDENTITY(float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), (_GLF_IDENTITY(float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), mix(float(float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), float(_GLF_FUZZED(vec4(8608.0493, 75.87, -58.63, -2.7).q)), bool(false)))) - abs(0.0))), _GLF_IDENTITY(355.0, float(mat4(355.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))), _GLF_IDENTITY(355.0, _GLF_IDENTITY(float(mat4(355.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-669.672)), bool(false))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), clamp(float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0)), float(mat4(355.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0))))))))) / 113.0)));
#  if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((gl_FragCoord.y < 0.0), bool(bvec4(_GLF_IDENTITY((gl_FragCoord.y < 0.0), ((gl_FragCoord.y < 0.0)) && true), true, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)), true))))))
#   {
#    if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
#     return 1.0;
#    if(_GLF_DEAD(false))
#     return 1.0;
#    if(_GLF_DEAD(false))
#     {
#      _GLF_color = vec4(5.1, 4912.2487, 9671.6629, -59.30);
#     }
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = sign(mat3x4(_GLF_IDENTITY(-3372.8810, (_GLF_IDENTITY(-3372.8810, _GLF_IDENTITY(float(vec4(-3372.8810, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0)), float(vec2(float(vec4(-3372.8810, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0)), 1.0))))) / 1.0), 4.1, 1.6, _GLF_IDENTITY(-6217.6624, (-6217.6624) / 1.0), 5.7, 5897.4479, -94.81, -9438.7731, -8799.1559, 4664.0778, 5320.4882, -56.84)[2]);
#     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
#      {
#       _GLF_IDENTITY(_GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (true ? _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (_GLF_color = _GLF_outVarBackup_GLF_color) * vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec4(-4.0, -991.868, 0.9, 285.742)))), (false ? _GLF_FUZZED(_GLF_color) : _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (true ? _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (_GLF_color = _GLF_outVarBackup_GLF_color) * vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec4(-4.0, -991.868, 0.9, 285.742))))));
#       if(_GLF_DEAD(false))
#        return 1.0;
#      }
#    }
#    if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
#     {
#     }
#    else
#     {
#      return 1.0;
#     }
#   }
#  if(_GLF_DEAD(false))
#   {
#    if(_GLF_DEAD(false))
#     return 1.0;
#    return 1.0;
#   }
#  if(length(v) < 0.001)
#   {
#    if(_GLF_DEAD(false))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = (300.183 * (vec4(7.3, 7.8, 2036.4793, 1219.5530) * mat4(-469.254, -8.1, -3021.0175, -64.04, -859.265, 9799.0437, 0.5, -2.8, _GLF_IDENTITY(1.1, min(1.1, _GLF_IDENTITY(1.1, mix(float(_GLF_FUZZED(876.790)), float(1.1), bool(true))))), -88.90, 5597.5473, -9.0, 87.91, 1.8, 44.55, -38.76)));
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      do
#       {
#        _GLF_color = vec4(-9272.9035, -868.226, 7.2, 4204.0082);
#       }
#      while(_GLF_WRAPPED_LOOP(false));
#      if(_GLF_DEAD(false))
#       return 1.0;
#     }
#    if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
#     return 1.0;
#    if(_GLF_DEAD(false))
#     return 1.0;
#    return 0.0;
#   }
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = vec4(-32.19, -2.5, -477.051, _GLF_IDENTITY(-379.167, 1.0 * (-379.167)));
#   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#    {
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = vec4(5.2, -7457.5342, -54.29, -705.725);
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_DEAD(false))
#      return 1.0;
#    }
#   {
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    _GLF_color = fract(vec4(2.2, 532.388, 15.60, 1.0));
#    if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0)))), (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))) || false))))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#  }
#  vec2 a = abs(v);
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#   return 1.0;
#  float z;
#  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#   return 1.0;
#  if(a.y > a.x)
#   {
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.x < _GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(gl_FragCoord.x, clamp(gl_FragCoord.x, _GLF_IDENTITY(gl_FragCoord.x, max(gl_FragCoord.x, gl_FragCoord.x)), gl_FragCoord.x)) < _GLF_ZERO(0.0, injectionSwitch.x)) && true)))))
#      return 1.0;
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#      return 1.0;
#     _GLF_color = vec4(34.14, 3.9, _GLF_IDENTITY(-1.0, min(-1.0, _GLF_IDENTITY(-1.0, (-1.0) + 0.0))), 130.562);
#     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))), ! (! (bool(bvec2(true, true)))))))) || false))
#      {
#       if(_GLF_DEAD(false))
#        {
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_outVarBackup_GLF_color = _GLF_color;
#          _GLF_color = dFdy(vec4(3664.9328, 99.27, -0.8, 8.8));
#          if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false), true)))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_TRUE(true))), (! (! (_GLF_WRAPPED_IF_TRUE(true)))) || false))))))
#           {
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_outVarBackup_GLF_color = _GLF_color;
#          _GLF_color = vec4(-2141.9041, 2.2, -2.0, -9.2);
#          if(_GLF_WRAPPED_IF_TRUE(true))
#           {
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#         return 1.0;
#         if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#          return 1.0;
#        }
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    z = a.x / a.y;
#   }
#  else
#   {
#    z = a.y / _GLF_IDENTITY(a.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(a.x, float(_GLF_IDENTITY(vec3(a.x, 1.0, 1.0), (vec3(a.x, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0)))), (a.x) + 0.0), mix(float(_GLF_FUZZED(-904.743)), float(a.x), bool(true))), a.x, _GLF_IDENTITY(a.x, (false ? _GLF_FUZZED(pi2) : a.x))));
#   }
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   if(_GLF_DEAD(false))
#    {
#     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = dFdy(vec4(8.1, 6.5, 77.68, -126.030));
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       return 1.0;
#      }
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < abs(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-4.5, clamp(_GLF_IDENTITY(-4.5, max(-4.5, -4.5)), -4.5, _GLF_IDENTITY(-4.5, min(-4.5, -4.5)))), max(_GLF_IDENTITY(-4.5, clamp(_GLF_IDENTITY(-4.5, max(-4.5, -4.5)), -4.5, _GLF_IDENTITY(-4.5, min(-4.5, -4.5)))), _GLF_IDENTITY(_GLF_IDENTITY(-4.5, clamp(_GLF_IDENTITY(-4.5, max(-4.5, -4.5)), -4.5, _GLF_IDENTITY(-4.5, min(-4.5, -4.5)))), float(mat4x3(_GLF_IDENTITY(-4.5, clamp(_GLF_IDENTITY(-4.5, max(-4.5, -4.5)), -4.5, _GLF_IDENTITY(-4.5, min(-4.5, -4.5)))), 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, 0.0))))))), float(0.0), bool(true))))))))
#      return 1.0;
#     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord, mix(vec4((gl_FragCoord)[0], (gl_FragCoord)[1], (gl_FragCoord)[2], _GLF_FUZZED(7336.7430)), vec4(_GLF_FUZZED(-3902.4275), _GLF_FUZZED(vec3(8.5, -3.0, 983.530).x), _GLF_FUZZED(122.049), (gl_FragCoord)[3]), bvec4(false, false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)), true))).x < 0.0))))
#      {
#       _GLF_IDENTITY(_GLF_color = vec4(8.6, -539.462, -98.28, -97.57), vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_color = vec4(8.6, -539.462, -98.28, -97.57)));
#       if(_GLF_DEAD(false))
#        return 1.0;
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(_GLF_IDENTITY(-8109.6917, min(-8109.6917, -8109.6917)), -386.459, -8.6, 6.8);
#        if(_GLF_DEAD(false))
#         return 1.0;
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#      }
#     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)), bool(bvec3(_GLF_FALSE(false, (gl_FragCoord.x < 0.0)), true, true))))))))
#      return 1.0;
#     return _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(determinant(mat4(611.493, -5208.5547, 3255.1421, 6.4, -7.9, 276.590, -794.340, 3884.8417, -6.7, -93.97, -67.29, -9.6, 87.72, -7.6, 21.20, 58.55)))));
#     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
#      {
#       if(_GLF_DEAD(false))
#        return 1.0;
#       return _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord, (false ? _GLF_FUZZED(vec4(7347.3481, 36.48, -5005.7418, -94.98)) : gl_FragCoord)).y, max(_GLF_IDENTITY(gl_FragCoord, (false ? _GLF_FUZZED(vec4(7347.3481, 36.48, -5005.7418, -94.98)) : gl_FragCoord)).y, _GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord, (false ? _GLF_FUZZED(vec4(7347.3481, 36.48, -5005.7418, -94.98)) : gl_FragCoord)).y, (_GLF_IDENTITY(gl_FragCoord, (false ? _GLF_FUZZED(vec4(7347.3481, 36.48, -5005.7418, -94.98)) : gl_FragCoord)).y) - 0.0))) < 0.0)) ? _GLF_FUZZED(z) : 1.0));
#      }
#    }
#   {
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    _GLF_color = vec4(190.291, -1.5, 7.3, 311.903);
#    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#   if(_GLF_DEAD(false))
#    {
#     _GLF_color = vec4(2819.2750, -64.76, 664.718, 9158.6954);
#    }
#   if(_GLF_DEAD(false))
#    return 1.0;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   if(_GLF_DEAD(false))
#    {
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      if(_GLF_WRAPPED_IF_FALSE(false))
#       {
#       }
#      else
#       {
#        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#         return 1.0;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#       }
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = atan(vec4(29.65, -7.7, 9.3, 958.171));
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, max(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color));
#        }
#      }
#      _GLF_color = vec4(-33.50, 5.3, 4.2, 4.8);
#      for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(7.5, 2285.4583, -9230.8190, -3.9);
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          if(_GLF_DEAD(false))
#           {
#            {
#             vec4 _GLF_outVarBackup_GLF_color;
#             _GLF_outVarBackup_GLF_color = _GLF_color;
#             _GLF_color = vec4(-75.16, 9.4, -8.3, _GLF_IDENTITY(16.26, (_GLF_IDENTITY(16.26, (16.26) * 1.0)) * 1.0));
#             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#              {
#               _GLF_color = _GLF_outVarBackup_GLF_color;
#              }
#            }
#            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))) : _GLF_FUZZED(a))).y))))
#             break;
#            return 1.0;
#            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), (_GLF_FALSE(false, (gl_FragCoord.y < 0.0))) && true)))))
#             break;
#           }
#          _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, vec4(0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY((_GLF_color = _GLF_outVarBackup_GLF_color), (_GLF_IDENTITY((_GLF_color = _GLF_outVarBackup_GLF_color), (_GLF_IDENTITY(true ? _GLF_IDENTITY((_GLF_color = _GLF_outVarBackup_GLF_color), vec4(1.0, 1.0, 1.0, 1.0) * ((_GLF_color = _GLF_outVarBackup_GLF_color))) : _GLF_FUZZED(_GLF_color), (_GLF_FALSE(false, (gl_FragCoord.y < length(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, 0.0)) - vec4(0.0, 0.0, 0.0, 0.0))))) ? _GLF_FUZZED((vec4(-0.1, 593.263, 4.7, 6.9) / _GLF_outVarBackup_GLF_color)) : true ? _GLF_IDENTITY((_GLF_color = _GLF_outVarBackup_GLF_color), vec4(1.0, 1.0, 1.0, 1.0) * ((_GLF_color = _GLF_outVarBackup_GLF_color))) : _GLF_FUZZED(_GLF_color)))))) - vec4(0.0, 0.0, 0.0, 0.0)));
#          if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#           return 1.0;
#         }
#       }
#     }
#     return 1.0;
#     if(_GLF_DEAD(false))
#      return 1.0;
#     {
#      if(_GLF_DEAD(false))
#       return 1.0;
#      vec4 _GLF_outVarBackup_GLF_color;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(-7593.6925, -9.7, -50.24, 3840.7846);
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      if(_GLF_DEAD(false))
#       return 1.0;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      if(_GLF_DEAD(false))
#       return 1.0;
#      _GLF_color = (vec4(84.94, -660.037, 5.5, -4.5) / 4.5);
#      if(_GLF_WRAPPED_IF_FALSE(false))
#       {
#       }
#      else
#       {
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), bool(bvec3(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))
#           return 1.0;
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#          if(_GLF_DEAD(false))
#           return 1.0;
#         }
#       }
#     }
#    }
#   _GLF_color = (_GLF_IDENTITY(mat3x4(-8963.0098, 1.2, -467.074, 309.425, 19.65, 7.9, 9.6, 6.8, -3.3, 4.8, -330.568, _GLF_IDENTITY(-4542.8233, 0.0 + (-4542.8233))) * vec3(-877.482, -1.4, _GLF_IDENTITY(106.755, min(106.755, 106.755))), clamp(mat3x4(-8963.0098, _GLF_IDENTITY(1.2, clamp(1.2, _GLF_IDENTITY(1.2, (1.2) - 0.0), 1.2)), -467.074, 309.425, 19.65, 7.9, 9.6, _GLF_IDENTITY(6.8, min(6.8, 6.8)), -3.3, 4.8, -330.568, -4542.8233) * vec3(-877.482, -1.4, 106.755), _GLF_IDENTITY(mat3x4(-8963.0098, 1.2, -467.074, 309.425, 19.65, 7.9, 9.6, 6.8, -3.3, 4.8, -330.568, -4542.8233) * vec3(-877.482, -1.4, 106.755), vec4(mat2x4(mat3x4(-8963.0098, 1.2, -467.074, 309.425, 19.65, 7.9, 9.6, 6.8, -3.3, 4.8, -330.568, -4542.8233) * vec3(-877.482, -1.4, 106.755), 0.0, 1.0, 0.0, 1.0))), mat3x4(-8963.0098, 1.2, -467.074, 309.425, 19.65, 7.9, 9.6, 6.8, -3.3, 4.8, -330.568, -4542.8233) * vec3(-877.482, -1.4, 106.755))));
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(z))))) && true))))
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord, clamp(gl_FragCoord, gl_FragCoord, gl_FragCoord)).x >= 0.0)) ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(z))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, log(1.0), 1.0)))))))
#      {
#       _GLF_color = trunc((_GLF_IDENTITY(vec4(2633.5611, -5009.4714, 15.12, 980.854) + vec4(-0.4, -4.3, -8036.2389, _GLF_IDENTITY(-42.58, float(mat2(-42.58, cos(0.0), sqrt(1.0), 0.0)))), _GLF_IDENTITY(mat4(1.0) * (vec4(2633.5611, -5009.4714, 15.12, 980.854) + vec4(-0.4, -4.3, -8036.2389, -42.58)), clamp(mat4(1.0) * (vec4(2633.5611, -5009.4714, 15.12, 980.854) + vec4(-0.4, -4.3, -8036.2389, -42.58)), mat4(1.0) * (vec4(2633.5611, -5009.4714, 15.12, 980.854) + vec4(-0.4, -4.3, -8036.2389, -42.58)), mat4(1.0) * (vec4(2633.5611, -5009.4714, 15.12, 980.854) + _GLF_IDENTITY(vec4(-0.4, -4.3, -8036.2389, -42.58), max(vec4(-0.4, -4.3, -8036.2389, -42.58), vec4(-0.4, -4.3, -8036.2389, -42.58)))))))));
#      }
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
#         {
#          _GLF_color = _GLF_IDENTITY(vec4(_GLF_IDENTITY(-5774.6682, float(mat3x4(-5774.6682, 0.0, 1.0, determinant(mat4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), log(1.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 1.0))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.6)), float(1.0), _GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), 0.0, 1.0, 0.0, abs(0.0), log(1.0), 0.0))), -0.6, 5.3, 9.2), (vec4(_GLF_IDENTITY(-5774.6682, float(mat3x4(-5774.6682, 0.0, 1.0, determinant(mat4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), log(1.0), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 1.0))))), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.6)), float(1.0), _GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), 0.0, 1.0, 0.0, abs(0.0), log(1.0), 0.0))), -0.6, 5.3, 9.2)) * vec4(1.0, 1.0, 1.0, 1.0));
#         }
#        _GLF_color = ((mat4(308.332, -513.110, -8.0, -5.5, 9469.3788, 35.55, -2704.6801, -28.37, 701.338, 97.11, -17.95, 3.5, 64.33, -4.8, 9.8, -706.368) != mat4(6736.1329, -286.825, _GLF_IDENTITY(-1128.6938, min(_GLF_IDENTITY(-1128.6938, (true ? -1128.6938 : _GLF_FUZZED(-9.1))), -1128.6938)), -54.12, 1.9, 29.67, 408.934, 1.8, -5.6, -1.6, 425.591, -6.0, 2.1, -7873.7351, -551.434, -1.2)) ? vec4(5167.4803, -993.716, -23.49, 8.6) : vec4(-56.11, _GLF_IDENTITY(1.9, min(1.9, 1.9)), -161.873, -88.48));
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#   else
#    {
#     if(_GLF_DEAD(false))
#      return 1.0;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = _GLF_IDENTITY(vec4(65.31), clamp(_GLF_IDENTITY(vec4(65.31), (true ? vec4(65.31) : _GLF_FUZZED(vec4(-4.9, 7.0, -78.17, -8814.0178)))), _GLF_IDENTITY(vec4(65.31), min(vec4(65.31), vec4(65.31))), vec4(65.31)));
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= _GLF_IDENTITY(0.0, max(0.0, 0.0))))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_DEAD(false))
#      {
#       if(_GLF_DEAD(false))
#        return 1.0;
#       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#        {
#         return 1.0;
#        }
#      }
#     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
#      return 1.0;
#    }
#   {
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = mod(vec4(-6.3, 6.2, -3229.7956, -8.0), -792.594);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    if(_GLF_DEAD(false))
#     return 1.0;
#    _GLF_color = vec4(847.128, 6947.4905, 7204.9647, -81.21);
#    if(_GLF_WRAPPED_IF_TRUE(true))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#  }
#  float th = _GLF_IDENTITY((0.97 - 0.19 * z * z), _GLF_IDENTITY(max(_GLF_IDENTITY((0.97 - 0.19 * z * z), ((0.97 - 0.19 * z * z)) - 0.0), _GLF_IDENTITY((_GLF_IDENTITY(0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z, _GLF_IDENTITY(max(_GLF_IDENTITY(0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z, float(vec4(0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z, abs(0.0), 1.0, tan(0.0)))), 0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z), mix(float(_GLF_FUZZED(16.14)), float(max(_GLF_IDENTITY(0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z, float(vec4(0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z, abs(0.0), 1.0, tan(0.0)))), 0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z)), bool(true))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0.97, _GLF_IDENTITY((0.97) / cos(0.0), ((0.97) / cos(0.0)) - tan(0.0))) - 0.19 * z * z, _GLF_IDENTITY((_GLF_IDENTITY(0.97 - _GLF_IDENTITY(_GLF_IDENTITY(0.19, (_GLF_IDENTITY(0.19, min(_GLF_IDENTITY(0.19, (true ? 0.19 : _GLF_FUZZED(625.072))), 0.19))) / 1.0), clamp(_GLF_IDENTITY(0.19, (_GLF_IDENTITY(0.19, min(_GLF_IDENTITY(0.19, (true ? 0.19 : _GLF_FUZZED(625.072))), 0.19))) / 1.0), _GLF_IDENTITY(0.19, (_GLF_IDENTITY(0.19, min(_GLF_IDENTITY(0.19, (true ? 0.19 : _GLF_FUZZED(625.072))), 0.19))) / 1.0), _GLF_IDENTITY(0.19, (_GLF_IDENTITY(0.19, min(_GLF_IDENTITY(0.19, (true ? 0.19 : _GLF_FUZZED(625.072))), 0.19))) / 1.0))) * z * z, mix(float(0.97 - _GLF_IDENTITY(0.19 * z, max(0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(586.416)), float(z), bool(true))), 0.19 * z)) * z), float(_GLF_FUZZED(7.8)), bool(false)))), float(mat2x3((_GLF_IDENTITY(0.97 - 0.19 * z * z, mix(float(0.97 - 0.19 * z * _GLF_IDENTITY(z, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), mat4(1.0) * (mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))))))), mix(float(_GLF_FUZZED(9470.3948)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), mat4(1.0) * (mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))))))), clamp(float(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), mat4(1.0) * (mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))))))), float(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), mat4(1.0) * (mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)))))))), float(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), transpose(transpose(_GLF_IDENTITY(mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0)), mat4(1.0) * (mat2x4(z, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)), abs(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0))))))))))), bool(true))))), float(_GLF_FUZZED(7.8)), bool(false)))), 1.0, 1.0, 0.0, 0.0, exp(0.0)))) - length(0.0)))) * 1.0)), min(max((0.97 - 0.19 * z * z), _GLF_IDENTITY((0.97 - 0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(z, (true ? z : _GLF_FUZZED(z))))) * z), ((_GLF_IDENTITY(0.97 - 0.19 * z * z, _GLF_IDENTITY((_GLF_IDENTITY(0.97 - 0.19 * z * z, mix(float(0.97 - 0.19 * z * z), float(_GLF_FUZZED(7.8)), bool(false)))), float(mat2x3((_GLF_IDENTITY(_GLF_IDENTITY(0.97 - 0.19 * z * z, (false ? _GLF_FUZZED(z) : _GLF_IDENTITY(0.97 - 0.19 * z * z, min(0.97 - 0.19 * z * z, 0.97 - 0.19 * z * z)))), mix(float(_GLF_IDENTITY(0.97, mix(float(0.97), float(_GLF_FUZZED(73.49)), bool(false))) - 0.19 * z * z), float(_GLF_FUZZED(7.8)), bool(false)))), 1.0, 1.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(0.0 + (0.0), mix(float(_GLF_FUZZED(5902.4685)), float(0.0 + (0.0)), bool(true)))), 0.0)), 0.0)), 0.0, exp(0.0)))) - length(0.0)))) * 1.0)), max((0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(-5612.0265)), float(z), bool(true))) * z, max(_GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(-5612.0265)), float(z), bool(true))) * z, min(0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(-5612.0265)), float(z), bool(true))) * z, 0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(-5612.0265)), float(z), bool(true))) * z)), 0.19 * _GLF_IDENTITY(z, mix(float(_GLF_FUZZED(-5612.0265)), float(z), bool(true))) * z))), _GLF_IDENTITY(_GLF_IDENTITY((0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z, sqrt(0.0) + (0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z))), max((0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z, sqrt(0.0) + (0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z))), _GLF_IDENTITY((0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z, sqrt(0.0) + (0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z))), min((0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z, sqrt(0.0) + (0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z))), (0.97 - _GLF_IDENTITY(0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z, sqrt(0.0) + (0.19 * _GLF_IDENTITY(z, max(z, _GLF_IDENTITY(_GLF_IDENTITY(z, min(z, z)), (true ? z : _GLF_FUZZED(z))))) * z))))))), ((_GLF_IDENTITY(0.97 - 0.19 * z * z, _GLF_IDENTITY((_GLF_IDENTITY(0.97 - 0.19 * z * z, mix(float(0.97 - _GLF_IDENTITY(0.19 * z * _GLF_IDENTITY(z, mix(float(_GLF_IDENTITY(z, max(z, z))), float(_GLF_FUZZED(-51.42)), bool(false))), _GLF_IDENTITY(float(vec2(0.19 * z * _GLF_IDENTITY(z, mix(float(_GLF_IDENTITY(z, max(z, z))), float(_GLF_FUZZED(-51.42)), bool(false))), 0.0)), mix(float(float(vec2(0.19 * z * _GLF_IDENTITY(z, mix(float(_GLF_IDENTITY(z, max(z, z))), float(_GLF_FUZZED(-51.42)), bool(false))), 0.0))), float(_GLF_FUZZED(-44.06)), bool(false))))), float(_GLF_FUZZED(7.8)), bool(false)))), float(mat2x3((_GLF_IDENTITY(0.97 - 0.19 * z * z, mix(float(0.97 - 0.19 * z * z), float(_GLF_FUZZED(7.8)), bool(false)))), 1.0, 1.0, 0.0, 0.0, exp(0.0)))) - length(0.0)))) * 1.0))))) * z * pi2;
#  if(_GLF_DEAD(false))
#   return _GLF_IDENTITY(1.0, max(1.0, 1.0));
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#   {
#    _GLF_color = fwidth(intBitsToFloat(ivec4(-13391, -5707, -94629, 60609)));
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = vec4(-1.2, -0.6, -8.3, -3700.6541);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, abs(cos(vec4(0.0, 0.0, 0.0, 0.0))) * (_GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (_GLF_color = _GLF_outVarBackup_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0))));
#      }
#    }
#    if(_GLF_DEAD(false))
#     return 1.0;
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < _GLF_ZERO(0.0, injectionSwitch.x)))))
#      return 1.0;
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = fract(fwidth(vec4(9.2, 3.0, -9.6, 26.31)));
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = smoothstep(-783.739, 7.5, vec4(-88.63, 5.0, 665.226, -826.648));
#     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#   }
#  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#   return 1.0;
#  if(_GLF_DEAD(false))
#   return 1.0;
#  if(a.y < _GLF_IDENTITY(a.x, clamp(a.x, a.x, a.x)))
#   {
#    if(_GLF_DEAD(false))
#     {
#      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
#       return 1.0;
#      return 1.0;
#     }
#    th = 0.5 - th;
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.x < 0.0, (_GLF_IDENTITY(gl_FragCoord.x < 0.0, bool(bool(gl_FragCoord.x < 0.0)))) && true)))))
#      return 1.0;
#     _GLF_color = vec4(3.3, -1.3, _GLF_IDENTITY(-26.79, clamp(-26.79, -26.79, -26.79)), -97.50);
#     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#      {
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#       else
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#          return 1.0;
#        }
#      }
#    }
#   }
#  if(_GLF_IDENTITY(v, max(v, v)).x < 0.0)
#   {
#    if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (gl_FragCoord.y >= _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) - 0.0)), float(_GLF_FUZZED(46.43)), bool(false))))) && (false)), (injectionSwitch.x > injectionSwitch.y))))
#     {
#      if(_GLF_DEAD(false))
#       {
#        _GLF_color = dFdy(vec4(9.7, 3.7, 7.2, -911.113));
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = (vec4(85.54, 926.551, 46.10, -92.72) * vec4(8.7, 0.2, 37.81, 50.26));
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), (gl_FragCoord.y >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#       }
#      return 1.0;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = (vec4(-452.070, _GLF_IDENTITY(879.406, max(_GLF_IDENTITY(879.406, (true ? 879.406 : _GLF_FUZZED(pi2))), 879.406)), 82.39, -22.72) + vec4(170.916, 3.3, 6.6, _GLF_IDENTITY(-37.80, (false ? _GLF_FUZZED(z) : -37.80))));
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#     }
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < length(vec3(0.0, 0.0, 0.0))))))
#      return 1.0;
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = min(vec4(_GLF_IDENTITY(118.444, (_GLF_IDENTITY(118.444, min(118.444, 118.444))) / 1.0), _GLF_IDENTITY(-90.34, mix(float(_GLF_FUZZED(69.95)), float(-90.34), bool(true))), 4046.9929, 666.185), vec4(-3.3, 353.009, -358.357, -7912.9526));
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = (exp2(25.98) / vec4(1474.3789, -1.8, 341.506, 8.1));
#      if(_GLF_WRAPPED_IF_TRUE(true))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
#      return 1.0;
#     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#      {
#       if(_GLF_DEAD(false))
#        {
#         _GLF_color = vec4(-61.81, -55.34, -5.3, -9.8);
#        }
#       _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(_GLF_outVarBackup_GLF_color[0], _GLF_outVarBackup_GLF_color[1], _GLF_outVarBackup_GLF_color[2], _GLF_outVarBackup_GLF_color[3]));
#      }
#     if(_GLF_DEAD(false))
#      return 1.0;
#    }
#    th = 1.0 - _GLF_IDENTITY(th, clamp(th, th, th));
#    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#     {
#      if(_GLF_DEAD(false))
#       return 1.0;
#      vec4 _GLF_outVarBackup_GLF_color;
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))))))
#       return 1.0;
#      for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(_GLF_IDENTITY(317.447, max(_GLF_IDENTITY(317.447, (317.447) + 0.0), 317.447)), -231.711, -4.2, 22.68);
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#       }
#      if(_GLF_DEAD(false))
#       {
#        _GLF_color = min(vec4(-6.4, -5366.2032, -103.708, -622.395), abs(vec4(-0.1, -1.4, 72.41, 6705.8604)));
#        if(_GLF_DEAD(false))
#         return 1.0;
#       }
#      if(_GLF_DEAD(false))
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = faceforward(vec4(-6.7, -9765.2083, -569.885, 481.318), vec4(-6310.6428, 1.3, 639.849, 6696.1657), vec4(7.1, -9.4, 0.5, -72.91));
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         if(_GLF_DEAD(false))
#          return 1.0;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(48.03, 47.62, -4.2, 3781.0682);
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        if(_GLF_DEAD(false))
#         return 1.0;
#        return 1.0;
#       }
#      if(_GLF_DEAD(false))
#       {
#        _GLF_color = sign(vec4(-6590.7583, -3.0, 8.3, 954.478));
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#         return 1.0;
#       }
#      _GLF_color = vec4(-41.48, -39.39, _GLF_IDENTITY(18.17, min(18.17, 18.17)), -2.4);
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_IDENTITY(_GLF_color, _GLF_IDENTITY(min(_GLF_color, _GLF_IDENTITY(_GLF_color, max(_GLF_color, _GLF_color))), (min(_GLF_color, _GLF_IDENTITY(_GLF_color, max(_GLF_color, _GLF_color)))) * vec4(1.0, 1.0, 1.0, 1.0)));
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#        {
#         _GLF_color = vec4(139.204);
#        }
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(-2685.4858, 62.80, -314.722, -2.9);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       _GLF_color = (vec4(3.7, -43.86, 6.4, -7763.7995) + vec4(-6.2, 6.8, -82.79, 611.109));
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(-37.36, 931.323, -569.151, 50.69);
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       if(_GLF_DEAD(false))
#        {
#         if(_GLF_DEAD(false))
#          return 1.0;
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_outVarBackup_GLF_color = _GLF_color;
#          _GLF_color = vec4((dot(5.6, -3.8) * -6204.9928), vec3(91.72, 256.847, -64.84));
#          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#           {
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#         _GLF_color = atanh(vec4(946.452, -63.76, 5.2, 8.8));
#        }
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_outVarBackup_GLF_color = _GLF_color;
#          _GLF_color = vec4(-9087.6326, 47.46, -44.41, -6.4);
#          if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (gl_FragCoord.y >= sqrt(0.0))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (gl_FragCoord.y >= sqrt(0.0))), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (gl_FragCoord.y >= sqrt(0.0))), (_GLF_TRUE(true, (gl_FragCoord.y >= sqrt(0.0)))) && true), true, false)))))))
#           {
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#         if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#          {
#           _GLF_color = _GLF_IDENTITY(ceil((length(vec2(-5285.1867, -94.08)) / degrees(vec4(_GLF_IDENTITY(61.37, clamp(61.37, _GLF_IDENTITY(61.37, mix(float(_GLF_FUZZED(-98.40)), float(_GLF_IDENTITY(61.37, _GLF_IDENTITY(float(vec2(61.37, 1.0)), float(_GLF_IDENTITY(mat4(float(vec2(61.37, 1.0)), tan(0.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 0.0, 1.0), transpose(transpose(mat4(float(vec2(61.37, 1.0)), tan(0.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 0.0, 1.0)))))))), bool(true))), 61.37)), -972.127, -4.4, 8.9)))), (ceil((length(vec2(-5285.1867, -94.08)) / degrees(vec4(_GLF_IDENTITY(61.37, clamp(61.37, _GLF_IDENTITY(61.37, mix(float(_GLF_FUZZED(-98.40)), float(_GLF_IDENTITY(61.37, float(vec2(61.37, 1.0)))), bool(true))), 61.37)), -972.127, -4.4, 8.9))))) / vec4(1.0, 1.0, 1.0, 1.0));
#           {
#            if(_GLF_DEAD(false))
#             {
#              {
#               vec4 _GLF_outVarBackup_GLF_color;
#               _GLF_outVarBackup_GLF_color = _GLF_color;
#               _GLF_color = (vec2(56.26, -5.5) * mat4x2(-8.0, 4.9, -97.01, 86.79, -9.2, -867.570, 28.41, -20.27));
#               if(_GLF_WRAPPED_IF_TRUE(true))
#                {
#                 _GLF_color = _GLF_outVarBackup_GLF_color;
#                }
#              }
#              return 1.0;
#             }
#            vec4 _GLF_outVarBackup_GLF_color;
#            _GLF_outVarBackup_GLF_color = _GLF_color;
#            _GLF_color = vec4(3.2, -25.38, 4570.8795, 3.7);
#            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((gl_FragCoord.y >= 0.0), bool(bvec3((gl_FragCoord.y >= 0.0), true, false))))))
#             {
#              _GLF_color = _GLF_outVarBackup_GLF_color;
#             }
#           }
#           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#            return 1.0;
#          }
#        }
#      }
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       if(_GLF_DEAD(false))
#        return 1.0;
#       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true))))))), ! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false))))), (_GLF_IDENTITY(false, (false) && true)) || false), true, true)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true))))))), ! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false))))), (_GLF_IDENTITY(false, (false) && true)) || false), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), bvec3(bvec4(bvec3(bvec4(bvec3((false) && true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true))))))), ! (! (_GLF_IDENTITY(false, (false) && true))))), _GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false))))), (_GLF_IDENTITY(false, (false) && true)) || false), true, true))))))))))
#        {
#         if(_GLF_DEAD(false))
#          return 1.0;
#         _GLF_color = vec4(-8.5, -4.9, 48.36, -1.5);
#        }
#       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))), true))))
#        {
#        }
#       else
#        {
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#        }
#       if(_GLF_DEAD(false))
#        return 1.0;
#       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))), true, false))))
#        {
#         _GLF_color = tanh(vec4(_GLF_IDENTITY(-1605.0114, mix(float(_GLF_IDENTITY(-1605.0114, _GLF_IDENTITY((-1605.0114), ((-1605.0114)) / exp(0.0)) - 0.0)), float(_GLF_FUZZED(7.2)), bool(false))), 9261.1216, -7.3, -62.99));
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, _GLF_IDENTITY((_GLF_outVarBackup_GLF_color = _GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec4(-4.9, 2301.5595, 576.769, 8.8)) : (_GLF_outVarBackup_GLF_color = _GLF_color) / vec4(1.0, 1.0, 1.0, 1.0))))) * vec4(1.0, 1.0, 1.0, 1.0))) + vec4(0.0, 0.0, 0.0, 0.0));
#          _GLF_color = vec4(9367.6992, 4366.9791, -0.4, -7470.9350);
#          if(_GLF_WRAPPED_IF_TRUE(true))
#           {
#            if(_GLF_DEAD(false))
#             return 1.0;
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#         {
#          vec4 _GLF_outVarBackup_GLF_color;
#          _GLF_outVarBackup_GLF_color = _GLF_color;
#          _GLF_color = abs(vec4(-142.720, -2.4, -4745.7883, 75.31));
#          if(_GLF_WRAPPED_IF_TRUE(true))
#           {
#            _GLF_color = _GLF_outVarBackup_GLF_color;
#           }
#         }
#        }
#       _GLF_color = vec4(_GLF_IDENTITY(_GLF_IDENTITY(-5.1, max(-5.1, -5.1)), (-5.1) / 1.0), 8.2, -2.0, -2923.9638);
#       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord.x < 0.0, _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord.x, (_GLF_IDENTITY(gl_FragCoord.x, (gl_FragCoord.x) - 0.0)) - 0.0) < 0.0, false || (_GLF_IDENTITY(gl_FragCoord.x < 0.0, true && (gl_FragCoord.x < 0.0))))), ! (! (true && (_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord.x, (_GLF_IDENTITY(gl_FragCoord.x, (gl_FragCoord.x) - 0.0)) - 0.0) < 0.0, false || (_GLF_IDENTITY(gl_FragCoord.x < 0.0, true && (gl_FragCoord.x < 0.0))))))))), (_GLF_IDENTITY(gl_FragCoord.x < 0.0, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), true && (! (_GLF_IDENTITY(true, false || (true))))))))) && (_GLF_IDENTITY(gl_FragCoord.x < 0.0, false || (_GLF_IDENTITY(gl_FragCoord.x < 0.0, _GLF_IDENTITY(true && (gl_FragCoord.x < 0.0), (_GLF_IDENTITY(true && (gl_FragCoord.x < 0.0), (true && (gl_FragCoord.x < 0.0)) || false)) && true))))))) && true)))))
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord, (gl_FragCoord) * vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), 1.0)).x < _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), float(_GLF_IDENTITY(mat2x4(float(0.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED((pi2)) : 1.0)), 0.0, 1.0), (false ? _GLF_FUZZED(mat2x4(mat3(94.58, 8.4, 39.79, -43.99, -5.9, 4.3, -8.1, 7.5, -795.816))) : mat2x4(float(0.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0))))), float(_GLF_FUZZED(-901.078)), bool(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))))
#          {
#           if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#            return 1.0;
#           return 1.0;
#          }
#         return 1.0;
#        }
#       if(_GLF_DEAD(false))
#        return 1.0;
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < _GLF_ZERO(0.0, injectionSwitch.x)))))
#          return 1.0;
#         _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, _GLF_IDENTITY((_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(8.2, 812.940, 60.74, -3.3)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat2(_GLF_outVarBackup_GLF_color))), min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), mat4(1.0) * (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color))))))), mix(vec4(_GLF_FUZZED(-30.98), ((_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(8.2, 812.940, 60.74, -3.3)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat2(_GLF_outVarBackup_GLF_color))), min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), mat4(1.0) * (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color))))))))[1], ((_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(8.2, 812.940, 60.74, -3.3)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat2(_GLF_outVarBackup_GLF_color))), min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), mat4(1.0) * (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color))))))))[2], _GLF_FUZZED(-1.0)), vec4(((_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(8.2, 812.940, 60.74, -3.3)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat2(_GLF_outVarBackup_GLF_color))), min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), mat4(1.0) * (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color))))))))[0], _GLF_FUZZED(2.3), _GLF_FUZZED(79.61), ((_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(8.2, 812.940, 60.74, -3.3)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat2(_GLF_outVarBackup_GLF_color))), min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color)), mat4(1.0) * (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color))))))))[3]), bvec4(true, false, false, true))));
#        }
#      }
#      if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (gl_FragCoord.x >= 0.0)) && (false))))
#       {
#        _GLF_color = vec4(-33.73, 5.8, 7.2, 2090.7633);
#       }
#      if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
#       return 1.0;
#      if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (gl_FragCoord.x < 0.0)) || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), (gl_FragCoord.y >= tan(0.0)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (gl_FragCoord.x < 0.0)) || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), (_GLF_IDENTITY(gl_FragCoord, min(gl_FragCoord, gl_FragCoord)).y >= tan(0.0))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true))), _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true)))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false), _GLF_FALSE(false, (gl_FragCoord.x < 0.0)) || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), (gl_FragCoord.y >= tan(0.0)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.y >= tan(0.0), (gl_FragCoord.y >= tan(0.0)) && true)))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (gl_FragCoord.x < 0.0)) || (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec3(true, false, true)), true && (bool(bvec3(true, false, true)))))))))), (gl_FragCoord.y >= tan(0.0)))))))))))))
#       {
#        _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, vec4(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), 1.0) * (_GLF_color = _GLF_outVarBackup_GLF_color));
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#         return _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-7657.9932))), float(1.0), bool(true)));
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(0.6, -4687.1528, 455.212, -72.46);
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        if(_GLF_DEAD(false))
#         {
#          if(_GLF_DEAD(false))
#           {
#            _GLF_color = vec4(_GLF_IDENTITY(8.7, (8.7) / 1.0), 6258.0453, 1.8, -6.2);
#           }
#          {
#           vec4 _GLF_outVarBackup_GLF_color;
#           _GLF_outVarBackup_GLF_color = _GLF_color;
#           _GLF_color = vec4(7.8, 3.2, -54.46, -6.6);
#           if(_GLF_WRAPPED_IF_TRUE(true))
#            {
#             _GLF_color = _GLF_outVarBackup_GLF_color;
#            }
#          }
#          return 1.0;
#         }
#       }
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       if(_GLF_DEAD(false))
#        return 1.0;
#       if(_GLF_DEAD(false))
#        return 1.0;
#       _GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, (true ? _GLF_outVarBackup_GLF_color = _GLF_color : _GLF_FUZZED(_GLF_outVarBackup_GLF_color)));
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#        {
#         _GLF_color = (vec4(-7587.5428, _GLF_IDENTITY(-653.241, float(vec4(_GLF_IDENTITY(-653.241, float(mat4x2(-653.241, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 0.0))), _GLF_IDENTITY(655.784, clamp(655.784, 655.784, 655.784)), -992.799) - vec4(-52.51, -80.51, -73.23, -4565.9979));
#        }
#       _GLF_color = _GLF_IDENTITY(mix(vec4(-48.03, -6150.7996, -97.23, 37.73), (false ? mod(vec4(75.21, -4.4, 2979.4122, 474.591), vec4(7.7, 990.947, 61.55, -512.150)) : vec3(6561.5873, -363.893, -2419.8812).tppp), vec4(70.39, -0.0, -296.968, 1.1)), clamp(mix(vec4(-48.03, -6150.7996, -97.23, 37.73), (false ? mod(vec4(75.21, -4.4, 2979.4122, 474.591), vec4(7.7, 990.947, 61.55, -512.150)) : vec3(6561.5873, _GLF_IDENTITY(-363.893, (-363.893) / 1.0), -2419.8812).tppp), vec4(70.39, -0.0, -296.968, 1.1)), mix(vec4(-48.03, -6150.7996, -97.23, 37.73), (false ? mod(vec4(75.21, -4.4, 2979.4122, 474.591), vec4(7.7, 990.947, 61.55, -512.150)) : vec3(6561.5873, _GLF_IDENTITY(-363.893, (-363.893) / 1.0), -2419.8812).tppp), vec4(70.39, -0.0, -296.968, 1.1)), mix(vec4(-48.03, -6150.7996, -97.23, 37.73), (false ? mod(vec4(75.21, -4.4, 2979.4122, 474.591), vec4(7.7, 990.947, 61.55, -512.150)) : vec3(6561.5873, -363.893, -2419.8812).tppp), vec4(70.39, -0.0, -296.968, 1.1))));
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#        {
#         _GLF_color = exp2(vec4(8470.7891, 12.37, 5.3, -1968.0484));
#         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), ! (! (_GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))))
#          {
#           if(_GLF_DEAD(false))
#            return 1.0;
#           return 1.0;
#          }
#         if(_GLF_DEAD(false))
#          {
#           _GLF_color = vec4(-5.9, _GLF_IDENTITY(-952.601, (_GLF_IDENTITY(-952.601, max(-952.601, -952.601))) + log(1.0)), -6660.7723, 539.846);
#          }
#         if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#          return 1.0;
#        }
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.x, float(mat2(gl_FragCoord.x, 0.0, 1.0, 0.0))) < 0.0))))
#          {
#           _GLF_color = trunc(vec4(14.47, -8008.9315, -8.0, 335.354));
#          }
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#       {
#        _GLF_color = _GLF_IDENTITY(vec4(3.2, -88.54, -8.8, -7.6), (vec4(3.2, -88.54, -8.8, -7.6)) / sqrt(vec4(1.0, 1.0, 1.0, 1.0)));
#       }
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = exp(tanh(vec4(-129.755, -506.698, -7231.2092, -1.4)));
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#     }
#    else
#     {
#     }
#    {
#     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#      return 1.0;
#     if(_GLF_DEAD(false))
#      {
#       _GLF_color = vec4(-400.924, -9.2, 481.070, -5884.3123);
#      }
#     if(_GLF_DEAD(false))
#      return 1.0;
#     vec4 _GLF_outVarBackup_GLF_color;
#     if(_GLF_DEAD(false))
#      return _GLF_IDENTITY(1.0, (1.0) / 1.0);
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(77.69, 6.6, -86.05, -98.28);
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      _GLF_color = mix(vec4(40.41, -789.694, 799.222, -604.782), vec4(-5.2, -9901.4418, 3.8, -5.8), (_GLF_IDENTITY(true ? vec4(-5.6, 3.6, 4.2, 146.518) : max(_GLF_IDENTITY(vec4(-86.88, 414.289, _GLF_IDENTITY(784.621, clamp(_GLF_IDENTITY(784.621, (true ? 784.621 : _GLF_FUZZED(th))), 784.621, 784.621)), 559.984), max(vec4(-86.88, 414.289, 784.621, 559.984), vec4(-86.88, 414.289, 784.621, 559.984))), vec4(9.0, 4.8, _GLF_IDENTITY(-641.537, clamp(_GLF_IDENTITY(-641.537, (-641.537) / 1.0), -641.537, _GLF_IDENTITY(-641.537, mix(float(_GLF_FUZZED(-25.38)), float(-641.537), bool(true))))), -3.4)), vec4(0.0, 0.0, 0.0, 0.0) + (true ? vec4(-5.6, 3.6, 4.2, 146.518) : max(_GLF_IDENTITY(vec4(-86.88, 414.289, _GLF_IDENTITY(784.621, clamp(_GLF_IDENTITY(784.621, (true ? 784.621 : _GLF_FUZZED(th))), 784.621, 784.621)), 559.984), max(vec4(-86.88, 414.289, 784.621, 559.984), vec4(-86.88, 414.289, 784.621, 559.984))), vec4(9.0, 4.8, _GLF_IDENTITY(-641.537, clamp(_GLF_IDENTITY(-641.537, (-641.537) / 1.0), -641.537, _GLF_IDENTITY(-641.537, mix(float(_GLF_FUZZED(-25.38)), float(-641.537), bool(true))))), -3.4))))));
#      if(_GLF_WRAPPED_IF_TRUE(true))
#       {
#        _GLF_IDENTITY(_GLF_color = _GLF_outVarBackup_GLF_color, (_GLF_color = _GLF_outVarBackup_GLF_color) * vec4(1.0, 1.0, 1.0, 1.0));
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(-41.48, 25.38, 68.81, -35.53);
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#       }
#     }
#     _GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, (true ? _GLF_outVarBackup_GLF_color = _GLF_color : _GLF_FUZZED(uintBitsToFloat(uvec4(45959u, 146530u, 106378u, 140792u)))));
#     if(_GLF_DEAD(false))
#      return 1.0;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = vec4(-36.55, 2727.6290, -6.1, -5.0);
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_DEAD(false))
#      {
#       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#        return 1.0;
#       _GLF_color = vec4(-483.523, 608.380, -2.5, -3111.5458);
#       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord, exp(vec4(0.0, 0.0, 0.0, 0.0)) * (gl_FragCoord)).y < 0.0))))
#        return 1.0;
#      }
#     _GLF_color = vec4(-32.16, -4.7, -135.509, -9229.3356);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(458.841, 0.1, -35.61, -23.25);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = vec4(-2.2, -6.1, -7.1, -1.3);
#     if(_GLF_DEAD(false))
#      {
#       _GLF_color = _GLF_IDENTITY(vec4(_GLF_IDENTITY(-8731.7882, mix(float(_GLF_FUZZED((2.6 * 6135.0387))), float(-8731.7882), bool(true))), -9.2, -13.66, -0.5), mix(vec4((vec4(_GLF_IDENTITY(-8731.7882, mix(float(_GLF_FUZZED((2.6 * 6135.0387))), float(-8731.7882), bool(true))), -9.2, -13.66, -0.5))[0], (vec4(_GLF_IDENTITY(-8731.7882, mix(float(_GLF_FUZZED((2.6 * 6135.0387))), float(-8731.7882), bool(true))), -9.2, -13.66, -0.5))[1], _GLF_FUZZED(-4496.6460), (vec4(_GLF_IDENTITY(-8731.7882, mix(float(_GLF_FUZZED((2.6 * 6135.0387))), float(-8731.7882), bool(true))), -9.2, -13.66, -0.5))[3]), vec4(_GLF_FUZZED(vec2(45.66, -6.9).t), _GLF_FUZZED(-381.603), (vec4(_GLF_IDENTITY(-8731.7882, mix(float(_GLF_FUZZED((2.6 * 6135.0387))), float(-8731.7882), bool(true))), -9.2, -13.66, -0.5))[2], _GLF_FUZZED((-4.9))), bvec4(false, false, true, false)));
#       if(_GLF_DEAD(false))
#        return 1.0;
#      }
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    if(_GLF_DEAD(false))
#     return 1.0;
#   }
#  if(_GLF_DEAD(false))
#   {
#    if(_GLF_DEAD(false))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(-49.05, 235.435, 5.1, 6.5);
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      return 1.0;
#     }
#    if(_GLF_DEAD(false))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = radians(vec4(8.0, -6.1, 9.9, -720.520));
#       if(_GLF_DEAD(false))
#        return 1.0;
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2(_GLF_FUZZED(4202.1807), _GLF_FUZZED(-1.9)), bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((gl_FragCoord.x < _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(bvec2((gl_FragCoord.x < _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), false))))))).y))))
#        {
#         if(_GLF_DEAD(false))
#          {
#           {
#            vec4 _GLF_outVarBackup_GLF_color;
#            _GLF_outVarBackup_GLF_color = _GLF_color;
#            _GLF_color = vec4(-1.4, 1.9, 3180.3199, 3.9);
#            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#             {
#              _GLF_color = _GLF_outVarBackup_GLF_color;
#             }
#           }
#           return 1.0;
#          }
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      _GLF_color = vec4(7.4, -7616.7692, 25.04, 7.0);
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = floor(vec4(53.14, 5.7, -4.4, 8.8));
#       if(_GLF_DEAD(false))
#        return 1.0;
#       do
#        {
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((gl_FragCoord.y >= 0.0), ((_GLF_IDENTITY(gl_FragCoord.y >= 0.0, bool(_GLF_IDENTITY(bool(gl_FragCoord.y >= 0.0), ! (! (bool(gl_FragCoord.y >= 0.0)))))))) || false))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#      }
#      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = reflect(vec4(75.09, -6.3, -5268.4364, -19.16), vec4(-80.65, 4.1, -5710.4230, -6161.4421));
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        return 1.0;
#       }
#     }
#    return _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) / 1.0);
#    if(_GLF_DEAD(false))
#     return 1.0;
#   }
#  if(_GLF_IDENTITY(_GLF_IDENTITY(v, mix(vec2((v)[0], _GLF_FUZZED(-459.803)), vec2(_GLF_FUZZED(-2.2), (v)[1]), bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((gl_FragCoord.y >= length(vec3(0.0, 0.0, 0.0))), bool(bvec4(_GLF_IDENTITY((gl_FragCoord.y >= length(vec3(0.0, 0.0, 0.0))), ! (! ((gl_FragCoord.y >= length(vec3(0.0, 0.0, 0.0)))))), false, true, true))))))).y < 0.0, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(v.y < 0.0, bool(bvec3(v.y < 0.0, true, false))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(v.y, (false ? _GLF_FUZZED(-3.1) : v.y)) < 0.0, _GLF_IDENTITY(bool(bvec3(v.y < 0.0, true, false)), bool(bvec4(bool(bvec3(v.y < 0.0, true, false)), true, true, false)))), true)), true, true))), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(v.y, min(_GLF_IDENTITY(v.y, max(v.y, v.y)), v.y)) < 0.0, bool(_GLF_IDENTITY(bvec3(v.y < 0.0, true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(v.y < 0.0, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (v.y < 0.0)), true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(v.y < 0.0, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (v.y < 0.0)), true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(v.y < 0.0, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (v.y < 0.0)), true, _GLF_IDENTITY(false, (false) || false)), bvec3(bvec4(bvec3(_GLF_IDENTITY(v.y < 0.0, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (v.y < 0.0)), true, _GLF_IDENTITY(false, (false) || false)), false))), true))), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(v.y < 0.0, true, false), bvec3(bvec3(bvec3(v.y < 0.0, true, false)))), true))), false))))), true)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY(v.y < 0.0, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(v, (true ? v : _GLF_FUZZED(v))).y < 0.0, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(v.y < 0.0, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(v.y < 0.0, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(v.y < 0.0, false || (v.y < 0.0)), true, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(_GLF_IDENTITY(v.y < 0.0, false || (v.y < 0.0)), true, false)), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(bool(bvec3(_GLF_IDENTITY(v.y < 0.0, false || (v.y < 0.0)), true, false)), true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(bool(bvec3(_GLF_IDENTITY(v.y < 0.0, false || (v.y < 0.0)), true, false)), true), false, true)), false)))))))))))))))), true)), true, true)), false || (bool(bvec3(bool(bvec2(_GLF_IDENTITY(v.y < 0.0, bool(bvec3(v.y < _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(3.0)), float(0.0), bool(true))), true, false))), true)), true, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))))))) || _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), false))))))
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < tan(0.0)))))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       if(_GLF_DEAD(false))
#        return 1.0;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = clamp(vec4(-7.5, 2.4, -6.1, 638.644), 5.1, 548.798);
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(-60.07, 871.595, 2.0, 6.4);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       if(_GLF_DEAD(false))
#        {
#         _GLF_color = (vec4(64.69, -7.7, 5657.5262, -6.3) / vec4(7650.5383, -8.2, -351.927, 867.196));
#        }
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      if(_GLF_DEAD(false))
#       {
#        _GLF_color = ceil(vec4(_GLF_IDENTITY(-1.8, (-1.8) - 0.0), 9071.5798, -4.7, 3.2));
#       }
#      return 1.0;
#     }
#    th = - th;
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     return 1.0;
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     {
#      _GLF_color = (vec4(-6064.2027, -4603.7037, _GLF_IDENTITY(-5.5, clamp(-5.5, _GLF_IDENTITY(-5.5, (true ? -5.5 : _GLF_FUZZED(pi2))), -5.5)), -9.3) - vec4(-4.3, -663.688, -642.337, 9415.7896));
#     }
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = vec4(17.42, -0.3, 9.9, -153.411);
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
#      return 1.0;
#     _GLF_outVarBackup_GLF_color = _GLF_IDENTITY(_GLF_color, clamp(_GLF_color, _GLF_color, _GLF_color));
#     _GLF_color = vec4(-77.72, 775.395, 17.73, -8509.5945);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = exp(vec4(-0.3, -6344.7759, -75.86, -0.7));
#      if(_GLF_WRAPPED_IF_TRUE(true))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#    }
#   }
#  if(_GLF_DEAD(false))
#   {
#    if(_GLF_DEAD(false))
#     {
#      _GLF_color = sinh(vec4(-3.4, 1.2, -3014.2169, 74.19));
#     }
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     return 1.0;
#    if(_GLF_DEAD(false))
#     {
#      _GLF_color = vec4(1838.1835, 2829.0419, -2.5, 3.5);
#     }
#    return 1.0;
#   }
#  return _GLF_IDENTITY(th, (_GLF_IDENTITY(th, (th) / 1.0)) * 1.0);
# }
# vec2 polarize(vec2 coord)
# {
#  {
#   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (gl_FragCoord.y < abs(0.0)))))))
#    return vec2(1.0);
#   vec4 _GLF_outVarBackup_GLF_color;
#   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
#    return vec2(1.0);
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = vec4(65.14, 3.9, -692.375, 41.99);
#   if(_GLF_DEAD(false))
#    {
#     _GLF_color = intBitsToFloat(ivec4(38820, _GLF_IDENTITY(47598, (false ? _GLF_FUZZED((~ -23426)) : _GLF_IDENTITY(47598, int(ivec2(47598, 0))))), 38219, 26075));
#    }
#   if(_GLF_DEAD(false))
#    return vec2(1.0);
#   if(_GLF_DEAD(false))
#    {
#     _GLF_IDENTITY(_GLF_color = vec4(8.3, 614.321, -4206.3335, -2.8), (true ? _GLF_color = vec4(8.3, 614.321, -4206.3335, -2.8) : _GLF_FUZZED(_GLF_outVarBackup_GLF_color)));
#    }
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0), (vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0)) + vec2(0.0, 0.0)))), (injectionSwitch.x) - 0.0) < injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0))), 0.0, 0.0, 0.0), mat2(mat3x4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0))), 0.0, 0.0, 0.0), (mat2(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, log(1.0), 1.0, 1.0))), 1.0))), 0.0, 0.0, 0.0)) + mat2(0.0, 0.0, 0.0, 0.0))))))), (injectionSwitch.x) - 0.0) < injectionSwitch.y) || _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))))
#    {
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = mat2x4(vec4(1.7, -9.2, 76.18, -509.470), vec4(6.0, -3551.2145, -14.23, 94.68))[0];
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      _GLF_color = floor(vec4(-8745.2181, 337.393, -64.61, 6078.2598));
#      if(_GLF_DEAD(false))
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = (vec4(-38.64, -3725.1220, 52.03, -5.3) - 8.1);
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        return vec2(1.0);
#       }
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(-8418.8000, 778.418, -757.331, 9297.8606);
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#       }
#     }
#     if(_GLF_DEAD(false))
#      return vec2(1.0);
#     if(_GLF_DEAD(false))
#      return vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(4.8)), float(1.0), bool(true))));
#     _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0) * (_GLF_outVarBackup_GLF_color), (false ? _GLF_FUZZED(_GLF_color) : vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0) * (_GLF_outVarBackup_GLF_color))));
#     if(_GLF_DEAD(false))
#      return vec2(1.0);
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#      return vec2(1.0);
#     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
#      return vec2(1.0);
#    }
#   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
#    return vec2(1.0);
#  }
#  float pi = (_GLF_IDENTITY(355.0 / 113.0, (355.0 / 113.0) / 1.0));
#  if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
#     {
#      _GLF_color = vec3(-5.9, -9655.9781, 411.642).yyyx;
#     }
#    _GLF_IDENTITY(_GLF_color = floor(vec4(7126.1798, -8.9, 4850.3894, -3.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_color = floor(vec4(7126.1798, -8.9, 4850.3894, -3.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_color) : _GLF_color = floor(vec4(7126.1798, -8.9, 4850.3894, -3.0))))) / vec4(1.0, 1.0, 1.0, 1.0), ((_GLF_IDENTITY(_GLF_color = floor(vec4(7126.1798, -8.9, 4850.3894, -3.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_color) : _GLF_color = _GLF_IDENTITY(floor(vec4(7126.1798, -8.9, 4850.3894, -3.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? floor(vec4(7126.1798, -8.9, 4850.3894, -3.0)) : _GLF_FUZZED((++ _GLF_color))))))) / vec4(1.0, 1.0, 1.0, 1.0)) + sqrt(log(vec4(1.0, 1.0, 1.0, 1.0)))));
#   }
#  if(_GLF_DEAD(false))
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#     {
#      _GLF_color = _GLF_IDENTITY((-57.90 + vec4(460.674, 82.54, 4.3, -148.669)), ((-57.90 + vec4(460.674, 82.54, 4.3, -148.669))) * mat4(1.0));
#     }
#    _GLF_IDENTITY(_GLF_color = vec4(87.13, -92.07, 1.6, -64.20), (_GLF_IDENTITY(_GLF_color = vec4(87.13, -92.07, 1.6, -64.20), (_GLF_color = vec4(87.13, -92.07, _GLF_IDENTITY(1.6, float(vec4(1.6, 1.0, 1.0, 1.0))), -64.20)) / vec4(1.0, 1.0, 1.0, 1.0))) / vec4(1.0, 1.0, 1.0, 1.0));
#    if(_GLF_DEAD(false))
#     return vec2(1.0);
#   }
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = _GLF_IDENTITY(vec4(-275.220, 38.74, -117.126, -340.371), min(vec4(-275.220, 38.74, -117.126, -340.371), _GLF_IDENTITY(vec4(-275.220, 38.74, -117.126, -340.371), max(vec4(-275.220, 38.74, -117.126, -340.371), vec4(-275.220, 38.74, -117.126, -340.371)))));
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))))))
#    {
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = sinh(vec4(61.63, 20.99, 39.34, 545.736));
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#    }
#   if(_GLF_DEAD(false))
#    return vec2(1.0);
#  }
#  vec2 center = coord - vec2(0.5);
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   if(_GLF_DEAD(false))
#    return vec2(1.0);
#   {
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    _GLF_color = fwidth((-7286.0320 + vec4(-97.92, -70.27, _GLF_IDENTITY(5118.0304, clamp(_GLF_IDENTITY(5118.0304, (true ? 5118.0304 : _GLF_FUZZED(pi))), 5118.0304, _GLF_IDENTITY(5118.0304, (5118.0304) / 1.0))), 656.627)));
#    if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (gl_FragCoord.x >= 0.0)) && (_GLF_WRAPPED_IF_TRUE(true))))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#   _GLF_color = vec4(820.194, _GLF_IDENTITY(35.21, clamp(35.21, 35.21, 35.21)), -9135.3825, 365.708);
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (gl_FragCoord.x >= 0.0))))
#    {
#     if(_GLF_DEAD(false))
#      {
#       if(_GLF_DEAD(false))
#        return vec2(1.0);
#       return vec2(1.0);
#      }
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#       return vec2(1.0);
#      _GLF_IDENTITY(_GLF_color = vec4(3427.4271, -593.326, _GLF_IDENTITY(-137.361, float(mat4x3(_GLF_IDENTITY(-137.361, mix(float(-137.361), float(_GLF_FUZZED(90.28)), bool(false))), abs(1.0), 1.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(-229.398)), float(tan(0.0)), bool(true))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 738.739), (_GLF_IDENTITY(_GLF_color = vec4(3427.4271, -593.326, _GLF_IDENTITY(-137.361, float(mat4x3(_GLF_IDENTITY(-137.361, mix(float(-137.361), float(_GLF_FUZZED(90.28)), bool(false))), abs(1.0), 1.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(-229.398)), float(tan(0.0)), bool(true))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 738.739), (_GLF_color = vec4(3427.4271, -593.326, _GLF_IDENTITY(-137.361, float(mat4x3(_GLF_IDENTITY(-137.361, mix(float(-137.361), float(_GLF_FUZZED(90.28)), bool(false))), abs(1.0), 1.0, 1.0, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-229.398, float(mat4x3(-229.398, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), float(tan(0.0)), bool(true))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 738.739)) + vec4(0.0, 0.0, 0.0, 0.0))) - vec4(0.0, 0.0, 0.0, 0.0));
#      do
#       {
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = vec4(-7658.0630, -8.9, -695.761, _GLF_IDENTITY(917.519, mix(float(_GLF_FUZZED((9.8 + -50.26))), float(917.519), bool(true))));
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          {
#           vec4 _GLF_outVarBackup_GLF_color;
#           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
#            {
#             if(_GLF_DEAD(false))
#              return vec2(1.0);
#             _GLF_outVarBackup_GLF_color = _GLF_color;
#            }
#           _GLF_color = atan(vec2(84.20, 131.595), vec2(-10.15, 25.16)).ssts;
#           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord, vec4(gl_FragCoord[0], gl_FragCoord[1], gl_FragCoord[2], gl_FragCoord[3])).x >= 0.0))))
#            {
#             _GLF_color = _GLF_outVarBackup_GLF_color;
#            }
#          }
#          if(_GLF_DEAD(false))
#           {
#            _GLF_color = vec4(-5.5, -9.2, 9.1, -81.36);
#           }
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#      while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
#     }
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = vec4(-2036.1397, -4603.8574, -379.387, -646.508);
#      if(_GLF_WRAPPED_IF_TRUE(true))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#    }
#  }
#  _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_4(uvec4(1u), _GLF_struct_0(vec3(1.0), mat4x2(1.0), 1.0), _GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, _GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))), bvec2(bvec4(bvec2(true), true, _GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))), false), false))))), _GLF_struct_1(uvec2(1u), mat2x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), max(_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (_GLF_FALSE(false, (gl_FragCoord.y < 0.0)) ? _GLF_FUZZED(vec4(3452.1592, 6.0, 15.86, 6.8)) : vec4(1.0))), _GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(vec4(-74.93, -3.2, 87.23, 24.99)) : (vec4(1.0)) / vec4(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(585.650) : 1.0)), 1.0, 1.0)))))), _GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))), ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, int(ivec3(1, 0, 0))))), (1) * _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), 1)))), _GLF_struct_2(1.0, uvec2(1u), mat3(1.0), bvec2(true), uvec2(1u), bvec2(true)), _GLF_struct_3(mat3(1.0), mat4(1.0), uvec3(1u)), true), _GLF_struct_9(_GLF_struct_5(mat4x3(1.0), mat2x3(1.0), mat4(1.0), mat2x3(1.0), vec2(1.0), ivec3(1), bvec4(true)), mat4x2(1.0), _GLF_struct_6(uvec4(1u), ivec4(1)), vec4(1.0), _GLF_struct_7(bvec3(true), ivec3(1)), _GLF_struct_8(mat4(1.0), true, vec3(1.0)), mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(86.99)), max(float(_GLF_FUZZED(86.99)), float(_GLF_FUZZED(86.99)))), bool(false))))), _GLF_struct_12(_GLF_IDENTITY(ivec2(1), (ivec2(1)) - ivec2(0, 0)), mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_struct_10(mat4x2(1.0), uvec4(1u), mat4x2(1.0), mat4x2(1.0), mat2(1.0), vec4(1.0)), uvec4(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(134738u)))), length(center), vec4(1.0), _GLF_struct_11(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true), false)), true, false)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true), false)), false, true)))), true, true)), true, false)))), bvec2(bvec4(bvec2(true), false, false))), true, false)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true), false)), false, true)))), true, true)), true, false)))), bvec2(bvec4(bvec2(true), false, false))), true, false)), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true), false)), false, true)))), true, true)), true, false)))), bvec2(bvec4(bvec2(true), false, false))), true, false)), false)), true), bvec3(bvec3(bvec3(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), true, true)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec3(bvec2(true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true), false)), false, true)))), true, true)), true, false)))), bvec2(bvec4(bvec2(true), false, false))), true, false)), false)), true)))))))), _GLF_FALSE(false, (gl_FragCoord.x < 0.0))))), false))), 1, mat2x3(1.0), true), mat2(1.0)), mat2x4(1.0), _GLF_struct_15(_GLF_struct_13(mat3x2(1.0), 1, mat4x2(1.0)), _GLF_struct_14(uvec3(1u))), ivec3(1), ivec4(_GLF_IDENTITY(1, (1) | (1))));
#  float angle = ReallyApproxNormalizedAtan2(_GLF_IDENTITY(center, min(center, center)));
#  return vec2(_GLF_struct_replacement_16._f2.dist, angle);
# }
# void main()
# {
#  if(_GLF_DEAD(false))
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false)))))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = mat3x4(-4.6, -3.2, -54.44, -744.426, 8.7, 6.6, -1.6, -1.6, 302.971, 77.14, -702.848, 9.3)[1];
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      return;
#     }
#    if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
#     {
#      return;
#     }
#    else
#     {
#     }
#   }
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#   {
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_IDENTITY(_GLF_color = vec4(0.2, -29.14, 1692.8725, -6.9), (_GLF_color = vec4(0.2, -29.14, 1692.8725, -6.9)) / vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)));
#     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0)), (_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))) || false)))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(-0.5, -1.3, -806.277, 6.2);
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= log(1.0)))))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       if(_GLF_DEAD(false))
#        return;
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    if(_GLF_DEAD(false))
#     return;
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     if(_GLF_DEAD(false))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(-52.19, 9.8, 942.325, -38.71);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       return;
#      }
#     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#      {
#      }
#     else
#      {
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color = _GLF_color, vec4(0.0, 0.0, 0.0, 0.0) + (_GLF_outVarBackup_GLF_color = _GLF_color))) - vec4(0.0, 0.0, 0.0, 0.0));
#        if(_GLF_DEAD(false))
#         return;
#        _GLF_color = cos((vec4(-5.4, 0.8, -60.37, -9724.4495) * 4846.6172));
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (gl_FragCoord.y < 0.0)) || (_GLF_IDENTITY(true, bool(bvec2(true, false)))))))
#         {
#          _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, mix(vec4(_GLF_FUZZED(_GLF_IDENTITY(-8.1, max(-8.1, -8.1))), _GLF_FUZZED(float((ivec4(99229, 79154, 95413, -83317) == ivec4(81690, -40977, -18496, 82693)))), (_GLF_outVarBackup_GLF_color)[2], (_GLF_outVarBackup_GLF_color)[3]), vec4(_GLF_IDENTITY((_GLF_outVarBackup_GLF_color), (true ? (_GLF_outVarBackup_GLF_color) : _GLF_FUZZED((-7856.4418 / sign(vec4(-27.50, 8932.8113, -6306.4506, -0.6))))))[0], (_GLF_outVarBackup_GLF_color)[1], _GLF_FUZZED(float(-33618)), _GLF_FUZZED(float(122068u))), bvec4(true, _GLF_TRUE(true, (gl_FragCoord.x >= 0.0)), _GLF_IDENTITY(false, (false) && true), false)));
#          if(_GLF_DEAD(false))
#           return;
#          {
#           vec4 _GLF_outVarBackup_GLF_color;
#           _GLF_outVarBackup_GLF_color = _GLF_color;
#           _GLF_color = vec4(-8.2, -2.0, 645.986, 391.561);
#           if(_GLF_WRAPPED_IF_TRUE(true))
#            {
#             _GLF_color = _GLF_outVarBackup_GLF_color;
#            }
#          }
#         }
#       }
#       if(_GLF_DEAD(false))
#        {
#         _GLF_color = vec4(6.6, 9.3, -8990.9045, 51.04);
#        }
#      }
#     _GLF_color = vec4(0.4, -521.596, 7477.9853, 2755.8225);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), false, false), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord.y < 0.0, bool(bvec3(gl_FragCoord.y < _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, abs(0.0), 1.0, 0.0, 0.0), (mat4(0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 0.0, abs(0.0), 1.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), false, false))))), false, false))))))))
#        return;
#      }
#     if(_GLF_DEAD(false))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(243.428, 26.63, -9.2, -4.9);
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= log(1.0)))))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#       return;
#      }
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < sin(0.0)))))
#      return;
#     if(_GLF_DEAD(false))
#      {
#       _GLF_color = vec4(91.51, 3.5, -3.0, -200.087);
#      }
#     if(_GLF_DEAD(false))
#      return;
#     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
#      {
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#        return;
#       return;
#      }
#     if(_GLF_DEAD(false))
#      {
#       _GLF_color = vec4(-8557.0849, -63.00, -43.40, 1369.6869);
#      }
#    }
#    return;
#    if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
#     return;
#    if(_GLF_DEAD(false))
#     {
#      _GLF_color = vec4(-195.436, -3138.7381, _GLF_IDENTITY(738.194, max(_GLF_IDENTITY(738.194, (true ? 738.194 : _GLF_FUZZED(40.18))), 738.194)), -353.651);
#     }
#    if(_GLF_DEAD(false))
#     return;
#   }
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#   return;
#  if(_GLF_DEAD(false))
#   {
#    _GLF_color = vec4(_GLF_IDENTITY(7.0, mix(float(_GLF_IDENTITY(7.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(7.0, mix(float(_GLF_IDENTITY(7.0, _GLF_IDENTITY(max(7.0, _GLF_IDENTITY(7.0, (7.0) - 0.0)), float(mat3x2(max(7.0, _GLF_IDENTITY(7.0, (7.0) - 0.0)), 1.0, 0.0, abs(0.0), 1.0, 1.0))))), float(_GLF_FUZZED((87.74))), bool(false))), 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0), (mat3(7.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(mat2(float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(7.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5790.9533) : 1.0))), (mat3(7.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (true ? _GLF_IDENTITY(mat3(7.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5790.9533) : 1.0))), (mat3(7.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat3(425.796, 2.8, 914.176, 356.089, -965.871, 32.80, 8.9, -7.6, -6.6))))), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(float(_GLF_FUZZED(-382.176)), mix(float(float(_GLF_FUZZED(-382.176))), float(_GLF_FUZZED(-274.269)), bool(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))), bool(false))), 249.159, -9.9, _GLF_IDENTITY(11.55, float(mat4x3(11.55, 0.0, 0.0, 1.0, 0.0, length(0.0), 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0))));
#    if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < _GLF_ZERO(0.0, injectionSwitch.x)))))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = mix(vec4(-7.7, _GLF_IDENTITY(6850.0660, mix(float(6850.0660), float(_GLF_FUZZED(vec2(-1.1, 6.8).s)), bool(false))), 4.2, -9.5), vec4(-19.84, 602.845, -50.77, 8.2), bvec4(true, false, true, false));
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      return;
#     }
#    if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(gl_FragCoord, clamp(gl_FragCoord, gl_FragCoord, gl_FragCoord)).x < _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, log(exp(0.0)), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), sqrt(1.0), 0.0, cos(0.0)), (false ? _GLF_FUZZED(mat4(3.3, 66.02, 716.892, -2.3, -479.483, -24.45, -3.7, -8.1, 8966.2101, -818.290, -95.12, -6359.8191, -25.69, -7.2, 8.5, -4.4)) : mat4(0.0, log(exp(0.0)), 0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(0.0), sqrt(1.0), 0.0, cos(0.0))))))))))
#     {
#      _GLF_IDENTITY(_GLF_color = vec4(-767.200, -1.8, 3226.2443, 585.204), (_GLF_IDENTITY(_GLF_color = vec4(-767.200, -1.8, 3226.2443, 585.204), (_GLF_color = _GLF_IDENTITY(vec4(-767.200, -1.8, 3226.2443, 585.204), mix(vec4(_GLF_FUZZED(float(true)), _GLF_FUZZED(65.36), _GLF_FUZZED(-9656.7666), _GLF_FUZZED(-40.51)), vec4((vec4(-767.200, -1.8, 3226.2443, 585.204))[0], _GLF_IDENTITY((vec4(-767.200, -1.8, 3226.2443, 585.204))[1], max((vec4(-767.200, -1.8, 3226.2443, 585.204))[1], (vec4(-767.200, -1.8, 3226.2443, 585.204))[1])), (vec4(-767.200, -1.8, 3226.2443, 585.204))[2], (vec4(-767.200, -1.8, 3226.2443, 585.204))[3]), bvec4(true, true, true, true)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) - abs(vec4(0.0, 0.0, 0.0, 0.0)));
#     }
#   }
#  if(_GLF_DEAD(false))
#   return;
#  vec2 coord = gl_FragCoord.xy * (1.0 / 256.0);
#  if(_GLF_DEAD(false))
#   {
#    _GLF_color = tan(vec4(857.283, -7770.8525, 9.4, -92.44));
#   }
#  vec2 coord1 = polarize(coord + vec2(20.0 / 256.0, _GLF_IDENTITY(- 80.0, min(- 80.0, _GLF_IDENTITY(- 80.0, 0.0 + (_GLF_IDENTITY(- 80.0, clamp(- 80.0, - 80.0, - 80.0)))))) / 256.0));
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#   return;
#  vec2 coord2 = polarize(coord + vec2(- 60.0 / 256.0, 40.0 / _GLF_IDENTITY(256.0, (256.0) - 0.0)));
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#   return;
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = vec4(5318.7078, -34.37, 2743.4420, 28.66);
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#    {
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#    }
#  }
#  vec2 coord3 = polarize(coord);
#  {
#   {
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    _GLF_color = mod(min(vec4(1.5, 0.9, 0.6, -57.80), vec4(-807.178, 9305.4926, 90.28, -5.7)), vec4(-28.73, 9.1, -7417.7589, -80.99));
#    if(_GLF_WRAPPED_IF_TRUE(true))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = (+ mat4(_GLF_IDENTITY(_GLF_IDENTITY(0.3, (0.3) - 0.0), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.3, (0.3) - 0.0), abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-79.94) : float(mat4(_GLF_IDENTITY(0.3, (0.3) - 0.0), abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), 883.418, _GLF_IDENTITY(441.506, 1.0 * (441.506)), -46.04, 53.17, _GLF_IDENTITY(-5663.7476, min(-5663.7476, -5663.7476)), -8.4, 8.6, 7887.8643, 8.9, 9106.9414, 7034.7506, -7.8, 901.994, 4.9, 80.57)[1]);
#   if(_GLF_WRAPPED_IF_TRUE(true))
#    {
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#    }
#  }
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_IDENTITY(_GLF_color, _GLF_IDENTITY((_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(mat3x4((_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), log(1.0), 0.0, 1.0)), clamp(vec4(mat3x4((_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), log(1.0), 0.0, 1.0)), vec4(mat3x4((_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), log(1.0), 0.0, 1.0)), vec4(mat3x4((_GLF_color) / vec4(1.0, 1.0, 1.0, 1.0), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), log(1.0), 0.0, 1.0))))));
#   if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#    {
#     _GLF_color = vec4(539.247, 84.73, -885.518, 213.753);
#    }
#   _GLF_color = vec4(7333.7660, 764.200, -102.673, -871.788);
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
#    {
#     do
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))));
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = mod(mod(vec4(_GLF_IDENTITY(-1207.3969, mix(float(-1207.3969), float(_GLF_FUZZED((-3241.5697 * (64.23 - -137.885)))), bool(false))), 9807.8063, 0.5, -7.6), -3.8), asinh(vec4(3.0, -5187.3961, -900.454, 201.020)));
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#    }
#  }
#  if(_GLF_DEAD(false))
#   return;
#  {
#   if(_GLF_DEAD(false))
#    {
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#        {
#         if(_GLF_DEAD(false))
#          return;
#         _GLF_color = (- vec4(-1920.2878, 0.7, -705.063, 299.059));
#        }
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = (vec4(16.52, -698.816, -8.6, 3.7) - 67.72);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#         }
#       }
#      }
#     else
#      {
#      }
#     _GLF_color = _GLF_IDENTITY(vec4(0.1, 5775.4551, 22.58, 73.61), clamp(vec4(0.1, 5775.4551, 22.58, 73.61), vec4(0.1, 5775.4551, 22.58, 73.61), vec4(0.1, 5775.4551, 22.58, 73.61)));
#    }
#   vec4 _GLF_outVarBackup_GLF_color;
#   if(_GLF_WRAPPED_IF_FALSE(false))
#    {
#    }
#   else
#    {
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#    }
#   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), false, true, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), false, true, false))), true))))))), ! (! ((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), false, true, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(306.954)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), bool(true))))))))), false, true, false))), true))))))))))))
#    return;
#   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec3(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && true)), false, false)))))
#    return;
#   _GLF_color = tanh(vec4(-1510.1379, -4.7, -284.882, -54.68));
#   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#    {
#     _GLF_color = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat3x4(_GLF_outVarBackup_GLF_color, 0.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 0.0))), (_GLF_FALSE(false, (gl_FragCoord.x < 0.0)) ? _GLF_FUZZED(_GLF_outVarBackup_GLF_color) : _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat3x4(_GLF_outVarBackup_GLF_color, 0.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 0.0))))), _GLF_outVarBackup_GLF_color)), (_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, min(_GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat3x4(_GLF_outVarBackup_GLF_color, 0.0, 0.0, sqrt(0.0), 1.0, 1.0, 1.0, 0.0, 0.0))), _GLF_outVarBackup_GLF_color))) - vec4(0.0, 0.0, 0.0, 0.0));
#     if(_GLF_DEAD(false))
#      return;
#    }
#  }
#  if(_GLF_DEAD(false))
#   return;
#  if(_GLF_DEAD(false))
#   return;
#  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord, min(_GLF_IDENTITY(gl_FragCoord, (gl_FragCoord) / sqrt(vec4(1.0, 1.0, 1.0, 1.0))), gl_FragCoord)).y < 0.0, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_FragCoord, min(_GLF_IDENTITY(gl_FragCoord, (gl_FragCoord) / sqrt(vec4(1.0, 1.0, 1.0, 1.0))), gl_FragCoord)).y < 0.0, (_GLF_IDENTITY(gl_FragCoord, min(_GLF_IDENTITY(gl_FragCoord, (gl_FragCoord) / sqrt(vec4(1.0, 1.0, 1.0, 1.0))), gl_FragCoord)).y < 0.0) || false), true, false)))))))
#   {
#    _GLF_color = _GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), _GLF_IDENTITY((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0), mix(vec4(((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0))[0], (_GLF_IDENTITY((_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))), _GLF_IDENTITY(vec4(mat4x2((_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))), 1.0, sqrt(0.0), 0.0, 0.0)), vec4(mat3x2(vec4(mat4x2((_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))), 1.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0)))), (_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))), (_GLF_IDENTITY(vec4(-4.6, 0.6, -609.074, 6.0), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(-4.6, 0.6, -609.074, 6.0)))))) * mat4(1.0))[1], _GLF_IDENTITY(((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0))[2], max(((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0))[2], ((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0))[2])), _GLF_FUZZED(-991.256)), vec4(_GLF_FUZZED(-1.7), _GLF_FUZZED(389.953), _GLF_FUZZED(-548.413), ((vec4(-4.6, 0.6, -609.074, 6.0)) * mat4(1.0))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))));
#   }
#  coord = coord1 - coord2 + coord3;
#  if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < abs(0.0)))))
#   return;
#  coord = floor(_GLF_IDENTITY(coord * 256.0, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(vec2(1.0, 1.0))).y)) * (coord * 256.0))) / _GLF_IDENTITY(256.0, (256.0) - 0.0);
#  if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
#   return;
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   if(_GLF_DEAD(false))
#    return;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_color = floor(atanh(vec4(-8503.2006, -93.62, 441.272, _GLF_IDENTITY(6.9, max(6.9, 6.9)))));
#   if(_GLF_WRAPPED_IF_TRUE(true))
#    {
#     if(_GLF_DEAD(false))
#      return;
#     _GLF_color = _GLF_outVarBackup_GLF_color;
#     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
#      return;
#    }
#   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
#    return;
#   if(_GLF_DEAD(false))
#    {
#     _GLF_color = radians(vec4(3360.5998, -3759.3277, 214.070, -9.8));
#    }
#   {
#    vec4 _GLF_outVarBackup_GLF_color;
#    _GLF_outVarBackup_GLF_color = _GLF_color;
#    _GLF_color = (9.1 * vec4(-2.1, -545.146, 5.1, 4582.5004));
#    if(_GLF_WRAPPED_IF_TRUE(true))
#     {
#      _GLF_color = _GLF_outVarBackup_GLF_color;
#     }
#   }
#  }
#  _GLF_color = vec4(_GLF_IDENTITY(texture(tex, coord).xyz, _GLF_IDENTITY(vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(-8.1), (vec3(texture(tex, coord).xyz))[2]), vec3(_GLF_FUZZED(-430.309), (vec3(texture(tex, coord).xyz))[1], _GLF_FUZZED(8.6)), bvec3(false, true, false)))), min(_GLF_IDENTITY(vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(-8.1), _GLF_IDENTITY((vec3(texture(tex, coord).xyz)), max((vec3(texture(tex, coord).xyz)), (vec3(texture(tex, coord).xyz))))[2]), vec3(_GLF_FUZZED(-430.309), (vec3(texture(tex, coord).xyz))[1], _GLF_FUZZED(8.6)), bvec3(false, true, false)))), clamp(vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(-8.1), (vec3(texture(tex, coord).xyz))[2]), vec3(_GLF_FUZZED(-430.309), (vec3(texture(tex, coord).xyz))[1], _GLF_FUZZED(8.6)), bvec3(false, true, false)))), vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(-8.1), (vec3(texture(tex, coord).xyz))[2]), vec3(_GLF_FUZZED(-430.309), (vec3(texture(tex, coord).xyz))[1], _GLF_FUZZED(8.6)), bvec3(false, true, false)))), vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(_GLF_IDENTITY(-8.1, max(-8.1, -8.1))), (vec3(texture(tex, coord).xyz))[2]), _GLF_IDENTITY(vec3(_GLF_FUZZED(-430.309), (_GLF_IDENTITY(vec3(texture(tex, coord).xyz), max(vec3(texture(tex, coord).xyz), vec3(texture(tex, coord).xyz))))[1], _GLF_FUZZED(8.6)), _GLF_IDENTITY(vec3(mat2x3(vec3(_GLF_FUZZED(-430.309), (_GLF_IDENTITY(vec3(texture(tex, coord).xyz), max(vec3(texture(tex, coord).xyz), vec3(texture(tex, coord).xyz))))[1], _GLF_FUZZED(8.6)), 1.0, 0.0, 0.0)), clamp(vec3(mat2x3(vec3(_GLF_FUZZED(-430.309), (_GLF_IDENTITY(vec3(texture(tex, coord).xyz), max(vec3(texture(tex, coord).xyz), vec3(texture(tex, coord).xyz))))[1], _GLF_FUZZED(8.6)), 1.0, 0.0, 0.0)), vec3(mat2x3(vec3(_GLF_FUZZED(-430.309), (_GLF_IDENTITY(vec3(texture(tex, coord).xyz), max(vec3(texture(tex, coord).xyz), vec3(texture(tex, coord).xyz))))[1], _GLF_FUZZED(8.6)), 1.0, 0.0, 0.0)), vec3(mat2x3(vec3(_GLF_FUZZED(-430.309), (_GLF_IDENTITY(vec3(texture(tex, coord).xyz), max(vec3(texture(tex, coord).xyz), vec3(texture(tex, coord).xyz))))[1], _GLF_FUZZED(8.6)), 1.0, 0.0, 0.0))))), bvec3(false, _GLF_IDENTITY(true, (true) || false), false)))))), vec3(_GLF_IDENTITY(vec3(texture(tex, coord).xyz), mix(vec3((vec3(texture(tex, coord).xyz))[0], _GLF_FUZZED(-8.1), _GLF_IDENTITY((vec3(texture(tex, coord).xyz))[2], min((vec3(texture(tex, coord).xyz))[2], (vec3(texture(tex, coord).xyz))[2]))), vec3(_GLF_IDENTITY(_GLF_FUZZED(-430.309), (_GLF_FUZZED(-430.309)) * 1.0), (vec3(texture(tex, coord).xyz))[1], _GLF_FUZZED(8.6)), bvec3(false, true, false))))))), 1.0);
#  if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (gl_FragCoord.y < 0.0)), ! (! (_GLF_FALSE(false, (gl_FragCoord.y < 0.0)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))))
#   {
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     _GLF_color = vec4(-3145.3513, 73.58, -71.50, -1055.3324);
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_outVarBackup_GLF_color;
#      }
#    }
#    return;
#   }
#  if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(gl_FragCoord.y < 0.0, ! (! (gl_FragCoord.y < 0.0)))), ((_GLF_IDENTITY(gl_FragCoord.y < 0.0, ! (! (gl_FragCoord.y < 0.0))))) && true))))
#   {
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     return;
#    if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < log(1.0)))))
#     {
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(5.9, 578.723, -8.1, 78.88);
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      _GLF_color = mix(vec4(-273.931, 5.1, 8.9, 689.550), vec4(1.3, 7242.7249, 6.8, 644.221), -9.0);
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = mix(vec4(0.9, -3.7, 7445.8806, 1.3), vec4(-2315.2032, 47.29, -3.3, 699.030), bvec4(false, true, true, false));
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#     }
#    {
#     vec4 _GLF_outVarBackup_GLF_color;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = degrees((false ? vec4(0.0, -610.958, -3.0, -598.698) : vec4(-845.274, 3.2, -8.8, -7.2)));
#      if(_GLF_WRAPPED_IF_TRUE(true))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     if(_GLF_DEAD(false))
#      return;
#     _GLF_outVarBackup_GLF_color = _GLF_color;
#     if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#      return;
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = smoothstep(-7.1, -9.0, vec4(1.9, 3.1, -63.89, 3.4));
#      if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#       }
#     }
#     _GLF_color = _GLF_IDENTITY(vec4(-5.2, 6.3, -8.2, 8930.8146), clamp(_GLF_IDENTITY(vec4(-5.2, 6.3, -8.2, 8930.8146), clamp(vec4(-5.2, 6.3, -8.2, 8930.8146), vec4(-5.2, 6.3, -8.2, 8930.8146), vec4(-5.2, 6.3, -8.2, 8930.8146))), vec4(-5.2, 6.3, -8.2, 8930.8146), vec4(-5.2, 6.3, -8.2, 8930.8146)));
#     {
#      vec4 _GLF_outVarBackup_GLF_color;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(33.43);
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      _GLF_outVarBackup_GLF_color = _GLF_color;
#      _GLF_color = vec4(3.5, 69.15, 4668.5782, _GLF_IDENTITY(-5.8, clamp(_GLF_IDENTITY(-5.8, min(-5.8, -5.8)), _GLF_IDENTITY(-5.8, 1.0 * (-5.8)), _GLF_IDENTITY(-5.8, mix(float(-5.8), float(_GLF_FUZZED(-66.00)), bool(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))))));
#      if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false)))))))
#       {
#        _GLF_color = _GLF_outVarBackup_GLF_color;
#        {
#         if(_GLF_DEAD(false))
#          return;
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_color;
#         _GLF_color = (+ vec4(759.346, -5.4, 99.53, -819.093));
#         if(_GLF_WRAPPED_IF_TRUE(true))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#           {
#            vec4 _GLF_outVarBackup_GLF_color;
#            _GLF_outVarBackup_GLF_color = _GLF_color;
#            _GLF_color = vec4(-544.048, -11.56, 886.250, 66.49);
#            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(gl_FragCoord.x >= 0.0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(gl_FragCoord.x >= 0.0, false, false), bvec3(bvec3(bvec3(gl_FragCoord.x >= 0.0, false, false))))), false || (bool(_GLF_IDENTITY(bvec3(gl_FragCoord.x >= 0.0, false, false), bvec3(bvec3(bvec3(gl_FragCoord.x >= 0.0, false, false))))))))))))
#             {
#              _GLF_color = _GLF_outVarBackup_GLF_color;
#             }
#           }
#           if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < _GLF_IDENTITY(sin(0.0), min(sin(0.0), sin(0.0)))))))
#            {
#             {
#              vec4 _GLF_outVarBackup_GLF_color;
#              _GLF_outVarBackup_GLF_color = _GLF_color;
#              _GLF_color = vec4(915.258, -26.26, 40.15, -50.20);
#              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.y >= 0.0))))
#               {
#                _GLF_color = _GLF_outVarBackup_GLF_color;
#               }
#             }
#             return;
#            }
#          }
#        }
#       }
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(5.5, 49.18, 1656.1487, 552.859);
#       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#       return;
#      if(_GLF_DEAD(false))
#       {
#        _GLF_color = vec4(-92.89, -2.6, 4.1, -6596.7004);
#        {
#         vec4 _GLF_outVarBackup_GLF_color;
#         _GLF_outVarBackup_GLF_color = _GLF_IDENTITY(_GLF_color, min(_GLF_color, _GLF_color));
#         _GLF_color = vec4(-7648.8160, 72.85, -1.7, -993.836);
#         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (gl_FragCoord.x >= 0.0))))
#          {
#           _GLF_color = _GLF_outVarBackup_GLF_color;
#          }
#        }
#       }
#      if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < sqrt(0.0)))))
#       return;
#      {
#       vec4 _GLF_outVarBackup_GLF_color;
#       if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#        return;
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        _GLF_color = vec4(3890.6890, 7.7, 298.662, 5.5);
#        if(_GLF_WRAPPED_IF_TRUE(true))
#         {
#          _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, max(_GLF_outVarBackup_GLF_color, _GLF_outVarBackup_GLF_color));
#         }
#       }
#       _GLF_outVarBackup_GLF_color = _GLF_color;
#       _GLF_color = vec4(-9941.6400, -9.2, 7.1, 3.0);
#       if(_GLF_WRAPPED_IF_TRUE(true))
#        {
#         _GLF_color = _GLF_outVarBackup_GLF_color;
#        }
#      }
#     }
#     if(_GLF_DEAD(false))
#      return;
#     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, false || (true))) && true)))
#      {
#       {
#        vec4 _GLF_outVarBackup_GLF_color;
#        _GLF_outVarBackup_GLF_color = _GLF_color;
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#         return;
#        _GLF_color = mix(vec4(435.684, _GLF_IDENTITY(-745.050, (false ? _GLF_FUZZED(0.7) : -745.050)), 160.990, 3505.6433), vec4(-2.2, -5.5, 3873.0062, 241.245), 82.47);
#        if(_GLF_DEAD(false))
#         {
#          if(_GLF_DEAD(false))
#           return;
#          return;
#         }
#        if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < 0.0))))
#         return;
#        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
#         {
#          _GLF_color = _GLF_outVarBackup_GLF_color;
#          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#           {
#            _GLF_IDENTITY(_GLF_color = (log2(-9.0) - vec4(vec3(_GLF_IDENTITY(123.646, _GLF_IDENTITY(float(mat3(123.646, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), (false ? _GLF_FUZZED(coord[0]) : float(mat3(123.646, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), 2.2, -4.6), 7.4)), (true ? _GLF_color = (log2(-9.0) - vec4(vec3(_GLF_IDENTITY(123.646, _GLF_IDENTITY(float(mat3(123.646, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-4858.2712) : 1.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0))), float(_GLF_FUZZED(-767.799)), bool(false))), 0.0)), (false ? _GLF_FUZZED(coord[0]) : float(mat3(123.646, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), 2.2, -4.6), 7.4)) : _GLF_FUZZED(_GLF_outVarBackup_GLF_color)));
#           }
#          if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.y < 0.0))))
#           return;
#         }
#       }
#       _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, (false ? _GLF_FUZZED((_GLF_color ++)) : _GLF_outVarBackup_GLF_color));
#       if(_GLF_DEAD(false))
#        return;
#       if(_GLF_DEAD(false))
#        return;
#      }
#    }
#    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#     return;
#    _GLF_color = ldexp(vec4(272.068, 0.7, -643.553, 42.91), ivec4(64510, 64925, 58020, -3602));
#    if(_GLF_DEAD(false))
#     return;
#    if(_GLF_DEAD(_GLF_FALSE(false, (gl_FragCoord.x < log(1.0)))))
#     return;
#   }
#  {
#   vec4 _GLF_outVarBackup_GLF_color;
#   _GLF_outVarBackup_GLF_color = _GLF_color;
#   _GLF_IDENTITY(_GLF_color = (+ mat3x4(-86.74, 7.8, 5.5, 177.824, 5.4, 5882.8364, 7617.2890, 3.8, -89.46, 4634.1110, 0.1, -578.370)[0]), _GLF_IDENTITY((_GLF_color = (+ mat3x4(-86.74, 7.8, 5.5, 177.824, 5.4, 5882.8364, 7617.2890, 3.8, -89.46, 4634.1110, _GLF_IDENTITY(0.1, max(_GLF_IDENTITY(0.1, mix(float(_GLF_IDENTITY(0.1, max(_GLF_IDENTITY(0.1, clamp(0.1, 0.1, 0.1)), 0.1))), float(_GLF_FUZZED(91.49)), bool(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(0.1, (0.1) - 0.0))), _GLF_IDENTITY(-578.370, _GLF_IDENTITY(float(mat3(-578.370, tan(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-0.3)))), transpose(transpose(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) - mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-646.748)), float(float(mat3(-578.370, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(368.517))))), 1.0, _GLF_IDENTITY(exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), (true ? _GLF_IDENTITY(exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), mix(float(_GLF_FUZZED(774.643)), float(exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true))))), bool(true))) : _GLF_FUZZED((+ -1917.0981)))), 1.0, 1.0, 1.0))), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))[0])), (true ? _GLF_IDENTITY((_GLF_color = (+ mat3x4(-86.74, 7.8, 5.5, 177.824, 5.4, 5882.8364, 7617.2890, 3.8, -89.46, 4634.1110, _GLF_IDENTITY(_GLF_IDENTITY(0.1, max(_GLF_IDENTITY(0.1, mix(float(0.1), float(_GLF_FUZZED(91.49)), bool(false))), _GLF_IDENTITY(0.1, (0.1) - 0.0))), mix(float(_GLF_FUZZED(-7.0)), float(_GLF_IDENTITY(0.1, max(_GLF_IDENTITY(0.1, mix(float(0.1), float(_GLF_FUZZED(91.49)), bool(false))), _GLF_IDENTITY(0.1, (0.1) - 0.0)))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(-578.370, max(-578.370, -578.370)), _GLF_IDENTITY(float(mat3(-578.370, tan(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0))))), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, determinant(mat4(1.0, 0.0, abs(0.0), 0.0, abs(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), abs(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0)), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))))), 0.0, 0.0))))) - mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-646.748)), float(float(mat3(-578.370, tan(0.0), 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), 1.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))[0])), ((_GLF_color = (+ mat3x4(-86.74, 7.8, 5.5, 177.824, 5.4, 5882.8364, 7617.2890, 3.8, -89.46, 4634.1110, _GLF_IDENTITY(0.1, max(_GLF_IDENTITY(0.1, mix(float(0.1), float(_GLF_FUZZED(91.49)), bool(false))), _GLF_IDENTITY(0.1, (0.1) - 0.0))), _GLF_IDENTITY(-578.370, _GLF_IDENTITY(float(mat3(-578.370, tan(0.0), 1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-56.41)), bool(false))), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / cos(0.0)), 0.0, 0.0), (_GLF_IDENTITY(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))) - mat4x2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), exp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)), min(mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)), mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))))), 1.0, 1.0, 1.0)), mix(float(_GLF_FUZZED(-646.748)), float(float(mat3(-578.370, _GLF_IDENTITY(tan(0.0), mix(float(_GLF_IDENTITY(tan(0.0), float(float(tan(0.0))))), float(_GLF_FUZZED(-5.2)), bool(false))), 1.0, 1.0, 1.0, exp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(94.55)), float(0.0), bool(true)))), 1.0, 1.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))[0]))) * vec4(1.0, 1.0, 1.0, 1.0)) : _GLF_FUZZED(vec4(149.216, 289.689, 5.8, -0.7)))) * cos(vec4(0.0, 0.0, 0.0, 0.0)));
#   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
#    {
#     if(_GLF_WRAPPED_IF_TRUE(true))
#      {
#       _GLF_color = _GLF_IDENTITY(_GLF_outVarBackup_GLF_color, vec4(mat3x2(_GLF_outVarBackup_GLF_color, 0.0, 1.0)));
#       do
#        {
#         if(_GLF_DEAD(false))
#          {
#           do
#            {
#             _GLF_IDENTITY(_GLF_color = vec4(-4.3, 6.5, -9.7, -9.6), (_GLF_color = vec4(-4.3, 6.5, -9.7, -9.6)) - vec4(0.0, 0.0, 0.0, 0.0));
#            }
#           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (gl_FragCoord.y < _GLF_IDENTITY(0.0, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(mix(2.4, _GLF_IDENTITY(-338.063, clamp(-338.063, -338.063, -338.063)), true))))))));
#           if(_GLF_DEAD(false))
#            break;
#          }
#         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
#          discard;
#        }
#       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))));
#      }
#    }
#  }
# }
SHADER fragment variant_fragment_shader SPIRV-ASM TARGET_ENV spv1.0
; SPIR-V
; Version: 1.0
; Generator: Khronos Glslang Reference Front End; 10
; Bound: 10028
; Schema: 0
               OpCapability Shader
          %1 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %4 "main" %21 %28
               OpExecutionMode %4 OriginUpperLeft
               OpSource ESSL 320
               OpName %4 "main"
               OpName %21 "_GLF_color"
               OpName %28 "gl_FragCoord"
               OpName %103 "buf_push"
               OpMemberName %103 0 "injectionSwitch"
               OpName %105 ""
               OpName %3595 "tex"
               OpDecorate %21 Location 0
               OpDecorate %28 BuiltIn FragCoord
               OpMemberDecorate %103 0 Offset 0
               OpDecorate %103 Block
               OpDecorate %3595 RelaxedPrecision
               OpDecorate %3595 DescriptorSet 0
               OpDecorate %3595 Binding 0
               OpDecorate %3596 RelaxedPrecision
               OpDecorate %3598 RelaxedPrecision
               OpDecorate %4286 RelaxedPrecision
               OpDecorate %4464 RelaxedPrecision
               OpDecorate %5227 RelaxedPrecision
               OpDecorate %5869 RelaxedPrecision
               OpDecorate %6632 RelaxedPrecision
               OpDecorate %7274 RelaxedPrecision
               OpDecorate %8037 RelaxedPrecision
               OpDecorate %8610 RelaxedPrecision
               OpDecorate %8633 RelaxedPrecision
               OpDecorate %8847 RelaxedPrecision
               OpDecorate %8928 RelaxedPrecision
               OpDecorate %9320 RelaxedPrecision
               OpDecorate %9461 RelaxedPrecision
               OpDecorate %9973 RelaxedPrecision
          %2 = OpTypeVoid
          %3 = OpTypeFunction %2
          %6 = OpTypeFloat 32
          %7 = OpTypeVector %6 2
         %17 = OpTypeVector %6 4
         %20 = OpTypePointer Output %17
         %21 = OpVariable %20 Output
         %23 = OpConstant %6 0x1.8p+128
         %24 = OpConstant %6 6.86381674
         %25 = OpConstant %6 1.41098702
         %26 = OpConstantComposite %17 %23 %24 %23 %25
         %27 = OpTypePointer Input %17
         %28 = OpVariable %27 Input
         %29 = OpTypeInt 32 0
         %30 = OpConstant %29 0
         %31 = OpTypePointer Input %6
         %34 = OpConstant %6 0
         %35 = OpTypeBool
         %40 = OpConstantFalse %35
         %43 = OpConstant %6 1
         %45 = OpConstant %29 1
         %51 = OpConstant %6 -59.1500015
         %52 = OpConstant %6 -603.590027
         %53 = OpConstantComposite %17 %51 %52 %51 %52
         %61 = OpConstant %6 -2.5
         %62 = OpConstant %6 -7823.22461
         %63 = OpConstantComposite %17 %61 %62 %34 %34
         %64 = OpConstant %6 469.208008
         %65 = OpConstant %6 0.5
         %66 = OpConstant %6 9.89999962
         %67 = OpConstant %6 6.5
         %68 = OpConstantComposite %17 %64 %65 %66 %67
         %69 = OpConstantTrue %35
         %79 = OpTypeVector %6 3
         %86 = OpTypeMatrix %17 4
        %103 = OpTypeStruct %7
        %104 = OpTypePointer PushConstant %103
        %105 = OpVariable %104 PushConstant
        %106 = OpTypeInt 32 1
        %107 = OpConstant %106 0
        %108 = OpTypePointer PushConstant %6
        %172 = OpConstantComposite %17 %34 %34 %34 %34
        %254 = OpTypeVector %35 4
        %276 = OpConstant %6 5.0999999
        %283 = OpConstant %6 -1
        %284 = OpConstantComposite %17 %283 %43 %43 %283
        %301 = OpConstant %6 0.899999976
        %320 = OpConstant %6 0.00100000005
        %357 = OpConstant %6 -32.1899986
        %358 = OpConstant %6 -477.050995
        %359 = OpConstant %6 -379.166992
        %360 = OpConstantComposite %17 %357 %61 %358 %359
        %375 = OpConstant %6 5.19999981
        %376 = OpConstant %6 -7457.53418
        %377 = OpConstant %6 -54.2900009
        %378 = OpConstant %6 -705.724976
        %379 = OpConstantComposite %17 %375 %376 %377 %378
        %388 = OpConstant %6 0.200000003
        %389 = OpConstant %6 0.388000011
        %390 = OpConstant %6 0.600000024
        %391 = OpConstantComposite %17 %388 %389 %390 %34
        %450 = OpConstant %6 34.1399994
        %451 = OpConstant %6 3.9000001
        %452 = OpConstant %6 130.561996
        %453 = OpConstantComposite %17 %450 %451 %283 %452
        %467 = OpConstant %6 -2
        %468 = OpConstant %6 -9.19999981
        %532 = OpConstantComposite %17 %43 %43 %34 %34
        %575 = OpConstant %6 8.60000038
        %577 = OpConstant %6 -98.2799988
        %615 = OpConstant %6 6.4000001
        %628 = OpConstant %6 -7.5999999
        %668 = OpConstant %6 190.291
        %669 = OpConstant %6 -1.5
        %670 = OpConstant %6 7.30000019
        %671 = OpConstant %6 311.903015
        %672 = OpConstantComposite %17 %668 %669 %670 %671
        %725 = OpConstant %106 1
        %754 = OpConstant %6 -8.30000019
        %768 = OpTypePointer PushConstant %7
        %813 = OpConstant %6 6.9000001
        %886 = OpConstant %6 7864500
        %887 = OpConstant %6 -551.61438
        %888 = OpConstant %6 374545.812
        %889 = OpConstant %6 -756493.5
        %890 = OpConstantComposite %17 %886 %887 %888 %889
        %926 = OpTypeMatrix %7 2
        %934 = OpConstant %6 2633
        %935 = OpConstant %6 -5013
        %936 = OpConstant %6 -8021
        %937 = OpConstant %6 938
        %938 = OpConstantComposite %17 %934 %935 %936 %937
        %968 = OpConstant %6 -0.600000024
        %972 = OpConstant %6 5167.48047
        %973 = OpConstant %6 -993.716003
        %974 = OpConstant %6 -23.4899998
        %975 = OpConstantComposite %17 %972 %973 %974 %575
        %986 = OpConstant %6 65.3099976
        %987 = OpConstantComposite %17 %986 %986 %986 %986
       %1015 = OpConstant %6 -6.30000019
       %1016 = OpConstant %6 -786.393982
       %1017 = OpConstant %6 -59.4196014
       %1018 = OpConstant %6 -8
       %1019 = OpConstantComposite %17 %1015 %1016 %1017 %1018
       %1028 = OpConstant %6 847.127991
       %1029 = OpConstant %6 6947.49072
       %1030 = OpConstant %6 7204.96484
       %1031 = OpConstant %6 -81.2099991
       %1032 = OpConstantComposite %17 %1028 %1029 %1030 %1031
       %1037 = OpConstant %6 0.970000029
       %1038 = OpConstant %6 0.189999998
       %1049 = OpConstant %6 7.80000019
       %1104 = OpTypeVector %106 4
       %1105 = OpConstant %106 -13391
       %1106 = OpConstant %106 -5707
       %1107 = OpConstant %106 -94629
       %1108 = OpConstant %106 60609
       %1109 = OpConstantComposite %1104 %1105 %1106 %1107 %1108
       %1114 = OpConstant %6 -1.20000005
       %1115 = OpConstant %6 -3700.65405
       %1116 = OpConstantComposite %17 %1114 %968 %754 %1115
       %1140 = OpConstant %6 0.959304988
       %1141 = OpConstant %6 0.999970138
       %1142 = OpConstantComposite %17 %1140 %1141 %43 %34
       %1189 = OpConstant %6 3.29999995
       %1190 = OpConstant %6 -1.29999995
       %1191 = OpConstant %6 -26.7900009
       %1192 = OpConstant %6 -97.5
       %1193 = OpConstantComposite %17 %1189 %1190 %1191 %1192
       %1252 = OpConstant %6 6.5999999
       %1274 = OpConstant %6 -3.29999995
       %1275 = OpConstant %6 -90.3399963
       %1276 = OpConstant %6 -358.356995
       %1277 = OpConstant %6 -7912.95264
       %1278 = OpConstantComposite %17 %1274 %1275 %1276 %1277
       %1281 = OpConstant %6 44890.0586
       %1282 = OpConstant %6 -36769420
       %1283 = OpConstant %6 193803.203
       %1284 = OpConstant %6 8170982.5
       %1285 = OpConstantComposite %17 %1281 %1282 %1283 %1284
       %1333 = OpConstantComposite %17 %43 %34 %34 %34
       %1334 = OpConstantComposite %86 %172 %1333 %172 %532
       %1353 = OpConstant %6 317.446991
       %1354 = OpConstant %6 -231.710999
       %1355 = OpConstant %6 -4.19999981
       %1356 = OpConstant %6 22.6800003
       %1357 = OpConstantComposite %17 %1353 %1354 %1355 %1356
       %1370 = OpConstant %6 -6.4000001
       %1417 = OpConstant %6 -41.4799995
       %1418 = OpConstant %6 -39.3899994
       %1419 = OpConstant %6 18.1700001
       %1420 = OpConstant %6 -2.4000001
       %1421 = OpConstantComposite %17 %1417 %1418 %1419 %1420
       %1434 = OpConstant %6 139.203995
       %1435 = OpConstantComposite %17 %1434 %1434 %1434 %1434
       %1438 = OpConstant %6 -2685.48584
       %1439 = OpConstant %6 62.7999992
       %1440 = OpConstant %6 -314.721985
       %1441 = OpConstant %6 -2.9000001
       %1442 = OpConstantComposite %17 %1438 %1439 %1440 %1441
       %1446 = OpConstant %6 -37.0600014
       %1447 = OpConstant %6 -76.3899994
       %1448 = OpConstant %6 -7152.69043
       %1449 = OpConstantComposite %17 %61 %1446 %1447 %1448
       %1452 = OpConstant %6 -37.3600006
       %1453 = OpConstant %6 931.322998
       %1454 = OpConstant %6 -569.151001
       %1455 = OpConstant %6 50.6899986
       %1456 = OpConstantComposite %17 %1452 %1453 %1454 %1455
       %1500 = OpConstantComposite %7 %43 %34
       %1501 = OpConstantComposite %7 %34 %43
       %1502 = OpConstantComposite %926 %1500 %1501
       %1514 = OpConstant %6 -9087.63281
       %1515 = OpConstant %6 47.4599991
       %1516 = OpConstant %6 -44.4099998
       %1517 = OpConstantComposite %17 %1514 %1515 %1516 %1370
       %1535 = OpConstant %6 2
       %1536 = OpConstant %6 -0
       %1537 = OpConstant %6 -20
       %1538 = OpConstant %6 11
       %1539 = OpConstantComposite %17 %1535 %1536 %1537 %1538
       %1555 = OpConstant %6 3.20000005
       %1556 = OpConstant %6 -25.3799992
       %1557 = OpConstant %6 4570.87939
       %1558 = OpConstant %6 3.70000005
       %1559 = OpConstantComposite %17 %1555 %1556 %1557 %1558
       %1658 = OpConstant %6 -5.0999999
       %1659 = OpConstant %6 8.19999981
       %1660 = OpConstant %6 -2923.96387
       %1661 = OpConstantComposite %17 %1658 %1659 %467 %1660
       %1704 = OpConstant %6 -901.078003
       %1733 = OpConstant %6 -30.9799995
       %1740 = OpConstant %6 812.940002
       %1741 = OpConstant %6 60.7400017
       %1742 = OpConstantComposite %17 %1659 %1740 %1741 %1274
       %1747 = OpConstantComposite %17 %34 %43 %34 %34
       %1748 = OpConstantComposite %17 %34 %34 %43 %34
       %1749 = OpConstantComposite %17 %34 %34 %34 %43
       %1750 = OpConstantComposite %86 %1333 %1747 %1748 %1749
       %1793 = OpConstant %6 2.29999995
       %1794 = OpConstant %6 79.6100006
       %1857 = OpConstant %6 -4687.15283
       %1858 = OpConstant %6 455.212006
       %1859 = OpConstant %6 -72.4599991
       %1860 = OpConstantComposite %17 %390 %1857 %1858 %1859
       %1903 = OpConstant %6 -7535.03271
       %1904 = OpConstant %6 -572.731018
       %1905 = OpConstant %6 729.013977
       %1906 = OpConstant %6 3573.19897
       %1907 = OpConstantComposite %17 %1903 %1904 %1905 %1906
       %1908 = OpConstant %6 -22281.627
       %1909 = OpConstant %6 -6150.7998
       %1910 = OpConstant %6 689655.875
       %1911 = OpConstant %6 -2665.64233
       %1912 = OpConstantComposite %17 %1908 %1909 %1910 %1911
       %1918 = OpConstant %6 0x1p+128
       %1919 = OpConstant %6 5293.47705
       %1920 = OpConstant %6 39.3966217
       %1921 = OpConstantComposite %17 %1918 %1919 %1920 %34
       %1956 = OpConstant %6 14
       %1957 = OpConstant %6 -8008
       %1958 = OpConstant %6 335
       %1959 = OpConstantComposite %17 %1956 %1957 %1018 %1958
       %1968 = OpConstant %6 -88.5400009
       %1969 = OpConstant %6 -8.80000019
       %1970 = OpConstantComposite %17 %1555 %1968 %1969 %628
       %1973 = OpConstant %6 -129.755005
       %1974 = OpConstant %6 -506.697998
       %1975 = OpConstant %6 -7231.20898
       %1976 = OpConstant %6 -1.39999998
       %1977 = OpConstantComposite %17 %1973 %1974 %1975 %1976
       %2007 = OpConstant %6 77.6900024
       %2008 = OpConstant %6 -86.0500031
       %2009 = OpConstantComposite %17 %2007 %1252 %2008 %577
       %2016 = OpConstant %6 295.825989
       %2017 = OpConstant %6 -33591.9844
       %2018 = OpConstant %6 -2541.55029
       %2019 = OpConstant %6 87156.8594
       %2020 = OpConstantComposite %17 %2016 %2017 %2018 %2019
       %2027 = OpConstant %6 25.3799992
       %2028 = OpConstant %6 68.8099976
       %2029 = OpConstant %6 -35.5299988
       %2030 = OpConstantComposite %17 %1417 %2027 %2028 %2029
       %2052 = OpConstant %6 -36.5499992
       %2053 = OpConstant %6 2727.62891
       %2054 = OpConstant %6 -6.0999999
       %2055 = OpConstant %6 -5
       %2056 = OpConstantComposite %17 %2052 %2053 %2054 %2055
       %2081 = OpConstant %6 -32.1599998
       %2082 = OpConstant %6 -4.69999981
       %2083 = OpConstant %6 -135.509003
       %2084 = OpConstant %6 -9229.33594
       %2085 = OpConstantComposite %17 %2081 %2082 %2083 %2084
       %2090 = OpConstant %6 458.841003
       %2091 = OpConstant %6 0.100000001
       %2092 = OpConstant %6 -35.6100006
       %2093 = OpConstant %6 -23.25
       %2094 = OpConstantComposite %17 %2090 %2091 %2092 %2093
       %2101 = OpConstant %6 -2.20000005
       %2102 = OpConstant %6 -7.0999999
       %2103 = OpConstantComposite %17 %2101 %2054 %2102 %1190
       %2108 = OpConstant %6 -0.5
       %2271 = OpConstant %6 548.797974
       %2272 = OpConstantComposite %17 %276 %276 %276 %2271
       %2275 = OpConstant %6 -60.0699997
       %2276 = OpConstant %6 871.594971
       %2277 = OpConstantComposite %17 %2275 %2276 %1535 %615
       %2335 = OpConstant %6 17.4200001
       %2336 = OpConstant %6 -0.300000012
       %2337 = OpConstant %6 -153.410995
       %2338 = OpConstantComposite %17 %2335 %2336 %66 %2337
       %2355 = OpConstant %6 -77.7200012
       %2356 = OpConstant %6 775.39502
       %2357 = OpConstant %6 17.7299995
       %2358 = OpConstant %6 -8509.59473
       %2359 = OpConstantComposite %17 %2355 %2356 %2357 %2358
       %2365 = OpConstant %6 0.740818202
       %2366 = OpConstant %6 1.13349761e-33
       %2367 = OpConstant %6 0.49658531
       %2368 = OpConstantComposite %17 %2365 %34 %2366 %2367
       %2394 = OpConstant %6 3.5
       %2409 = OpConstantComposite %7 %43 %43
       %2416 = OpConstant %6 65.1399994
       %2417 = OpConstant %6 -692.375
       %2418 = OpConstant %6 41.9900017
       %2419 = OpConstantComposite %17 %2416 %451 %2417 %2418
       %2464 = OpConstant %6 1.70000005
       %2465 = OpConstant %6 76.1800003
       %2466 = OpConstant %6 -509.470001
       %2467 = OpConstantComposite %17 %2464 %468 %2465 %2466
       %2471 = OpConstant %6 -8746
       %2472 = OpConstant %6 337
       %2473 = OpConstant %6 -65
       %2474 = OpConstant %6 6078
       %2475 = OpConstantComposite %17 %2471 %2472 %2473 %2474
       %2500 = OpConstant %6 -8418.7998
       %2501 = OpConstant %6 778.41803
       %2502 = OpConstant %6 -757.330994
       %2503 = OpConstant %6 9297.86035
       %2504 = OpConstantComposite %17 %2500 %2501 %2502 %2503
       %2616 = OpConstant %6 -275.220001
       %2617 = OpConstant %6 38.7400017
       %2618 = OpConstant %6 -117.125999
       %2619 = OpConstant %6 -340.371002
       %2620 = OpConstantComposite %17 %2616 %2617 %2618 %2619
       %2633 = OpConstant %6 61.6300011
       %2634 = OpConstant %6 20.9899998
       %2635 = OpConstant %6 39.3400002
       %2636 = OpConstant %6 545.736023
       %2637 = OpConstantComposite %17 %2633 %2634 %2635 %2636
       %2652 = OpConstantComposite %7 %65 %65
       %2680 = OpConstant %6 820.19397
       %2681 = OpConstant %6 35.2099991
       %2682 = OpConstant %6 -9135.38281
       %2683 = OpConstant %6 365.708008
       %2684 = OpConstantComposite %17 %2680 %2681 %2682 %2683
       %2704 = OpConstant %6 3427.427
       %2705 = OpConstant %6 -593.325989
       %2706 = OpConstant %6 -137.360992
       %2707 = OpConstant %6 738.739014
       %2708 = OpConstantComposite %17 %2704 %2705 %2706 %2707
       %2717 = OpConstant %6 -7658.06299
       %2718 = OpConstant %6 -8.89999962
       %2719 = OpConstant %6 -695.760986
       %2720 = OpConstant %6 917.518982
       %2721 = OpConstantComposite %17 %2717 %2718 %2719 %2720
       %2745 = OpConstant %6 1.69076383
       %2746 = OpConstant %6 1.3818835
       %2747 = OpConstantComposite %17 %2745 %2745 %2746 %2745
       %2775 = OpConstant %6 -2036.13965
       %2776 = OpConstant %6 -4603.85742
       %2777 = OpConstant %6 -379.386993
       %2778 = OpConstant %6 -646.507996
       %2779 = OpConstantComposite %17 %2775 %2776 %2777 %2778
       %2925 = OpConstant %6 -29.1399994
       %2926 = OpConstant %6 1692.87256
       %2927 = OpConstant %6 -6.9000001
       %2928 = OpConstantComposite %17 %388 %2925 %2926 %2927
       %2938 = OpConstant %6 -806.276978
       %2939 = OpConstant %6 6.19999981
       %2940 = OpConstantComposite %17 %2108 %1190 %2938 %2939
       %2982 = OpConstant %6 -0.640599906
       %2983 = OpConstant %6 0.842749596
       %2984 = OpConstant %6 0.371507078
       %2985 = OpConstant %6 -0.65128082
       %2986 = OpConstantComposite %17 %2982 %2983 %2984 %2985
       %2993 = OpConstant %6 -8.10000038
       %3008 = OpConstant %6 -33618
       %3009 = OpConstant %6 122068
       %3021 = OpConstant %6 -8.19999981
       %3022 = OpConstant %6 645.986023
       %3023 = OpConstant %6 391.561005
       %3024 = OpConstantComposite %17 %3021 %467 %3022 %3023
       %3034 = OpConstant %6 0.400000006
       %3035 = OpConstant %6 -521.596008
       %3036 = OpConstant %6 7477.98535
       %3037 = OpConstant %6 2755.82251
       %3038 = OpConstantComposite %17 %3034 %3035 %3036 %3037
       %3206 = OpConstant %6 0.00390625
       %3245 = OpConstant %6 5318.70801
       %3246 = OpConstant %6 -34.3699989
       %3247 = OpConstant %6 2743.44189
       %3248 = OpConstant %6 28.6599998
       %3249 = OpConstantComposite %17 %3245 %3246 %3247 %3248
       %3262 = OpConstant %6 -2.73799992
       %3263 = OpConstant %6 -7417.15869
       %3264 = OpConstant %6 -57.7999992
       %3265 = OpConstantComposite %17 %3262 %301 %3263 %3264
       %3271 = OpConstant %6 53.1699982
       %3272 = OpConstant %6 -5663.74756
       %3273 = OpConstant %6 -8.39999962
       %3274 = OpConstantComposite %17 %3271 %3272 %3273 %575
       %3334 = OpConstant %6 539.247009
       %3335 = OpConstant %6 84.7300034
       %3336 = OpConstant %6 -885.518005
       %3337 = OpConstant %6 213.753006
       %3338 = OpConstantComposite %17 %3334 %3335 %3336 %3337
       %3339 = OpConstant %6 7333.76611
       %3340 = OpConstant %6 764.200012
       %3341 = OpConstant %6 -102.672997
       %3342 = OpConstant %6 -871.788025
       %3343 = OpConstantComposite %17 %3339 %3340 %3341 %3342
       %3365 = OpConstant %6 -2.79690003
       %3366 = OpConstant %6 -3.79369998
       %3367 = OpConstantComposite %17 %3365 %3366 %1274 %34
       %3368 = OpConstant %6 3
       %3369 = OpConstant %6 -5187.396
       %3370 = OpConstant %6 -900.453979
       %3371 = OpConstant %6 201.020004
       %3372 = OpConstantComposite %17 %3368 %3369 %3370 %3371
       %3453 = OpConstant %6 -1510.13794
       %3454 = OpConstant %6 -284.881989
       %3455 = OpConstant %6 -54.6800003
       %3456 = OpConstantComposite %17 %3453 %2082 %3454 %3455
       %3500 = OpConstant %6 -4.5999999
       %3501 = OpConstant %6 -609.073975
       %3502 = OpConstant %6 -991.255981
       %3503 = OpConstantComposite %17 %3500 %390 %3501 %3502
       %3504 = OpConstant %6 -1.70000005
       %3505 = OpConstant %6 389.953003
       %3506 = OpConstant %6 -548.413025
       %3507 = OpConstant %6 6
       %3508 = OpConstantComposite %17 %3504 %3505 %3506 %3507
       %3535 = OpConstant %6 256
       %3549 = OpConstant %6 -8503.2002
       %3550 = OpConstant %6 -93.6200027
       %3551 = OpConstant %6 441.272003
       %3552 = OpConstantComposite %17 %3549 %3550 %3551 %813
       %3584 = OpConstant %6 -19.1100006
       %3585 = OpConstant %6 -4960.82861
       %3586 = OpConstant %6 46.4099998
       %3587 = OpConstant %6 41700.7539
       %3588 = OpConstantComposite %17 %3584 %3585 %3586 %3587
       %3592 = OpTypeImage %6 2D 0 0 0 1 Unknown
       %3593 = OpTypeSampledImage %3592
       %3594 = OpTypePointer UniformConstant %3593
       %3595 = OpVariable %3594 UniformConstant
       %3615 = OpConstant %6 -430.30899
       %3839 = OpConstant %6 -3145.35132
       %3840 = OpConstant %6 73.5800018
       %3841 = OpConstant %6 -71.5
       %3842 = OpConstant %6 -1055.3324
       %3843 = OpConstantComposite %17 %3839 %3840 %3841 %3842
       %3871 = OpConstant %6 5.9000001
       %3872 = OpConstant %6 578.723022
       %3873 = OpConstant %6 78.8799973
       %3874 = OpConstantComposite %17 %3871 %3872 %2993 %3873
       %3878 = OpConstant %6 -2751.01001
       %3879 = OpConstant %6 -65133.5234
       %3880 = OpConstant %6 27.7999992
       %3881 = OpConstant %6 1097.51099
       %3882 = OpConstantComposite %17 %3878 %3879 %3880 %3881
       %3885 = OpConstant %6 47.2900009
       %3886 = OpConstant %6 1.29999995
       %3887 = OpConstantComposite %17 %301 %3885 %1274 %3886
       %3893 = OpConstant %6 -48430.6328
       %3894 = OpConstant %6 183.346497
       %3895 = OpConstant %6 -504.20285
       %3896 = OpConstant %6 -412.529602
       %3897 = OpConstantComposite %17 %3893 %3894 %3895 %3896
       %3920 = OpConstant %6 -5.19999981
       %3921 = OpConstant %6 6.30000019
       %3922 = OpConstant %6 8930.81445
       %3923 = OpConstantComposite %17 %3920 %3921 %3021 %3922
       %3926 = OpConstant %6 33.4300003
       %3927 = OpConstantComposite %17 %3926 %3926 %3926 %3926
       %3938 = OpConstant %6 69.1500015
       %3939 = OpConstant %6 4668.57812
       %3940 = OpConstant %6 -5.80000019
       %3956 = OpConstant %6 759.346008
       %3957 = OpConstant %6 -5.4000001
       %3958 = OpConstant %6 99.5299988
       %3959 = OpConstant %6 -819.093018
       %3960 = OpConstantComposite %17 %3956 %3957 %3958 %3959
       %3966 = OpConstant %6 -544.047974
       %3967 = OpConstant %6 -11.5600004
       %3968 = OpConstant %6 886.25
       %3969 = OpConstant %6 66.4899979
       %3970 = OpConstantComposite %17 %3966 %3967 %3968 %3969
       %3998 = OpConstant %6 915.257996
       %3999 = OpConstant %6 -26.2600002
       %4000 = OpConstant %6 40.1500015
       %4001 = OpConstant %6 -50.2000008
       %4002 = OpConstantComposite %17 %3998 %3999 %4000 %4001
       %4012 = OpConstant %6 5.5
       %4013 = OpConstant %6 49.1800003
       %4014 = OpConstant %6 1656.14868
       %4015 = OpConstant %6 552.859009
       %4016 = OpConstantComposite %17 %4012 %4013 %4014 %4015
       %4064 = OpConstant %6 3890.68896
       %4065 = OpConstant %6 7.69999981
       %4066 = OpConstant %6 298.661987
       %4067 = OpConstantComposite %17 %4064 %4065 %4066 %4012
       %4075 = OpConstant %6 -9941.63965
       %4076 = OpConstant %6 7.0999999
       %4077 = OpConstantComposite %17 %4075 %468 %4076 %3368
       %4094 = OpConstant %6 -35676.6094
       %4095 = OpConstant %6 60245.6367
       %4096 = OpConstant %6 306290.969
       %4097 = OpConstant %6 -265709.281
       %4098 = OpConstantComposite %17 %4094 %4095 %4096 %4097
       %4175 = OpConstant %6 272.067993
       %4176 = OpConstant %6 0.699999988
       %4177 = OpConstant %6 -643.552979
       %4178 = OpConstant %6 42.9099998
       %4179 = OpConstantComposite %17 %4175 %4176 %4177 %4178
       %4180 = OpConstant %106 64510
       %4181 = OpConstant %106 64925
       %4182 = OpConstant %106 58020
       %4183 = OpConstant %106 -3602
       %4184 = OpConstantComposite %1104 %4180 %4181 %4182 %4183
       %4200 = OpConstant %6 -86.7399979
       %4201 = OpConstant %6 177.824005
       %8618 = OpUndef %17
       %9997 = OpConstantComposite %17 %4200 %1049 %4012 %4201
       %9999 = OpConstantComposite %17 %2394 %3938 %3939 %3940
      %10001 = OpConstant %6 -6059.90283
      %10002 = OpConstant %6 -3940.01562
      %10003 = OpConstant %6 636.836975
      %10004 = OpConstant %6 -9425.08984
      %10005 = OpConstantComposite %17 %10001 %10002 %10003 %10004
      %10008 = OpConstantComposite %17 %23 %23 %23 %23
      %10010 = OpConstant %6 -0.421875
      %10011 = OpConstant %6 -0.8125
      %10012 = OpConstantComposite %7 %10010 %10011
      %10014 = OpConstant %6 -7383.95215
      %10015 = OpConstant %6 -7356.30225
      %10016 = OpConstant %6 -2168.00195
      %10017 = OpConstant %6 -6629.40527
      %10018 = OpConstantComposite %17 %10014 %10015 %10016 %10017
      %10023 = OpConstant %6 0.318309844
      %10024 = OpConstant %6 -0.734375
      %10025 = OpConstant %6 -0.34375
      %10026 = OpConstantComposite %7 %10024 %10025
      %10027 = OpConstantComposite %7 %3206 %3206
          %4 = OpFunction %2 None %3
          %5 = OpLabel
               OpSelectionMerge %4287 None
               OpSwitch %30 %4288
       %4288 = OpLabel
       %2918 = OpAccessChain %31 %28 %30
       %2919 = OpLoad %6 %2918
       %2920 = OpFOrdLessThan %35 %2919 %34
               OpSelectionMerge %2922 None
               OpBranchConditional %2920 %2921 %2922
       %2921 = OpLabel
       %2924 = OpLoad %17 %21
               OpStore %21 %2928
       %2930 = OpAccessChain %31 %28 %45
       %2931 = OpLoad %6 %2930
       %2932 = OpFOrdGreaterThanEqual %35 %2931 %34
       %2933 = OpLogicalOr %35 %2932 %40
               OpSelectionMerge %2935 None
               OpBranchConditional %2933 %2934 %2935
       %2934 = OpLabel
       %2937 = OpLoad %17 %21
               OpStore %21 %2940
       %2943 = OpFOrdGreaterThanEqual %35 %2919 %34
               OpSelectionMerge %2945 None
               OpBranchConditional %2943 %2944 %2945
       %2944 = OpLabel
               OpStore %21 %2937
               OpBranch %2945
       %2945 = OpLabel
               OpStore %21 %2924
               OpBranch %2935
       %2935 = OpLabel
       %2969 = OpFOrdLessThan %35 %2931 %34
               OpSelectionMerge %2971 None
               OpBranchConditional %2969 %2970 %2972
       %2972 = OpLabel
       %2974 = OpLoad %17 %21
       %2976 = OpLoad %17 %21
               OpStore %21 %2986
       %2995 = OpCompositeExtract %6 %2976 2
       %2997 = OpCompositeExtract %6 %2976 3
       %2998 = OpCompositeConstruct %17 %2993 %34 %2995 %2997
       %3005 = OpCompositeExtract %6 %2976 0
       %3007 = OpCompositeExtract %6 %2976 1
       %3010 = OpCompositeConstruct %17 %3005 %3007 %3008 %3009
       %3013 = OpFOrdGreaterThanEqual %35 %2919 %34
       %3014 = OpCompositeConstruct %254 %69 %3013 %40 %40
       %3015 = OpSelect %17 %3014 %3010 %2998
               OpStore %21 %3015
       %3020 = OpLoad %17 %21
               OpStore %21 %3024
               OpStore %21 %3020
               OpBranch %2971
       %2970 = OpLabel
               OpBranch %2971
       %2971 = OpLabel
       %9975 = OpPhi %17 %2974 %2972 %8618 %2970
               OpStore %21 %3038
               OpStore %21 %9975
               OpSelectionMerge %3079 None
               OpBranchConditional %2969 %3078 %3079
       %3078 = OpLabel
               OpBranch %4287
       %3079 = OpLabel
               OpSelectionMerge %3099 None
               OpBranchConditional %2969 %3098 %3099
       %3098 = OpLabel
               OpBranch %4287
       %3099 = OpLabel
               OpBranch %4287
       %2922 = OpLabel
       %3139 = OpAccessChain %31 %28 %45
       %3140 = OpLoad %6 %3139
       %3141 = OpFOrdLessThan %35 %3140 %34
               OpSelectionMerge %3143 None
               OpBranchConditional %3141 %3142 %3143
       %3142 = OpLabel
               OpBranch %4287
       %3143 = OpLabel
       %3204 = OpLoad %17 %28
       %3205 = OpVectorShuffle %7 %3204 %3204 0 1
       %3207 = OpVectorTimesScalar %7 %3205 %3206
               OpSelectionMerge %4548 None
               OpSwitch %30 %4328
       %4328 = OpLabel
       %4337 = OpLoad %17 %21
               OpStore %21 %2419
       %4341 = OpAccessChain %108 %105 %107 %30
       %4342 = OpLoad %6 %4341
       %4344 = OpAccessChain %108 %105 %107 %45
       %4345 = OpLoad %6 %4344
       %4346 = OpFOrdLessThan %35 %4342 %4345
       %4347 = OpLogicalNot %35 %4346
               OpSelectionMerge %4354 None
               OpBranchConditional %4347 %4348 %4354
       %4348 = OpLabel
       %4353 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranch %4354
       %4354 = OpLabel
       %4355 = OpPhi %35 %4346 %4328 %4353 %4348
               OpSelectionMerge %4387 None
               OpBranchConditional %4355 %4356 %4387
       %4356 = OpLabel
       %4357 = OpLoad %17 %21
       %4358 = OpLoad %17 %21
               OpStore %21 %2467
               OpStore %21 %4358
               OpStore %21 %2475
       %4365 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %4372 None
               OpBranchConditional %4365 %4366 %4372
       %4366 = OpLabel
               OpStore %21 %4357
       %4368 = OpLoad %17 %21
               OpStore %21 %2504
               OpStore %21 %4368
               OpBranch %4372
       %4372 = OpLabel
               OpStore %21 %4337
               OpSelectionMerge %4385 None
               OpBranchConditional %3141 %4384 %4385
       %4384 = OpLabel
               OpBranch %4548
       %4385 = OpLabel
               OpBranch %4387
       %4387 = OpLabel
       %4391 = OpLoad %17 %21
               OpStore %21 %2620
       %4398 = OpLogicalNot %35 %4347
               OpSelectionMerge %4411 None
               OpBranchConditional %4398 %4399 %4411
       %4399 = OpLabel
               OpStore %21 %4391
       %4401 = OpLoad %17 %21
       %4402 = OpExtInst %17 %1 Sinh %2637
               OpStore %21 %4402
               OpSelectionMerge %4410 None
               OpBranchConditional %4346 %4408 %4410
       %4408 = OpLabel
               OpStore %21 %4401
               OpBranch %4410
       %4410 = OpLabel
               OpBranch %4411
       %4411 = OpLabel
       %4414 = OpFAdd %7 %3207 %10012
       %4415 = OpLoad %17 %21
       %4417 = OpLoad %17 %21
       %4424 = OpFwidth %17 %10018
               OpStore %21 %4424
       %4427 = OpFOrdGreaterThanEqual %35 %2919 %34
       %4428 = OpLogicalAnd %35 %4427 %69
               OpSelectionMerge %4431 None
               OpBranchConditional %4428 %4429 %4431
       %4429 = OpLabel
               OpStore %21 %4417
               OpBranch %4431
       %4431 = OpLabel
               OpStore %21 %2684
               OpSelectionMerge %4495 None
               OpBranchConditional %4427 %4435 %4495
       %4435 = OpLabel
       %4437 = OpLoad %17 %21
               OpSelectionMerge %4442 None
               OpBranchConditional %2920 %4441 %4442
       %4441 = OpLabel
               OpBranch %4548
       %4442 = OpLabel
               OpStore %21 %2708
               OpBranch %4445
       %4445 = OpLabel
       %8613 = OpPhi %17 %8618 %4442 %8611 %4483
               OpLoopMerge %4489 %4483 None
               OpBranch %4446
       %4446 = OpLabel
       %4447 = OpLoad %17 %21
               OpStore %21 %2721
       %4450 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %4453 None
               OpBranchConditional %4450 %4451 %4453
       %4451 = OpLabel
               OpStore %21 %4447
               OpBranch %4453
       %4453 = OpLabel
               OpBranch %4455
       %4455 = OpLabel
       %8611 = OpPhi %17 %8613 %4453 %4461 %4459
       %8610 = OpPhi %106 %107 %4453 %4464 %4459
       %4458 = OpSLessThan %35 %8610 %725
               OpLoopMerge %4465 %4459 None
               OpBranchConditional %4458 %4459 %4465
       %4459 = OpLabel
       %4461 = OpLoad %17 %21
       %4464 = OpIAdd %106 %8610 %725
               OpBranch %4455
       %4465 = OpLabel
               OpStore %21 %2747
               OpSelectionMerge %4479 None
               OpBranchConditional %4427 %4477 %4479
       %4477 = OpLabel
               OpStore %21 %8611
               OpBranch %4479
       %4479 = OpLabel
               OpStore %21 %4437
               OpBranch %4483
       %4483 = OpLabel
       %4488 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranchConditional %4488 %4445 %4489
       %4489 = OpLabel
       %4490 = OpLoad %17 %21
               OpStore %21 %2779
               OpStore %21 %4490
               OpStore %21 %4415
               OpBranch %4495
       %4495 = OpLabel
       %4521 = OpExtInst %6 %1 Length %4414
       %4542 = OpExtInst %7 %1 FMin %4414 %4414
               OpSelectionMerge %5704 None
               OpSwitch %30 %4646
       %4646 = OpLabel
       %4647 = OpLoad %17 %21
               OpStore %21 %26
               OpSelectionMerge %4653 None
               OpBranchConditional %4427 %4651 %4653
       %4651 = OpLabel
               OpStore %21 %4647
               OpBranch %4653
       %4653 = OpLabel
               OpSelectionMerge %4659 None
               OpBranchConditional %3141 %4658 %4659
       %4658 = OpLabel
               OpStore %21 %53
               OpBranch %4659
       %4659 = OpLabel
       %4660 = OpLoad %17 %21
               OpSelectionMerge %4665 None
               OpBranchConditional %2920 %4664 %4665
       %4664 = OpLabel
               OpStore %21 %63
               OpBranch %4665
       %4665 = OpLabel
               OpStore %21 %68
               OpStore %21 %4660
       %4818 = OpLogicalAnd %35 %3141 %69
               OpSelectionMerge %4849 None
               OpBranchConditional %4818 %4824 %4849
       %4824 = OpLabel
       %4831 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %4834 None
               OpBranchConditional %4831 %4833 %4834
       %4833 = OpLabel
               OpBranch %5704
       %4834 = OpLabel
       %4837 = OpLoad %17 %21
               OpStore %21 %284
               OpStore %21 %4837
               OpBranch %5704
       %4849 = OpLabel
       %4852 = OpExtInst %6 %1 Length %4542
       %4853 = OpFOrdLessThan %35 %4852 %320
               OpSelectionMerge %4858 None
               OpBranchConditional %4853 %4854 %4858
       %4854 = OpLabel
               OpBranch %5704
       %4858 = OpLabel
       %4859 = OpLoad %17 %21
               OpStore %21 %360
               OpStore %21 %4859
       %4864 = OpLoad %17 %21
               OpStore %21 %379
               OpStore %21 %4864
       %4870 = OpLoad %17 %21
               OpStore %21 %391
       %4874 = OpLogicalNot %35 %4427
       %4875 = OpLogicalOr %35 %4874 %40
       %4876 = OpLogicalNot %35 %4875
               OpSelectionMerge %4879 None
               OpBranchConditional %4876 %4877 %4879
       %4877 = OpLabel
               OpStore %21 %4870
               OpBranch %4879
       %4879 = OpLabel
       %4881 = OpExtInst %7 %1 FAbs %4542
               OpSelectionMerge %4886 None
               OpBranchConditional %3141 %4885 %4886
       %4885 = OpLabel
               OpBranch %5704
       %4886 = OpLabel
       %4891 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %4893 None
               OpBranchConditional %4891 %4892 %4893
       %4892 = OpLabel
               OpBranch %5704
       %4893 = OpLabel
       %4895 = OpCompositeExtract %6 %4881 1
       %4897 = OpCompositeExtract %6 %4881 0
       %4898 = OpFOrdGreaterThan %35 %4895 %4897
               OpSelectionMerge %4946 None
               OpBranchConditional %4898 %4914 %4899
       %4899 = OpLabel
       %4912 = OpExtInst %6 %1 FClamp %4897 %4897 %4897
       %4913 = OpFDiv %6 %4895 %4912
               OpBranch %4946
       %4914 = OpLabel
       %4921 = OpExtInst %6 %1 FMax %2919 %2919
       %4924 = OpExtInst %6 %1 FClamp %2919 %4921 %2919
       %4927 = OpFOrdLessThan %35 %4924 %4342
       %4928 = OpLogicalAnd %35 %4927 %69
               OpSelectionMerge %4930 None
               OpBranchConditional %4928 %4929 %4930
       %4929 = OpLabel
               OpBranch %5704
       %4930 = OpLabel
       %4931 = OpLoad %17 %21
               OpSelectionMerge %4936 None
               OpBranchConditional %3141 %4935 %4936
       %4935 = OpLabel
               OpBranch %5704
       %4936 = OpLabel
               OpStore %21 %453
               OpStore %21 %4931
       %4945 = OpFDiv %6 %4897 %4895
               OpBranch %4946
       %4946 = OpLabel
       %8622 = OpPhi %6 %4913 %4899 %4945 %4936
       %4948 = OpLoad %17 %21
               OpStore %21 %672
               OpSelectionMerge %4954 None
               OpBranchConditional %4427 %4952 %4954
       %4952 = OpLabel
               OpStore %21 %4948
               OpBranch %4954
       %4954 = OpLabel
       %4957 = OpLoad %17 %21
               OpStore %21 %890
       %4967 = OpLogicalAnd %35 %4346 %69
               OpSelectionMerge %5015 None
               OpBranchConditional %4967 %4979 %4968
       %4968 = OpLabel
       %4970 = OpLoad %17 %21
               OpStore %21 %987
       %4973 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %4976 None
               OpBranchConditional %4973 %4974 %4976
       %4974 = OpLabel
               OpStore %21 %4970
               OpBranch %4976
       %4976 = OpLabel
               OpBranch %5015
       %4979 = OpLabel
       %4983 = OpExtInst %17 %1 FClamp %3204 %3204 %3204
       %4984 = OpCompositeExtract %6 %4983 0
       %4985 = OpFOrdGreaterThanEqual %35 %4984 %34
               OpSelectionMerge %4996 None
               OpBranchConditional %4985 %4988 %4986
       %4986 = OpLabel
               OpBranch %4996
       %4988 = OpLabel
       %4995 = OpExtInst %6 %1 FClamp %4342 %4342 %4342
               OpBranch %4996
       %4996 = OpLabel
       %8623 = OpPhi %6 %8622 %4986 %4995 %4988
       %5004 = OpFOrdGreaterThan %35 %8623 %4345
               OpSelectionMerge %5006 None
               OpBranchConditional %5004 %5005 %5006
       %5005 = OpLabel
               OpStore %21 %938
               OpBranch %5006
       %5006 = OpLabel
       %5008 = OpLoad %17 %21
               OpStore %21 %975
               OpStore %21 %5008
               OpStore %21 %4957
               OpBranch %5015
       %5015 = OpLabel
       %5016 = OpLoad %17 %21
               OpStore %21 %1019
               OpStore %21 %5016
       %5020 = OpLoad %17 %21
               OpStore %21 %1032
               OpStore %21 %5020
       %5026 = OpFMul %6 %1038 %8622
       %5028 = OpFMul %6 %5026 %8622
       %5029 = OpFSub %6 %1037 %5028
       %5042 = OpExtInst %6 %1 FMax %5029 %5029
       %5053 = OpExtInst %6 %1 FMin %5028 %5028
       %5059 = OpExtInst %6 %1 FMax %5053 %5028
       %5060 = OpFSub %6 %1037 %5059
       %5073 = OpExtInst %6 %1 FMax %5060 %5029
       %5074 = OpExtInst %6 %1 FMin %5042 %5073
       %5076 = OpFMul %6 %5074 %8622
       %5078 = OpFMul %6 %5076 %10023
               OpSelectionMerge %5111 None
               OpBranchConditional %2920 %5083 %5111
       %5083 = OpLabel
       %5084 = OpBitcast %17 %1109
       %5085 = OpFwidth %17 %5084
               OpStore %21 %5085
       %5086 = OpLoad %17 %21
               OpStore %21 %1116
               OpStore %21 %5086
       %5097 = OpFOrdLessThan %35 %3140 %4342
               OpSelectionMerge %5099 None
               OpBranchConditional %5097 %5098 %5099
       %5098 = OpLabel
               OpBranch %5704
       %5099 = OpLabel
       %5100 = OpLoad %17 %21
               OpStore %21 %172
               OpStore %21 %5100
       %5104 = OpLoad %17 %21
               OpStore %21 %1142
               OpSelectionMerge %5110 None
               OpBranchConditional %4427 %5108 %5110
       %5108 = OpLabel
               OpStore %21 %5104
               OpBranch %5110
       %5110 = OpLabel
               OpBranch %5111
       %5111 = OpLabel
               OpSelectionMerge %5118 None
               OpBranchConditional %4891 %5117 %5118
       %5117 = OpLabel
               OpBranch %5704
       %5118 = OpLabel
       %5128 = OpExtInst %6 %1 FClamp %4897 %4897 %4897
       %5129 = OpFOrdLessThan %35 %4895 %5128
               OpSelectionMerge %5149 None
               OpBranchConditional %5129 %5130 %5149
       %5130 = OpLabel
       %5133 = OpFSub %6 %65 %5078
       %5134 = OpLoad %17 %21
       %5138 = OpLogicalAnd %35 %2920 %69
               OpSelectionMerge %5140 None
               OpBranchConditional %5138 %5139 %5140
       %5139 = OpLabel
               OpBranch %5704
       %5140 = OpLabel
               OpStore %21 %1193
               OpSelectionMerge %5148 None
               OpBranchConditional %4427 %5144 %5148
       %5144 = OpLabel
               OpStore %21 %5134
               OpBranch %5148
       %5148 = OpLabel
               OpBranch %5149
       %5149 = OpLabel
       %8631 = OpPhi %6 %5078 %5118 %5133 %5148
       %5152 = OpExtInst %7 %1 FMax %4542 %4542
       %5153 = OpCompositeExtract %6 %5152 0
       %5154 = OpFOrdLessThan %35 %5153 %34
               OpSelectionMerge %5615 None
               OpBranchConditional %5154 %5155 %5615
       %5155 = OpLabel
               OpSelectionMerge %5163 None
               OpBranchConditional %4891 %5161 %5163
       %5161 = OpLabel
               OpBranch %5704
       %5163 = OpLabel
               OpSelectionMerge %5168 None
               OpBranchConditional %3141 %5167 %5168
       %5167 = OpLabel
               OpBranch %5704
       %5168 = OpLabel
       %5169 = OpLoad %17 %21
               OpStore %21 %1278
       %5170 = OpLoad %17 %21
               OpStore %21 %1285
               OpStore %21 %5170
               OpSelectionMerge %5189 None
               OpBranchConditional %4427 %5178 %5189
       %5178 = OpLabel
               OpStore %21 %5169
               OpBranch %5189
       %5189 = OpLabel
       %5194 = OpExtInst %6 %1 FClamp %8631 %8631 %8631
       %5195 = OpFSub %6 %43 %5194
               OpSelectionMerge %5566 None
               OpBranchConditional %4346 %5201 %5566
       %5201 = OpLabel
       %5205 = OpExtInst %6 %1 Determinant %1334
       %5206 = OpFOrdLessThan %35 %2919 %5205
               OpSelectionMerge %5208 None
               OpBranchConditional %5206 %5207 %5208
       %5207 = OpLabel
               OpBranch %5704
       %5208 = OpLabel
               OpBranch %5209
       %5209 = OpLabel
       %8725 = OpPhi %17 %8618 %5208 %5224 %5225
       %8633 = OpPhi %106 %725 %5208 %5227 %5225
       %5214 = OpConvertFToS %106 %4342
       %5215 = OpSGreaterThan %35 %8633 %5214
               OpLoopMerge %5228 %5225 None
               OpBranchConditional %5215 %5216 %5228
       %5216 = OpLabel
       %5217 = OpLoad %17 %21
               OpStore %21 %1357
               OpSelectionMerge %5223 None
               OpBranchConditional %4427 %5221 %5223
       %5221 = OpLabel
               OpStore %21 %5217
               OpBranch %5223
       %5223 = OpLabel
       %5224 = OpLoad %17 %21
               OpBranch %5225
       %5225 = OpLabel
       %5227 = OpISub %106 %8633 %725
               OpBranch %5209
       %5228 = OpLabel
               OpStore %21 %1421
       %5232 = OpLoad %17 %21
       %5233 = OpLoad %17 %21
       %5234 = OpLoad %17 %21
       %5235 = OpExtInst %17 %1 FMax %5233 %5234
       %5236 = OpExtInst %17 %1 FMin %5232 %5235
               OpSelectionMerge %5242 None
               OpBranchConditional %2920 %5241 %5242
       %5241 = OpLabel
               OpStore %21 %1435
               OpBranch %5242
       %5242 = OpLabel
       %5243 = OpLoad %17 %21
               OpStore %21 %1442
               OpStore %21 %5243
               OpStore %21 %1449
       %5247 = OpLoad %17 %21
               OpStore %21 %1456
               OpSelectionMerge %5255 None
               OpBranchConditional %4346 %5253 %5255
       %5253 = OpLabel
               OpStore %21 %5247
               OpBranch %5255
       %5255 = OpLabel
       %5257 = OpAccessChain %768 %105 %107
       %5258 = OpLoad %7 %5257
       %5263 = OpCompositeConstruct %7 %4345 %4345
       %5264 = OpFDiv %7 %5258 %5263
       %5267 = OpVectorTimesMatrix %7 %5258 %1502
       %5268 = OpExtInst %7 %1 FMax %5264 %5267
       %5269 = OpCompositeExtract %6 %5268 0
       %5272 = OpFOrdLessThan %35 %5269 %4345
               OpSelectionMerge %5309 None
               OpBranchConditional %5272 %5273 %5309
       %5273 = OpLabel
               OpStore %21 %5236
       %5275 = OpLoad %17 %21
               OpStore %21 %1517
       %5279 = OpFOrdGreaterThanEqual %35 %3140 %34
       %5280 = OpLogicalAnd %35 %5279 %69
               OpSelectionMerge %5286 None
               OpBranchConditional %5280 %5284 %5286
       %5284 = OpLabel
               OpStore %21 %5275
               OpBranch %5286
       %5286 = OpLabel
               OpSelectionMerge %5308 None
               OpBranchConditional %3141 %5290 %5308
       %5290 = OpLabel
               OpStore %21 %1539
       %5292 = OpLoad %17 %21
               OpStore %21 %1559
               OpSelectionMerge %5300 None
               OpBranchConditional %5279 %5298 %5300
       %5298 = OpLabel
               OpStore %21 %5292
               OpBranch %5300
       %5300 = OpLabel
               OpSelectionMerge %5307 None
               OpBranchConditional %4891 %5306 %5307
       %5306 = OpLabel
               OpBranch %5704
       %5307 = OpLabel
               OpBranch %5308
       %5308 = OpLabel
               OpBranch %5309
       %5309 = OpLabel
               OpSelectionMerge %5320 None
               OpBranchConditional %2920 %5319 %5317
       %5317 = OpLabel
       %5318 = OpLoad %17 %21
               OpBranch %5320
       %5319 = OpLabel
               OpBranch %5320
       %5320 = OpLabel
       %8671 = OpPhi %17 %5318 %5317 %8618 %5319
               OpStore %21 %1661
       %5363 = OpLogicalOr %35 %2920 %40
       %5364 = OpLogicalAnd %35 %5363 %69
       %5367 = OpLogicalAnd %35 %5364 %69
               OpSelectionMerge %5393 None
               OpBranchConditional %5367 %5368 %5393
       %5368 = OpLabel
       %5371 = OpCompositeExtract %6 %3204 0
       %5384 = OpSelect %6 %3141 %1704 %34
       %5385 = OpFOrdLessThan %35 %5371 %5384
               OpSelectionMerge %5392 None
               OpBranchConditional %5385 %5386 %5392
       %5386 = OpLabel
               OpSelectionMerge %5391 None
               OpBranchConditional %2920 %5390 %5391
       %5390 = OpLabel
               OpBranch %5704
       %5391 = OpLabel
               OpBranch %5704
       %5392 = OpLabel
               OpBranch %5704
       %5393 = OpLabel
       %5400 = OpFOrdLessThan %35 %2919 %4342
               OpSelectionMerge %5402 None
               OpBranchConditional %5400 %5401 %5402
       %5401 = OpLabel
               OpBranch %5704
       %5402 = OpLabel
               OpSelectionMerge %5416 None
               OpBranchConditional %3141 %5415 %5406
       %5406 = OpLabel
       %5409 = OpExtInst %17 %1 FMin %8671 %8671
       %5413 = OpMatrixTimesVector %17 %1750 %5409
       %5414 = OpExtInst %17 %1 FMin %5409 %5413
               OpBranch %5416
       %5415 = OpLabel
               OpBranch %5416
       %5416 = OpLabel
       %8707 = OpPhi %17 %5414 %5406 %1742 %5415
       %5418 = OpCompositeExtract %6 %8707 1
               OpSelectionMerge %5432 None
               OpBranchConditional %3141 %5431 %5422
       %5422 = OpLabel
       %5425 = OpExtInst %17 %1 FMin %8671 %8671
       %5429 = OpMatrixTimesVector %17 %1750 %5425
       %5430 = OpExtInst %17 %1 FMin %5425 %5429
               OpBranch %5432
       %5431 = OpLabel
               OpBranch %5432
       %5432 = OpLabel
       %8709 = OpPhi %17 %5430 %5422 %1742 %5431
       %5434 = OpCompositeExtract %6 %8709 2
       %5435 = OpCompositeConstruct %17 %1733 %5418 %5434 %283
               OpSelectionMerge %5449 None
               OpBranchConditional %3141 %5448 %5439
       %5439 = OpLabel
       %5442 = OpExtInst %17 %1 FMin %8671 %8671
       %5446 = OpMatrixTimesVector %17 %1750 %5442
       %5447 = OpExtInst %17 %1 FMin %5442 %5446
               OpBranch %5449
       %5448 = OpLabel
               OpBranch %5449
       %5449 = OpLabel
       %8711 = OpPhi %17 %5447 %5439 %1742 %5448
       %5451 = OpCompositeExtract %6 %8711 0
               OpSelectionMerge %5465 None
               OpBranchConditional %3141 %5464 %5455
       %5455 = OpLabel
       %5458 = OpExtInst %17 %1 FMin %8671 %8671
       %5462 = OpMatrixTimesVector %17 %1750 %5458
       %5463 = OpExtInst %17 %1 FMin %5458 %5462
               OpBranch %5465
       %5464 = OpLabel
               OpBranch %5465
       %5465 = OpLabel
       %8713 = OpPhi %17 %5463 %5455 %1742 %5464
       %5467 = OpCompositeExtract %6 %8713 3
       %5468 = OpCompositeConstruct %17 %5451 %1793 %1794 %5467
       %5469 = OpVectorShuffle %17 %5468 %5435 0 5 6 3
               OpStore %21 %5469
               OpSelectionMerge %5489 None
               OpBranchConditional %4398 %5485 %5489
       %5485 = OpLabel
       %5488 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpBranch %5489
       %5489 = OpLabel
       %5490 = OpPhi %35 %4398 %5465 %5488 %5485
       %5491 = OpLogicalNot %35 %5490
       %5492 = OpLogicalNot %35 %5491
       %5493 = OpLogicalNot %35 %5492
       %5494 = OpLogicalNot %35 %5493
               OpSelectionMerge %5511 None
               OpBranchConditional %5494 %5495 %5511
       %5495 = OpLabel
               OpStore %21 %8725
               OpSelectionMerge %5502 None
               OpBranchConditional %3141 %5501 %5502
       %5501 = OpLabel
               OpBranch %5704
       %5502 = OpLabel
       %5503 = OpLoad %17 %21
               OpStore %21 %1860
       %5506 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %5509 None
               OpBranchConditional %5506 %5507 %5509
       %5507 = OpLabel
               OpStore %21 %5503
               OpBranch %5509
       %5509 = OpLabel
               OpBranch %5511
       %5511 = OpLabel
       %5515 = OpLoad %17 %21
               OpSelectionMerge %5521 None
               OpBranchConditional %3141 %5520 %5521
       %5520 = OpLabel
               OpStore %21 %1907
               OpBranch %5521
       %5521 = OpLabel
               OpStore %21 %1912
               OpSelectionMerge %5540 None
               OpBranchConditional %3141 %5525 %5540
       %5525 = OpLabel
               OpStore %21 %1921
       %5529 = OpLogicalNot %35 %3141
       %5530 = OpLogicalNot %35 %5529
               OpSelectionMerge %5533 None
               OpBranchConditional %5530 %5531 %5533
       %5531 = OpLabel
               OpBranch %5704
       %5533 = OpLabel
               OpSelectionMerge %5539 None
               OpBranchConditional %3141 %5538 %5539
       %5538 = OpLabel
               OpBranch %5704
       %5539 = OpLabel
               OpBranch %5540
       %5540 = OpLabel
               OpSelectionMerge %5550 None
               OpBranchConditional %2920 %5549 %5550
       %5549 = OpLabel
               OpStore %21 %1959
               OpBranch %5550
       %5550 = OpLabel
               OpStore %21 %5515
               OpSelectionMerge %5559 None
               OpBranchConditional %4891 %5558 %5559
       %5558 = OpLabel
               OpStore %21 %1970
               OpBranch %5559
       %5559 = OpLabel
       %5560 = OpLoad %17 %21
       %5561 = OpExtInst %17 %1 Tanh %1977
       %5562 = OpExtInst %17 %1 Exp %5561
               OpStore %21 %5562
               OpStore %21 %5560
               OpBranch %5566
       %5566 = OpLabel
               OpSelectionMerge %5573 None
               OpBranchConditional %4891 %5572 %5573
       %5572 = OpLabel
               OpBranch %5704
       %5573 = OpLabel
       %5577 = OpLoad %17 %21
       %5578 = OpLoad %17 %21
               OpStore %21 %2009
       %5581 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %5584 None
               OpBranchConditional %5581 %5582 %5584
       %5582 = OpLabel
               OpStore %21 %5578
               OpBranch %5584
       %5584 = OpLabel
               OpStore %21 %2020
               OpStore %21 %5577
       %5588 = OpLoad %17 %21
               OpStore %21 %2030
               OpStore %21 %5588
       %5594 = OpLoad %17 %21
       %5597 = OpLoad %17 %21
               OpStore %21 %2056
               OpStore %21 %5597
               OpStore %21 %2085
       %5603 = OpLoad %17 %21
               OpStore %21 %2094
               OpStore %21 %5603
               OpStore %21 %5594
       %5609 = OpLoad %17 %21
               OpStore %21 %2103
               OpStore %21 %5609
               OpBranch %5615
       %5615 = OpLabel
       %8757 = OpPhi %6 %8631 %5149 %5195 %5584
       %5620 = OpCompositeExtract %6 %4542 1
       %5621 = OpFOrdLessThan %35 %5620 %34
       %5634 = OpLogicalOr %35 %5621 %40
               OpSelectionMerge %5699 None
               OpBranchConditional %5634 %5635 %5699
       %5635 = OpLabel
               OpSelectionMerge %5656 None
               OpBranchConditional %2920 %5639 %5656
       %5639 = OpLabel
       %5641 = OpLoad %17 %21
               OpStore %21 %2272
       %5642 = OpLoad %17 %21
               OpStore %21 %2277
               OpStore %21 %5642
               OpSelectionMerge %5654 None
               OpBranchConditional %4346 %5652 %5654
       %5652 = OpLabel
               OpStore %21 %5641
               OpBranch %5654
       %5654 = OpLabel
               OpBranch %5704
       %5656 = OpLabel
       %5658 = OpFNegate %6 %8757
               OpSelectionMerge %5665 None
               OpBranchConditional %4891 %5664 %5665
       %5664 = OpLabel
               OpBranch %5704
       %5665 = OpLabel
               OpSelectionMerge %5677 None
               OpBranchConditional %4891 %5671 %5677
       %5671 = OpLabel
               OpStore %21 %10005
               OpBranch %5677
       %5677 = OpLabel
       %5678 = OpLoad %17 %21
               OpStore %21 %2338
               OpSelectionMerge %5686 None
               OpBranchConditional %4346 %5684 %5686
       %5684 = OpLabel
               OpStore %21 %5678
               OpBranch %5686
       %5686 = OpLabel
       %5688 = OpLoad %17 %21
       %5689 = OpLoad %17 %21
       %5690 = OpLoad %17 %21
       %5691 = OpExtInst %17 %1 FClamp %5688 %5689 %5690
               OpStore %21 %2359
               OpStore %21 %5691
       %5695 = OpLoad %17 %21
               OpStore %21 %2368
               OpStore %21 %5695
               OpBranch %5699
       %5699 = OpLabel
       %8782 = OpPhi %6 %8757 %5615 %5658 %5686
               OpBranch %5704
       %5704 = OpLabel
       %8786 = OpPhi %6 %43 %4833 %43 %4834 %34 %4854 %43 %4885 %43 %4892 %43 %4929 %43 %4935 %43 %5098 %43 %5117 %43 %5139 %43 %5161 %43 %5167 %43 %5207 %43 %5306 %43 %5390 %43 %5391 %43 %5392 %43 %5401 %43 %5501 %43 %5531 %43 %5538 %43 %5572 %43 %5654 %43 %5664 %8782 %5699
       %4547 = OpCompositeConstruct %7 %4521 %8786
               OpBranch %4548
       %4548 = OpLabel
       %8787 = OpPhi %7 %2409 %4384 %2409 %4441 %4547 %5704
               OpSelectionMerge %3227 None
               OpBranchConditional %3141 %3226 %3227
       %3226 = OpLabel
               OpBranch %4287
       %3227 = OpLabel
               OpSelectionMerge %5953 None
               OpSwitch %30 %5733
       %5733 = OpLabel
       %5742 = OpLoad %17 %21
               OpStore %21 %2419
               OpSelectionMerge %5759 None
               OpBranchConditional %4347 %5753 %5759
       %5753 = OpLabel
       %5758 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranch %5759
       %5759 = OpLabel
       %5760 = OpPhi %35 %4346 %5733 %5758 %5753
               OpSelectionMerge %5792 None
               OpBranchConditional %5760 %5761 %5792
       %5761 = OpLabel
       %5762 = OpLoad %17 %21
       %5763 = OpLoad %17 %21
               OpStore %21 %2467
               OpStore %21 %5763
               OpStore %21 %2475
       %5770 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %5777 None
               OpBranchConditional %5770 %5771 %5777
       %5771 = OpLabel
               OpStore %21 %5762
       %5773 = OpLoad %17 %21
               OpStore %21 %2504
               OpStore %21 %5773
               OpBranch %5777
       %5777 = OpLabel
               OpStore %21 %5742
               OpSelectionMerge %5790 None
               OpBranchConditional %3141 %5789 %5790
       %5789 = OpLabel
               OpBranch %5953
       %5790 = OpLabel
               OpBranch %5792
       %5792 = OpLabel
       %5796 = OpLoad %17 %21
               OpStore %21 %2620
       %5803 = OpLogicalNot %35 %4347
               OpSelectionMerge %5816 None
               OpBranchConditional %5803 %5804 %5816
       %5804 = OpLabel
               OpStore %21 %5796
       %5806 = OpLoad %17 %21
       %5807 = OpExtInst %17 %1 Sinh %2637
               OpStore %21 %5807
               OpSelectionMerge %5815 None
               OpBranchConditional %4346 %5813 %5815
       %5813 = OpLabel
               OpStore %21 %5806
               OpBranch %5815
       %5815 = OpLabel
               OpBranch %5816
       %5816 = OpLabel
       %5819 = OpFAdd %7 %3207 %10026
       %5820 = OpLoad %17 %21
       %5822 = OpLoad %17 %21
       %5829 = OpFwidth %17 %10018
               OpStore %21 %5829
       %5832 = OpFOrdGreaterThanEqual %35 %2919 %34
       %5833 = OpLogicalAnd %35 %5832 %69
               OpSelectionMerge %5836 None
               OpBranchConditional %5833 %5834 %5836
       %5834 = OpLabel
               OpStore %21 %5822
               OpBranch %5836
       %5836 = OpLabel
               OpStore %21 %2684
               OpSelectionMerge %5900 None
               OpBranchConditional %5832 %5840 %5900
       %5840 = OpLabel
       %5842 = OpLoad %17 %21
               OpSelectionMerge %5847 None
               OpBranchConditional %2920 %5846 %5847
       %5846 = OpLabel
               OpBranch %5953
       %5847 = OpLabel
               OpStore %21 %2708
               OpBranch %5850
       %5850 = OpLabel
       %8850 = OpPhi %17 %8618 %5847 %8848 %5888
               OpLoopMerge %5894 %5888 None
               OpBranch %5851
       %5851 = OpLabel
       %5852 = OpLoad %17 %21
               OpStore %21 %2721
       %5855 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %5858 None
               OpBranchConditional %5855 %5856 %5858
       %5856 = OpLabel
               OpStore %21 %5852
               OpBranch %5858
       %5858 = OpLabel
               OpBranch %5860
       %5860 = OpLabel
       %8848 = OpPhi %17 %8850 %5858 %5866 %5864
       %8847 = OpPhi %106 %107 %5858 %5869 %5864
       %5863 = OpSLessThan %35 %8847 %725
               OpLoopMerge %5870 %5864 None
               OpBranchConditional %5863 %5864 %5870
       %5864 = OpLabel
       %5866 = OpLoad %17 %21
       %5869 = OpIAdd %106 %8847 %725
               OpBranch %5860
       %5870 = OpLabel
               OpStore %21 %2747
               OpSelectionMerge %5884 None
               OpBranchConditional %5832 %5882 %5884
       %5882 = OpLabel
               OpStore %21 %8848
               OpBranch %5884
       %5884 = OpLabel
               OpStore %21 %5842
               OpBranch %5888
       %5888 = OpLabel
       %5893 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranchConditional %5893 %5850 %5894
       %5894 = OpLabel
       %5895 = OpLoad %17 %21
               OpStore %21 %2779
               OpStore %21 %5895
               OpStore %21 %5820
               OpBranch %5900
       %5900 = OpLabel
       %5926 = OpExtInst %6 %1 Length %5819
       %5947 = OpExtInst %7 %1 FMin %5819 %5819
               OpSelectionMerge %7109 None
               OpSwitch %30 %6051
       %6051 = OpLabel
       %6052 = OpLoad %17 %21
               OpStore %21 %26
               OpSelectionMerge %6058 None
               OpBranchConditional %5832 %6056 %6058
       %6056 = OpLabel
               OpStore %21 %6052
               OpBranch %6058
       %6058 = OpLabel
               OpSelectionMerge %6064 None
               OpBranchConditional %3141 %6063 %6064
       %6063 = OpLabel
               OpStore %21 %53
               OpBranch %6064
       %6064 = OpLabel
       %6065 = OpLoad %17 %21
               OpSelectionMerge %6070 None
               OpBranchConditional %2920 %6069 %6070
       %6069 = OpLabel
               OpStore %21 %63
               OpBranch %6070
       %6070 = OpLabel
               OpStore %21 %68
               OpStore %21 %6065
       %6223 = OpLogicalAnd %35 %3141 %69
               OpSelectionMerge %6254 None
               OpBranchConditional %6223 %6229 %6254
       %6229 = OpLabel
       %6236 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %6239 None
               OpBranchConditional %6236 %6238 %6239
       %6238 = OpLabel
               OpBranch %7109
       %6239 = OpLabel
       %6242 = OpLoad %17 %21
               OpStore %21 %284
               OpStore %21 %6242
               OpBranch %7109
       %6254 = OpLabel
       %6257 = OpExtInst %6 %1 Length %5947
       %6258 = OpFOrdLessThan %35 %6257 %320
               OpSelectionMerge %6263 None
               OpBranchConditional %6258 %6259 %6263
       %6259 = OpLabel
               OpBranch %7109
       %6263 = OpLabel
       %6264 = OpLoad %17 %21
               OpStore %21 %360
               OpStore %21 %6264
       %6269 = OpLoad %17 %21
               OpStore %21 %379
               OpStore %21 %6269
       %6275 = OpLoad %17 %21
               OpStore %21 %391
       %6279 = OpLogicalNot %35 %5832
       %6280 = OpLogicalOr %35 %6279 %40
       %6281 = OpLogicalNot %35 %6280
               OpSelectionMerge %6284 None
               OpBranchConditional %6281 %6282 %6284
       %6282 = OpLabel
               OpStore %21 %6275
               OpBranch %6284
       %6284 = OpLabel
       %6286 = OpExtInst %7 %1 FAbs %5947
               OpSelectionMerge %6291 None
               OpBranchConditional %3141 %6290 %6291
       %6290 = OpLabel
               OpBranch %7109
       %6291 = OpLabel
       %6296 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %6298 None
               OpBranchConditional %6296 %6297 %6298
       %6297 = OpLabel
               OpBranch %7109
       %6298 = OpLabel
       %6300 = OpCompositeExtract %6 %6286 1
       %6302 = OpCompositeExtract %6 %6286 0
       %6303 = OpFOrdGreaterThan %35 %6300 %6302
               OpSelectionMerge %6351 None
               OpBranchConditional %6303 %6319 %6304
       %6304 = OpLabel
       %6317 = OpExtInst %6 %1 FClamp %6302 %6302 %6302
       %6318 = OpFDiv %6 %6300 %6317
               OpBranch %6351
       %6319 = OpLabel
       %6326 = OpExtInst %6 %1 FMax %2919 %2919
       %6329 = OpExtInst %6 %1 FClamp %2919 %6326 %2919
       %6332 = OpFOrdLessThan %35 %6329 %4342
       %6333 = OpLogicalAnd %35 %6332 %69
               OpSelectionMerge %6335 None
               OpBranchConditional %6333 %6334 %6335
       %6334 = OpLabel
               OpBranch %7109
       %6335 = OpLabel
       %6336 = OpLoad %17 %21
               OpSelectionMerge %6341 None
               OpBranchConditional %3141 %6340 %6341
       %6340 = OpLabel
               OpBranch %7109
       %6341 = OpLabel
               OpStore %21 %453
               OpStore %21 %6336
       %6350 = OpFDiv %6 %6302 %6300
               OpBranch %6351
       %6351 = OpLabel
       %8917 = OpPhi %6 %6318 %6304 %6350 %6341
       %6353 = OpLoad %17 %21
               OpStore %21 %672
               OpSelectionMerge %6359 None
               OpBranchConditional %5832 %6357 %6359
       %6357 = OpLabel
               OpStore %21 %6353
               OpBranch %6359
       %6359 = OpLabel
       %6362 = OpLoad %17 %21
               OpStore %21 %890
       %6372 = OpLogicalAnd %35 %4346 %69
               OpSelectionMerge %6420 None
               OpBranchConditional %6372 %6384 %6373
       %6373 = OpLabel
       %6375 = OpLoad %17 %21
               OpStore %21 %987
       %6378 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %6381 None
               OpBranchConditional %6378 %6379 %6381
       %6379 = OpLabel
               OpStore %21 %6375
               OpBranch %6381
       %6381 = OpLabel
               OpBranch %6420
       %6384 = OpLabel
       %6388 = OpExtInst %17 %1 FClamp %3204 %3204 %3204
       %6389 = OpCompositeExtract %6 %6388 0
       %6390 = OpFOrdGreaterThanEqual %35 %6389 %34
               OpSelectionMerge %6401 None
               OpBranchConditional %6390 %6393 %6391
       %6391 = OpLabel
               OpBranch %6401
       %6393 = OpLabel
       %6400 = OpExtInst %6 %1 FClamp %4342 %4342 %4342
               OpBranch %6401
       %6401 = OpLabel
       %8918 = OpPhi %6 %8917 %6391 %6400 %6393
       %6409 = OpFOrdGreaterThan %35 %8918 %4345
               OpSelectionMerge %6411 None
               OpBranchConditional %6409 %6410 %6411
       %6410 = OpLabel
               OpStore %21 %938
               OpBranch %6411
       %6411 = OpLabel
       %6413 = OpLoad %17 %21
               OpStore %21 %975
               OpStore %21 %6413
               OpStore %21 %6362
               OpBranch %6420
       %6420 = OpLabel
       %6421 = OpLoad %17 %21
               OpStore %21 %1019
               OpStore %21 %6421
       %6425 = OpLoad %17 %21
               OpStore %21 %1032
               OpStore %21 %6425
       %6431 = OpFMul %6 %1038 %8917
       %6433 = OpFMul %6 %6431 %8917
       %6434 = OpFSub %6 %1037 %6433
       %6447 = OpExtInst %6 %1 FMax %6434 %6434
       %6458 = OpExtInst %6 %1 FMin %6433 %6433
       %6464 = OpExtInst %6 %1 FMax %6458 %6433
       %6465 = OpFSub %6 %1037 %6464
       %6478 = OpExtInst %6 %1 FMax %6465 %6434
       %6479 = OpExtInst %6 %1 FMin %6447 %6478
       %6481 = OpFMul %6 %6479 %8917
       %6483 = OpFMul %6 %6481 %10023
               OpSelectionMerge %6516 None
               OpBranchConditional %2920 %6488 %6516
       %6488 = OpLabel
       %6489 = OpBitcast %17 %1109
       %6490 = OpFwidth %17 %6489
               OpStore %21 %6490
       %6491 = OpLoad %17 %21
               OpStore %21 %1116
               OpStore %21 %6491
       %6502 = OpFOrdLessThan %35 %3140 %4342
               OpSelectionMerge %6504 None
               OpBranchConditional %6502 %6503 %6504
       %6503 = OpLabel
               OpBranch %7109
       %6504 = OpLabel
       %6505 = OpLoad %17 %21
               OpStore %21 %172
               OpStore %21 %6505
       %6509 = OpLoad %17 %21
               OpStore %21 %1142
               OpSelectionMerge %6515 None
               OpBranchConditional %5832 %6513 %6515
       %6513 = OpLabel
               OpStore %21 %6509
               OpBranch %6515
       %6515 = OpLabel
               OpBranch %6516
       %6516 = OpLabel
               OpSelectionMerge %6523 None
               OpBranchConditional %6296 %6522 %6523
       %6522 = OpLabel
               OpBranch %7109
       %6523 = OpLabel
       %6533 = OpExtInst %6 %1 FClamp %6302 %6302 %6302
       %6534 = OpFOrdLessThan %35 %6300 %6533
               OpSelectionMerge %6554 None
               OpBranchConditional %6534 %6535 %6554
       %6535 = OpLabel
       %6538 = OpFSub %6 %65 %6483
       %6539 = OpLoad %17 %21
       %6543 = OpLogicalAnd %35 %2920 %69
               OpSelectionMerge %6545 None
               OpBranchConditional %6543 %6544 %6545
       %6544 = OpLabel
               OpBranch %7109
       %6545 = OpLabel
               OpStore %21 %1193
               OpSelectionMerge %6553 None
               OpBranchConditional %5832 %6549 %6553
       %6549 = OpLabel
               OpStore %21 %6539
               OpBranch %6553
       %6553 = OpLabel
               OpBranch %6554
       %6554 = OpLabel
       %8926 = OpPhi %6 %6483 %6523 %6538 %6553
       %6557 = OpExtInst %7 %1 FMax %5947 %5947
       %6558 = OpCompositeExtract %6 %6557 0
       %6559 = OpFOrdLessThan %35 %6558 %34
               OpSelectionMerge %7020 None
               OpBranchConditional %6559 %6560 %7020
       %6560 = OpLabel
               OpSelectionMerge %6568 None
               OpBranchConditional %6296 %6566 %6568
       %6566 = OpLabel
               OpBranch %7109
       %6568 = OpLabel
               OpSelectionMerge %6573 None
               OpBranchConditional %3141 %6572 %6573
       %6572 = OpLabel
               OpBranch %7109
       %6573 = OpLabel
       %6574 = OpLoad %17 %21
               OpStore %21 %1278
       %6575 = OpLoad %17 %21
               OpStore %21 %1285
               OpStore %21 %6575
               OpSelectionMerge %6594 None
               OpBranchConditional %5832 %6583 %6594
       %6583 = OpLabel
               OpStore %21 %6574
               OpBranch %6594
       %6594 = OpLabel
       %6599 = OpExtInst %6 %1 FClamp %8926 %8926 %8926
       %6600 = OpFSub %6 %43 %6599
               OpSelectionMerge %6971 None
               OpBranchConditional %4346 %6606 %6971
       %6606 = OpLabel
       %6610 = OpExtInst %6 %1 Determinant %1334
       %6611 = OpFOrdLessThan %35 %2919 %6610
               OpSelectionMerge %6613 None
               OpBranchConditional %6611 %6612 %6613
       %6612 = OpLabel
               OpBranch %7109
       %6613 = OpLabel
               OpBranch %6614
       %6614 = OpLabel
       %9138 = OpPhi %17 %8618 %6613 %6629 %6630
       %8928 = OpPhi %106 %725 %6613 %6632 %6630
       %6619 = OpConvertFToS %106 %4342
       %6620 = OpSGreaterThan %35 %8928 %6619
               OpLoopMerge %6633 %6630 None
               OpBranchConditional %6620 %6621 %6633
       %6621 = OpLabel
       %6622 = OpLoad %17 %21
               OpStore %21 %1357
               OpSelectionMerge %6628 None
               OpBranchConditional %5832 %6626 %6628
       %6626 = OpLabel
               OpStore %21 %6622
               OpBranch %6628
       %6628 = OpLabel
       %6629 = OpLoad %17 %21
               OpBranch %6630
       %6630 = OpLabel
       %6632 = OpISub %106 %8928 %725
               OpBranch %6614
       %6633 = OpLabel
               OpStore %21 %1421
       %6637 = OpLoad %17 %21
       %6638 = OpLoad %17 %21
       %6639 = OpLoad %17 %21
       %6640 = OpExtInst %17 %1 FMax %6638 %6639
       %6641 = OpExtInst %17 %1 FMin %6637 %6640
               OpSelectionMerge %6647 None
               OpBranchConditional %2920 %6646 %6647
       %6646 = OpLabel
               OpStore %21 %1435
               OpBranch %6647
       %6647 = OpLabel
       %6648 = OpLoad %17 %21
               OpStore %21 %1442
               OpStore %21 %6648
               OpStore %21 %1449
       %6652 = OpLoad %17 %21
               OpStore %21 %1456
               OpSelectionMerge %6660 None
               OpBranchConditional %4346 %6658 %6660
       %6658 = OpLabel
               OpStore %21 %6652
               OpBranch %6660
       %6660 = OpLabel
       %6662 = OpAccessChain %768 %105 %107
       %6663 = OpLoad %7 %6662
       %6668 = OpCompositeConstruct %7 %4345 %4345
       %6669 = OpFDiv %7 %6663 %6668
       %6672 = OpVectorTimesMatrix %7 %6663 %1502
       %6673 = OpExtInst %7 %1 FMax %6669 %6672
       %6674 = OpCompositeExtract %6 %6673 0
       %6677 = OpFOrdLessThan %35 %6674 %4345
               OpSelectionMerge %6714 None
               OpBranchConditional %6677 %6678 %6714
       %6678 = OpLabel
               OpStore %21 %6641
       %6680 = OpLoad %17 %21
               OpStore %21 %1517
       %6684 = OpFOrdGreaterThanEqual %35 %3140 %34
       %6685 = OpLogicalAnd %35 %6684 %69
               OpSelectionMerge %6691 None
               OpBranchConditional %6685 %6689 %6691
       %6689 = OpLabel
               OpStore %21 %6680
               OpBranch %6691
       %6691 = OpLabel
               OpSelectionMerge %6713 None
               OpBranchConditional %3141 %6695 %6713
       %6695 = OpLabel
               OpStore %21 %1539
       %6697 = OpLoad %17 %21
               OpStore %21 %1559
               OpSelectionMerge %6705 None
               OpBranchConditional %6684 %6703 %6705
       %6703 = OpLabel
               OpStore %21 %6697
               OpBranch %6705
       %6705 = OpLabel
               OpSelectionMerge %6712 None
               OpBranchConditional %6296 %6711 %6712
       %6711 = OpLabel
               OpBranch %7109
       %6712 = OpLabel
               OpBranch %6713
       %6713 = OpLabel
               OpBranch %6714
       %6714 = OpLabel
               OpSelectionMerge %6725 None
               OpBranchConditional %2920 %6724 %6722
       %6722 = OpLabel
       %6723 = OpLoad %17 %21
               OpBranch %6725
       %6724 = OpLabel
               OpBranch %6725
       %6725 = OpLabel
       %9025 = OpPhi %17 %6723 %6722 %8618 %6724
               OpStore %21 %1661
       %6768 = OpLogicalOr %35 %2920 %40
       %6769 = OpLogicalAnd %35 %6768 %69
       %6772 = OpLogicalAnd %35 %6769 %69
               OpSelectionMerge %6798 None
               OpBranchConditional %6772 %6773 %6798
       %6773 = OpLabel
       %6776 = OpCompositeExtract %6 %3204 0
       %6789 = OpSelect %6 %3141 %1704 %34
       %6790 = OpFOrdLessThan %35 %6776 %6789
               OpSelectionMerge %6797 None
               OpBranchConditional %6790 %6791 %6797
       %6791 = OpLabel
               OpSelectionMerge %6796 None
               OpBranchConditional %2920 %6795 %6796
       %6795 = OpLabel
               OpBranch %7109
       %6796 = OpLabel
               OpBranch %7109
       %6797 = OpLabel
               OpBranch %7109
       %6798 = OpLabel
       %6805 = OpFOrdLessThan %35 %2919 %4342
               OpSelectionMerge %6807 None
               OpBranchConditional %6805 %6806 %6807
       %6806 = OpLabel
               OpBranch %7109
       %6807 = OpLabel
               OpSelectionMerge %6821 None
               OpBranchConditional %3141 %6820 %6811
       %6811 = OpLabel
       %6814 = OpExtInst %17 %1 FMin %9025 %9025
       %6818 = OpMatrixTimesVector %17 %1750 %6814
       %6819 = OpExtInst %17 %1 FMin %6814 %6818
               OpBranch %6821
       %6820 = OpLabel
               OpBranch %6821
       %6821 = OpLabel
       %9120 = OpPhi %17 %6819 %6811 %1742 %6820
       %6823 = OpCompositeExtract %6 %9120 1
               OpSelectionMerge %6837 None
               OpBranchConditional %3141 %6836 %6827
       %6827 = OpLabel
       %6830 = OpExtInst %17 %1 FMin %9025 %9025
       %6834 = OpMatrixTimesVector %17 %1750 %6830
       %6835 = OpExtInst %17 %1 FMin %6830 %6834
               OpBranch %6837
       %6836 = OpLabel
               OpBranch %6837
       %6837 = OpLabel
       %9122 = OpPhi %17 %6835 %6827 %1742 %6836
       %6839 = OpCompositeExtract %6 %9122 2
       %6840 = OpCompositeConstruct %17 %1733 %6823 %6839 %283
               OpSelectionMerge %6854 None
               OpBranchConditional %3141 %6853 %6844
       %6844 = OpLabel
       %6847 = OpExtInst %17 %1 FMin %9025 %9025
       %6851 = OpMatrixTimesVector %17 %1750 %6847
       %6852 = OpExtInst %17 %1 FMin %6847 %6851
               OpBranch %6854
       %6853 = OpLabel
               OpBranch %6854
       %6854 = OpLabel
       %9124 = OpPhi %17 %6852 %6844 %1742 %6853
       %6856 = OpCompositeExtract %6 %9124 0
               OpSelectionMerge %6870 None
               OpBranchConditional %3141 %6869 %6860
       %6860 = OpLabel
       %6863 = OpExtInst %17 %1 FMin %9025 %9025
       %6867 = OpMatrixTimesVector %17 %1750 %6863
       %6868 = OpExtInst %17 %1 FMin %6863 %6867
               OpBranch %6870
       %6869 = OpLabel
               OpBranch %6870
       %6870 = OpLabel
       %9126 = OpPhi %17 %6868 %6860 %1742 %6869
       %6872 = OpCompositeExtract %6 %9126 3
       %6873 = OpCompositeConstruct %17 %6856 %1793 %1794 %6872
       %6874 = OpVectorShuffle %17 %6873 %6840 0 5 6 3
               OpStore %21 %6874
               OpSelectionMerge %6894 None
               OpBranchConditional %5803 %6890 %6894
       %6890 = OpLabel
       %6893 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpBranch %6894
       %6894 = OpLabel
       %6895 = OpPhi %35 %5803 %6870 %6893 %6890
       %6896 = OpLogicalNot %35 %6895
       %6897 = OpLogicalNot %35 %6896
       %6898 = OpLogicalNot %35 %6897
       %6899 = OpLogicalNot %35 %6898
               OpSelectionMerge %6916 None
               OpBranchConditional %6899 %6900 %6916
       %6900 = OpLabel
               OpStore %21 %9138
               OpSelectionMerge %6907 None
               OpBranchConditional %3141 %6906 %6907
       %6906 = OpLabel
               OpBranch %7109
       %6907 = OpLabel
       %6908 = OpLoad %17 %21
               OpStore %21 %1860
       %6911 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %6914 None
               OpBranchConditional %6911 %6912 %6914
       %6912 = OpLabel
               OpStore %21 %6908
               OpBranch %6914
       %6914 = OpLabel
               OpBranch %6916
       %6916 = OpLabel
       %6920 = OpLoad %17 %21
               OpSelectionMerge %6926 None
               OpBranchConditional %3141 %6925 %6926
       %6925 = OpLabel
               OpStore %21 %1907
               OpBranch %6926
       %6926 = OpLabel
               OpStore %21 %1912
               OpSelectionMerge %6945 None
               OpBranchConditional %3141 %6930 %6945
       %6930 = OpLabel
               OpStore %21 %1921
       %6934 = OpLogicalNot %35 %3141
       %6935 = OpLogicalNot %35 %6934
               OpSelectionMerge %6938 None
               OpBranchConditional %6935 %6936 %6938
       %6936 = OpLabel
               OpBranch %7109
       %6938 = OpLabel
               OpSelectionMerge %6944 None
               OpBranchConditional %3141 %6943 %6944
       %6943 = OpLabel
               OpBranch %7109
       %6944 = OpLabel
               OpBranch %6945
       %6945 = OpLabel
               OpSelectionMerge %6955 None
               OpBranchConditional %2920 %6954 %6955
       %6954 = OpLabel
               OpStore %21 %1959
               OpBranch %6955
       %6955 = OpLabel
               OpStore %21 %6920
               OpSelectionMerge %6964 None
               OpBranchConditional %6296 %6963 %6964
       %6963 = OpLabel
               OpStore %21 %1970
               OpBranch %6964
       %6964 = OpLabel
       %6965 = OpLoad %17 %21
       %6966 = OpExtInst %17 %1 Tanh %1977
       %6967 = OpExtInst %17 %1 Exp %6966
               OpStore %21 %6967
               OpStore %21 %6965
               OpBranch %6971
       %6971 = OpLabel
               OpSelectionMerge %6978 None
               OpBranchConditional %6296 %6977 %6978
       %6977 = OpLabel
               OpBranch %7109
       %6978 = OpLabel
       %6982 = OpLoad %17 %21
       %6983 = OpLoad %17 %21
               OpStore %21 %2009
       %6986 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %6989 None
               OpBranchConditional %6986 %6987 %6989
       %6987 = OpLabel
               OpStore %21 %6983
               OpBranch %6989
       %6989 = OpLabel
               OpStore %21 %2020
               OpStore %21 %6982
       %6993 = OpLoad %17 %21
               OpStore %21 %2030
               OpStore %21 %6993
       %6999 = OpLoad %17 %21
       %7002 = OpLoad %17 %21
               OpStore %21 %2056
               OpStore %21 %7002
               OpStore %21 %2085
       %7008 = OpLoad %17 %21
               OpStore %21 %2094
               OpStore %21 %7008
               OpStore %21 %6999
       %7014 = OpLoad %17 %21
               OpStore %21 %2103
               OpStore %21 %7014
               OpBranch %7020
       %7020 = OpLabel
       %9229 = OpPhi %6 %8926 %6554 %6600 %6989
       %7025 = OpCompositeExtract %6 %5947 1
       %7026 = OpFOrdLessThan %35 %7025 %34
       %7039 = OpLogicalOr %35 %7026 %40
               OpSelectionMerge %7104 None
               OpBranchConditional %7039 %7040 %7104
       %7040 = OpLabel
               OpSelectionMerge %7061 None
               OpBranchConditional %2920 %7044 %7061
       %7044 = OpLabel
       %7046 = OpLoad %17 %21
               OpStore %21 %2272
       %7047 = OpLoad %17 %21
               OpStore %21 %2277
               OpStore %21 %7047
               OpSelectionMerge %7059 None
               OpBranchConditional %4346 %7057 %7059
       %7057 = OpLabel
               OpStore %21 %7046
               OpBranch %7059
       %7059 = OpLabel
               OpBranch %7109
       %7061 = OpLabel
       %7063 = OpFNegate %6 %9229
               OpSelectionMerge %7070 None
               OpBranchConditional %6296 %7069 %7070
       %7069 = OpLabel
               OpBranch %7109
       %7070 = OpLabel
               OpSelectionMerge %7082 None
               OpBranchConditional %6296 %7076 %7082
       %7076 = OpLabel
               OpStore %21 %10005
               OpBranch %7082
       %7082 = OpLabel
       %7083 = OpLoad %17 %21
               OpStore %21 %2338
               OpSelectionMerge %7091 None
               OpBranchConditional %4346 %7089 %7091
       %7089 = OpLabel
               OpStore %21 %7083
               OpBranch %7091
       %7091 = OpLabel
       %7093 = OpLoad %17 %21
       %7094 = OpLoad %17 %21
       %7095 = OpLoad %17 %21
       %7096 = OpExtInst %17 %1 FClamp %7093 %7094 %7095
               OpStore %21 %2359
               OpStore %21 %7096
       %7100 = OpLoad %17 %21
               OpStore %21 %2368
               OpStore %21 %7100
               OpBranch %7104
       %7104 = OpLabel
       %9254 = OpPhi %6 %9229 %7020 %7063 %7091
               OpBranch %7109
       %7109 = OpLabel
       %9258 = OpPhi %6 %43 %6238 %43 %6239 %34 %6259 %43 %6290 %43 %6297 %43 %6334 %43 %6340 %43 %6503 %43 %6522 %43 %6544 %43 %6566 %43 %6572 %43 %6612 %43 %6711 %43 %6795 %43 %6796 %43 %6797 %43 %6806 %43 %6906 %43 %6936 %43 %6943 %43 %6977 %43 %7059 %43 %7069 %9254 %7104
       %5952 = OpCompositeConstruct %7 %5926 %9258
               OpBranch %5953
       %5953 = OpLabel
       %9259 = OpPhi %7 %2409 %5789 %2409 %5846 %5952 %7109
               OpSelectionMerge %3241 None
               OpBranchConditional %3141 %3240 %3241
       %3240 = OpLabel
               OpBranch %4287
       %3241 = OpLabel
       %3244 = OpLoad %17 %21
               OpStore %21 %3249
       %3252 = OpFOrdGreaterThanEqual %35 %2919 %34
               OpSelectionMerge %3254 None
               OpBranchConditional %3252 %3253 %3254
       %3253 = OpLabel
               OpStore %21 %3244
               OpBranch %3254
       %3254 = OpLabel
               OpSelectionMerge %7358 None
               OpSwitch %30 %7138
       %7138 = OpLabel
       %7147 = OpLoad %17 %21
               OpStore %21 %2419
               OpSelectionMerge %7164 None
               OpBranchConditional %4347 %7158 %7164
       %7158 = OpLabel
       %7163 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranch %7164
       %7164 = OpLabel
       %7165 = OpPhi %35 %4346 %7138 %7163 %7158
               OpSelectionMerge %7197 None
               OpBranchConditional %7165 %7166 %7197
       %7166 = OpLabel
       %7167 = OpLoad %17 %21
       %7168 = OpLoad %17 %21
               OpStore %21 %2467
               OpStore %21 %7168
               OpStore %21 %2475
       %7175 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %7182 None
               OpBranchConditional %7175 %7176 %7182
       %7176 = OpLabel
               OpStore %21 %7167
       %7178 = OpLoad %17 %21
               OpStore %21 %2504
               OpStore %21 %7178
               OpBranch %7182
       %7182 = OpLabel
               OpStore %21 %7147
               OpSelectionMerge %7195 None
               OpBranchConditional %3141 %7194 %7195
       %7194 = OpLabel
               OpBranch %7358
       %7195 = OpLabel
               OpBranch %7197
       %7197 = OpLabel
       %7201 = OpLoad %17 %21
               OpStore %21 %2620
       %7208 = OpLogicalNot %35 %4347
               OpSelectionMerge %7221 None
               OpBranchConditional %7208 %7209 %7221
       %7209 = OpLabel
               OpStore %21 %7201
       %7211 = OpLoad %17 %21
       %7212 = OpExtInst %17 %1 Sinh %2637
               OpStore %21 %7212
               OpSelectionMerge %7220 None
               OpBranchConditional %4346 %7218 %7220
       %7218 = OpLabel
               OpStore %21 %7211
               OpBranch %7220
       %7220 = OpLabel
               OpBranch %7221
       %7221 = OpLabel
       %7224 = OpFSub %7 %3207 %2652
       %7225 = OpLoad %17 %21
       %7227 = OpLoad %17 %21
       %7234 = OpFwidth %17 %10018
               OpStore %21 %7234
       %7238 = OpLogicalAnd %35 %3252 %69
               OpSelectionMerge %7241 None
               OpBranchConditional %7238 %7239 %7241
       %7239 = OpLabel
               OpStore %21 %7227
               OpBranch %7241
       %7241 = OpLabel
               OpStore %21 %2684
               OpSelectionMerge %7305 None
               OpBranchConditional %3252 %7245 %7305
       %7245 = OpLabel
       %7247 = OpLoad %17 %21
               OpSelectionMerge %7252 None
               OpBranchConditional %2920 %7251 %7252
       %7251 = OpLabel
               OpBranch %7358
       %7252 = OpLabel
               OpStore %21 %2708
               OpBranch %7255
       %7255 = OpLabel
       %9323 = OpPhi %17 %8618 %7252 %9321 %7293
               OpLoopMerge %7299 %7293 None
               OpBranch %7256
       %7256 = OpLabel
       %7257 = OpLoad %17 %21
               OpStore %21 %2721
       %7260 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %7263 None
               OpBranchConditional %7260 %7261 %7263
       %7261 = OpLabel
               OpStore %21 %7257
               OpBranch %7263
       %7263 = OpLabel
               OpBranch %7265
       %7265 = OpLabel
       %9321 = OpPhi %17 %9323 %7263 %7271 %7269
       %9320 = OpPhi %106 %107 %7263 %7274 %7269
       %7268 = OpSLessThan %35 %9320 %725
               OpLoopMerge %7275 %7269 None
               OpBranchConditional %7268 %7269 %7275
       %7269 = OpLabel
       %7271 = OpLoad %17 %21
       %7274 = OpIAdd %106 %9320 %725
               OpBranch %7265
       %7275 = OpLabel
               OpStore %21 %2747
               OpSelectionMerge %7289 None
               OpBranchConditional %3252 %7287 %7289
       %7287 = OpLabel
               OpStore %21 %9321
               OpBranch %7289
       %7289 = OpLabel
               OpStore %21 %7247
               OpBranch %7293
       %7293 = OpLabel
       %7298 = OpFOrdGreaterThan %35 %4342 %4345
               OpBranchConditional %7298 %7255 %7299
       %7299 = OpLabel
       %7300 = OpLoad %17 %21
               OpStore %21 %2779
               OpStore %21 %7300
               OpStore %21 %7225
               OpBranch %7305
       %7305 = OpLabel
       %7331 = OpExtInst %6 %1 Length %7224
       %7352 = OpExtInst %7 %1 FMin %7224 %7224
               OpSelectionMerge %8514 None
               OpSwitch %30 %7456
       %7456 = OpLabel
       %7457 = OpLoad %17 %21
               OpStore %21 %26
               OpSelectionMerge %7463 None
               OpBranchConditional %3252 %7461 %7463
       %7461 = OpLabel
               OpStore %21 %7457
               OpBranch %7463
       %7463 = OpLabel
               OpSelectionMerge %7469 None
               OpBranchConditional %3141 %7468 %7469
       %7468 = OpLabel
               OpStore %21 %53
               OpBranch %7469
       %7469 = OpLabel
       %7470 = OpLoad %17 %21
               OpSelectionMerge %7475 None
               OpBranchConditional %2920 %7474 %7475
       %7474 = OpLabel
               OpStore %21 %63
               OpBranch %7475
       %7475 = OpLabel
               OpStore %21 %68
               OpStore %21 %7470
       %7628 = OpLogicalAnd %35 %3141 %69
               OpSelectionMerge %7659 None
               OpBranchConditional %7628 %7634 %7659
       %7634 = OpLabel
       %7641 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %7644 None
               OpBranchConditional %7641 %7643 %7644
       %7643 = OpLabel
               OpBranch %8514
       %7644 = OpLabel
       %7647 = OpLoad %17 %21
               OpStore %21 %284
               OpStore %21 %7647
               OpBranch %8514
       %7659 = OpLabel
       %7662 = OpExtInst %6 %1 Length %7352
       %7663 = OpFOrdLessThan %35 %7662 %320
               OpSelectionMerge %7668 None
               OpBranchConditional %7663 %7664 %7668
       %7664 = OpLabel
               OpBranch %8514
       %7668 = OpLabel
       %7669 = OpLoad %17 %21
               OpStore %21 %360
               OpStore %21 %7669
       %7674 = OpLoad %17 %21
               OpStore %21 %379
               OpStore %21 %7674
       %7680 = OpLoad %17 %21
               OpStore %21 %391
       %7684 = OpLogicalNot %35 %3252
       %7685 = OpLogicalOr %35 %7684 %40
       %7686 = OpLogicalNot %35 %7685
               OpSelectionMerge %7689 None
               OpBranchConditional %7686 %7687 %7689
       %7687 = OpLabel
               OpStore %21 %7680
               OpBranch %7689
       %7689 = OpLabel
       %7691 = OpExtInst %7 %1 FAbs %7352
               OpSelectionMerge %7696 None
               OpBranchConditional %3141 %7695 %7696
       %7695 = OpLabel
               OpBranch %8514
       %7696 = OpLabel
       %7701 = OpFOrdGreaterThan %35 %4342 %4345
               OpSelectionMerge %7703 None
               OpBranchConditional %7701 %7702 %7703
       %7702 = OpLabel
               OpBranch %8514
       %7703 = OpLabel
       %7705 = OpCompositeExtract %6 %7691 1
       %7707 = OpCompositeExtract %6 %7691 0
       %7708 = OpFOrdGreaterThan %35 %7705 %7707
               OpSelectionMerge %7756 None
               OpBranchConditional %7708 %7724 %7709
       %7709 = OpLabel
       %7722 = OpExtInst %6 %1 FClamp %7707 %7707 %7707
       %7723 = OpFDiv %6 %7705 %7722
               OpBranch %7756
       %7724 = OpLabel
       %7731 = OpExtInst %6 %1 FMax %2919 %2919
       %7734 = OpExtInst %6 %1 FClamp %2919 %7731 %2919
       %7737 = OpFOrdLessThan %35 %7734 %4342
       %7738 = OpLogicalAnd %35 %7737 %69
               OpSelectionMerge %7740 None
               OpBranchConditional %7738 %7739 %7740
       %7739 = OpLabel
               OpBranch %8514
       %7740 = OpLabel
       %7741 = OpLoad %17 %21
               OpSelectionMerge %7746 None
               OpBranchConditional %3141 %7745 %7746
       %7745 = OpLabel
               OpBranch %8514
       %7746 = OpLabel
               OpStore %21 %453
               OpStore %21 %7741
       %7755 = OpFDiv %6 %7707 %7705
               OpBranch %7756
       %7756 = OpLabel
       %9450 = OpPhi %6 %7723 %7709 %7755 %7746
       %7758 = OpLoad %17 %21
               OpStore %21 %672
               OpSelectionMerge %7764 None
               OpBranchConditional %3252 %7762 %7764
       %7762 = OpLabel
               OpStore %21 %7758
               OpBranch %7764
       %7764 = OpLabel
       %7767 = OpLoad %17 %21
               OpStore %21 %890
       %7777 = OpLogicalAnd %35 %4346 %69
               OpSelectionMerge %7825 None
               OpBranchConditional %7777 %7789 %7778
       %7778 = OpLabel
       %7780 = OpLoad %17 %21
               OpStore %21 %987
       %7783 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %7786 None
               OpBranchConditional %7783 %7784 %7786
       %7784 = OpLabel
               OpStore %21 %7780
               OpBranch %7786
       %7786 = OpLabel
               OpBranch %7825
       %7789 = OpLabel
       %7793 = OpExtInst %17 %1 FClamp %3204 %3204 %3204
       %7794 = OpCompositeExtract %6 %7793 0
       %7795 = OpFOrdGreaterThanEqual %35 %7794 %34
               OpSelectionMerge %7806 None
               OpBranchConditional %7795 %7798 %7796
       %7796 = OpLabel
               OpBranch %7806
       %7798 = OpLabel
       %7805 = OpExtInst %6 %1 FClamp %4342 %4342 %4342
               OpBranch %7806
       %7806 = OpLabel
       %9451 = OpPhi %6 %9450 %7796 %7805 %7798
       %7814 = OpFOrdGreaterThan %35 %9451 %4345
               OpSelectionMerge %7816 None
               OpBranchConditional %7814 %7815 %7816
       %7815 = OpLabel
               OpStore %21 %938
               OpBranch %7816
       %7816 = OpLabel
       %7818 = OpLoad %17 %21
               OpStore %21 %975
               OpStore %21 %7818
               OpStore %21 %7767
               OpBranch %7825
       %7825 = OpLabel
       %7826 = OpLoad %17 %21
               OpStore %21 %1019
               OpStore %21 %7826
       %7830 = OpLoad %17 %21
               OpStore %21 %1032
               OpStore %21 %7830
       %7836 = OpFMul %6 %1038 %9450
       %7838 = OpFMul %6 %7836 %9450
       %7839 = OpFSub %6 %1037 %7838
       %7852 = OpExtInst %6 %1 FMax %7839 %7839
       %7863 = OpExtInst %6 %1 FMin %7838 %7838
       %7869 = OpExtInst %6 %1 FMax %7863 %7838
       %7870 = OpFSub %6 %1037 %7869
       %7883 = OpExtInst %6 %1 FMax %7870 %7839
       %7884 = OpExtInst %6 %1 FMin %7852 %7883
       %7886 = OpFMul %6 %7884 %9450
       %7888 = OpFMul %6 %7886 %10023
               OpSelectionMerge %7921 None
               OpBranchConditional %2920 %7893 %7921
       %7893 = OpLabel
       %7894 = OpBitcast %17 %1109
       %7895 = OpFwidth %17 %7894
               OpStore %21 %7895
       %7896 = OpLoad %17 %21
               OpStore %21 %1116
               OpStore %21 %7896
       %7907 = OpFOrdLessThan %35 %3140 %4342
               OpSelectionMerge %7909 None
               OpBranchConditional %7907 %7908 %7909
       %7908 = OpLabel
               OpBranch %8514
       %7909 = OpLabel
       %7910 = OpLoad %17 %21
               OpStore %21 %172
               OpStore %21 %7910
       %7914 = OpLoad %17 %21
               OpStore %21 %1142
               OpSelectionMerge %7920 None
               OpBranchConditional %3252 %7918 %7920
       %7918 = OpLabel
               OpStore %21 %7914
               OpBranch %7920
       %7920 = OpLabel
               OpBranch %7921
       %7921 = OpLabel
               OpSelectionMerge %7928 None
               OpBranchConditional %7701 %7927 %7928
       %7927 = OpLabel
               OpBranch %8514
       %7928 = OpLabel
       %7938 = OpExtInst %6 %1 FClamp %7707 %7707 %7707
       %7939 = OpFOrdLessThan %35 %7705 %7938
               OpSelectionMerge %7959 None
               OpBranchConditional %7939 %7940 %7959
       %7940 = OpLabel
       %7943 = OpFSub %6 %65 %7888
       %7944 = OpLoad %17 %21
       %7948 = OpLogicalAnd %35 %2920 %69
               OpSelectionMerge %7950 None
               OpBranchConditional %7948 %7949 %7950
       %7949 = OpLabel
               OpBranch %8514
       %7950 = OpLabel
               OpStore %21 %1193
               OpSelectionMerge %7958 None
               OpBranchConditional %3252 %7954 %7958
       %7954 = OpLabel
               OpStore %21 %7944
               OpBranch %7958
       %7958 = OpLabel
               OpBranch %7959
       %7959 = OpLabel
       %9459 = OpPhi %6 %7888 %7928 %7943 %7958
       %7962 = OpExtInst %7 %1 FMax %7352 %7352
       %7963 = OpCompositeExtract %6 %7962 0
       %7964 = OpFOrdLessThan %35 %7963 %34
               OpSelectionMerge %8425 None
               OpBranchConditional %7964 %7965 %8425
       %7965 = OpLabel
               OpSelectionMerge %7973 None
               OpBranchConditional %7701 %7971 %7973
       %7971 = OpLabel
               OpBranch %8514
       %7973 = OpLabel
               OpSelectionMerge %7978 None
               OpBranchConditional %3141 %7977 %7978
       %7977 = OpLabel
               OpBranch %8514
       %7978 = OpLabel
       %7979 = OpLoad %17 %21
               OpStore %21 %1278
       %7980 = OpLoad %17 %21
               OpStore %21 %1285
               OpStore %21 %7980
               OpSelectionMerge %7999 None
               OpBranchConditional %3252 %7988 %7999
       %7988 = OpLabel
               OpStore %21 %7979
               OpBranch %7999
       %7999 = OpLabel
       %8004 = OpExtInst %6 %1 FClamp %9459 %9459 %9459
       %8005 = OpFSub %6 %43 %8004
               OpSelectionMerge %8376 None
               OpBranchConditional %4346 %8011 %8376
       %8011 = OpLabel
       %8015 = OpExtInst %6 %1 Determinant %1334
       %8016 = OpFOrdLessThan %35 %2919 %8015
               OpSelectionMerge %8018 None
               OpBranchConditional %8016 %8017 %8018
       %8017 = OpLabel
               OpBranch %8514
       %8018 = OpLabel
               OpBranch %8019
       %8019 = OpLabel
       %9791 = OpPhi %17 %8618 %8018 %8034 %8035
       %9461 = OpPhi %106 %725 %8018 %8037 %8035
       %8024 = OpConvertFToS %106 %4342
       %8025 = OpSGreaterThan %35 %9461 %8024
               OpLoopMerge %8038 %8035 None
               OpBranchConditional %8025 %8026 %8038
       %8026 = OpLabel
       %8027 = OpLoad %17 %21
               OpStore %21 %1357
               OpSelectionMerge %8033 None
               OpBranchConditional %3252 %8031 %8033
       %8031 = OpLabel
               OpStore %21 %8027
               OpBranch %8033
       %8033 = OpLabel
       %8034 = OpLoad %17 %21
               OpBranch %8035
       %8035 = OpLabel
       %8037 = OpISub %106 %9461 %725
               OpBranch %8019
       %8038 = OpLabel
               OpStore %21 %1421
       %8042 = OpLoad %17 %21
       %8043 = OpLoad %17 %21
       %8044 = OpLoad %17 %21
       %8045 = OpExtInst %17 %1 FMax %8043 %8044
       %8046 = OpExtInst %17 %1 FMin %8042 %8045
               OpSelectionMerge %8052 None
               OpBranchConditional %2920 %8051 %8052
       %8051 = OpLabel
               OpStore %21 %1435
               OpBranch %8052
       %8052 = OpLabel
       %8053 = OpLoad %17 %21
               OpStore %21 %1442
               OpStore %21 %8053
               OpStore %21 %1449
       %8057 = OpLoad %17 %21
               OpStore %21 %1456
               OpSelectionMerge %8065 None
               OpBranchConditional %4346 %8063 %8065
       %8063 = OpLabel
               OpStore %21 %8057
               OpBranch %8065
       %8065 = OpLabel
       %8067 = OpAccessChain %768 %105 %107
       %8068 = OpLoad %7 %8067
       %8073 = OpCompositeConstruct %7 %4345 %4345
       %8074 = OpFDiv %7 %8068 %8073
       %8077 = OpVectorTimesMatrix %7 %8068 %1502
       %8078 = OpExtInst %7 %1 FMax %8074 %8077
       %8079 = OpCompositeExtract %6 %8078 0
       %8082 = OpFOrdLessThan %35 %8079 %4345
               OpSelectionMerge %8119 None
               OpBranchConditional %8082 %8083 %8119
       %8083 = OpLabel
               OpStore %21 %8046
       %8085 = OpLoad %17 %21
               OpStore %21 %1517
       %8089 = OpFOrdGreaterThanEqual %35 %3140 %34
       %8090 = OpLogicalAnd %35 %8089 %69
               OpSelectionMerge %8096 None
               OpBranchConditional %8090 %8094 %8096
       %8094 = OpLabel
               OpStore %21 %8085
               OpBranch %8096
       %8096 = OpLabel
               OpSelectionMerge %8118 None
               OpBranchConditional %3141 %8100 %8118
       %8100 = OpLabel
               OpStore %21 %1539
       %8102 = OpLoad %17 %21
               OpStore %21 %1559
               OpSelectionMerge %8110 None
               OpBranchConditional %8089 %8108 %8110
       %8108 = OpLabel
               OpStore %21 %8102
               OpBranch %8110
       %8110 = OpLabel
               OpSelectionMerge %8117 None
               OpBranchConditional %7701 %8116 %8117
       %8116 = OpLabel
               OpBranch %8514
       %8117 = OpLabel
               OpBranch %8118
       %8118 = OpLabel
               OpBranch %8119
       %8119 = OpLabel
               OpSelectionMerge %8130 None
               OpBranchConditional %2920 %8129 %8127
       %8127 = OpLabel
       %8128 = OpLoad %17 %21
               OpBranch %8130
       %8129 = OpLabel
               OpBranch %8130
       %8130 = OpLabel
       %9618 = OpPhi %17 %8128 %8127 %8618 %8129
               OpStore %21 %1661
       %8173 = OpLogicalOr %35 %2920 %40
       %8174 = OpLogicalAnd %35 %8173 %69
       %8177 = OpLogicalAnd %35 %8174 %69
               OpSelectionMerge %8203 None
               OpBranchConditional %8177 %8178 %8203
       %8178 = OpLabel
       %8181 = OpCompositeExtract %6 %3204 0
       %8194 = OpSelect %6 %3141 %1704 %34
       %8195 = OpFOrdLessThan %35 %8181 %8194
               OpSelectionMerge %8202 None
               OpBranchConditional %8195 %8196 %8202
       %8196 = OpLabel
               OpSelectionMerge %8201 None
               OpBranchConditional %2920 %8200 %8201
       %8200 = OpLabel
               OpBranch %8514
       %8201 = OpLabel
               OpBranch %8514
       %8202 = OpLabel
               OpBranch %8514
       %8203 = OpLabel
       %8210 = OpFOrdLessThan %35 %2919 %4342
               OpSelectionMerge %8212 None
               OpBranchConditional %8210 %8211 %8212
       %8211 = OpLabel
               OpBranch %8514
       %8212 = OpLabel
               OpSelectionMerge %8226 None
               OpBranchConditional %3141 %8225 %8216
       %8216 = OpLabel
       %8219 = OpExtInst %17 %1 FMin %9618 %9618
       %8223 = OpMatrixTimesVector %17 %1750 %8219
       %8224 = OpExtInst %17 %1 FMin %8219 %8223
               OpBranch %8226
       %8225 = OpLabel
               OpBranch %8226
       %8226 = OpLabel
       %9773 = OpPhi %17 %8224 %8216 %1742 %8225
       %8228 = OpCompositeExtract %6 %9773 1
               OpSelectionMerge %8242 None
               OpBranchConditional %3141 %8241 %8232
       %8232 = OpLabel
       %8235 = OpExtInst %17 %1 FMin %9618 %9618
       %8239 = OpMatrixTimesVector %17 %1750 %8235
       %8240 = OpExtInst %17 %1 FMin %8235 %8239
               OpBranch %8242
       %8241 = OpLabel
               OpBranch %8242
       %8242 = OpLabel
       %9775 = OpPhi %17 %8240 %8232 %1742 %8241
       %8244 = OpCompositeExtract %6 %9775 2
       %8245 = OpCompositeConstruct %17 %1733 %8228 %8244 %283
               OpSelectionMerge %8259 None
               OpBranchConditional %3141 %8258 %8249
       %8249 = OpLabel
       %8252 = OpExtInst %17 %1 FMin %9618 %9618
       %8256 = OpMatrixTimesVector %17 %1750 %8252
       %8257 = OpExtInst %17 %1 FMin %8252 %8256
               OpBranch %8259
       %8258 = OpLabel
               OpBranch %8259
       %8259 = OpLabel
       %9777 = OpPhi %17 %8257 %8249 %1742 %8258
       %8261 = OpCompositeExtract %6 %9777 0
               OpSelectionMerge %8275 None
               OpBranchConditional %3141 %8274 %8265
       %8265 = OpLabel
       %8268 = OpExtInst %17 %1 FMin %9618 %9618
       %8272 = OpMatrixTimesVector %17 %1750 %8268
       %8273 = OpExtInst %17 %1 FMin %8268 %8272
               OpBranch %8275
       %8274 = OpLabel
               OpBranch %8275
       %8275 = OpLabel
       %9779 = OpPhi %17 %8273 %8265 %1742 %8274
       %8277 = OpCompositeExtract %6 %9779 3
       %8278 = OpCompositeConstruct %17 %8261 %1793 %1794 %8277
       %8279 = OpVectorShuffle %17 %8278 %8245 0 5 6 3
               OpStore %21 %8279
               OpSelectionMerge %8299 None
               OpBranchConditional %7208 %8295 %8299
       %8295 = OpLabel
       %8298 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpBranch %8299
       %8299 = OpLabel
       %8300 = OpPhi %35 %7208 %8275 %8298 %8295
       %8301 = OpLogicalNot %35 %8300
       %8302 = OpLogicalNot %35 %8301
       %8303 = OpLogicalNot %35 %8302
       %8304 = OpLogicalNot %35 %8303
               OpSelectionMerge %8321 None
               OpBranchConditional %8304 %8305 %8321
       %8305 = OpLabel
               OpStore %21 %9791
               OpSelectionMerge %8312 None
               OpBranchConditional %3141 %8311 %8312
       %8311 = OpLabel
               OpBranch %8514
       %8312 = OpLabel
       %8313 = OpLoad %17 %21
               OpStore %21 %1860
       %8316 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %8319 None
               OpBranchConditional %8316 %8317 %8319
       %8317 = OpLabel
               OpStore %21 %8313
               OpBranch %8319
       %8319 = OpLabel
               OpBranch %8321
       %8321 = OpLabel
       %8325 = OpLoad %17 %21
               OpSelectionMerge %8331 None
               OpBranchConditional %3141 %8330 %8331
       %8330 = OpLabel
               OpStore %21 %1907
               OpBranch %8331
       %8331 = OpLabel
               OpStore %21 %1912
               OpSelectionMerge %8350 None
               OpBranchConditional %3141 %8335 %8350
       %8335 = OpLabel
               OpStore %21 %1921
       %8339 = OpLogicalNot %35 %3141
       %8340 = OpLogicalNot %35 %8339
               OpSelectionMerge %8343 None
               OpBranchConditional %8340 %8341 %8343
       %8341 = OpLabel
               OpBranch %8514
       %8343 = OpLabel
               OpSelectionMerge %8349 None
               OpBranchConditional %3141 %8348 %8349
       %8348 = OpLabel
               OpBranch %8514
       %8349 = OpLabel
               OpBranch %8350
       %8350 = OpLabel
               OpSelectionMerge %8360 None
               OpBranchConditional %2920 %8359 %8360
       %8359 = OpLabel
               OpStore %21 %1959
               OpBranch %8360
       %8360 = OpLabel
               OpStore %21 %8325
               OpSelectionMerge %8369 None
               OpBranchConditional %7701 %8368 %8369
       %8368 = OpLabel
               OpStore %21 %1970
               OpBranch %8369
       %8369 = OpLabel
       %8370 = OpLoad %17 %21
       %8371 = OpExtInst %17 %1 Tanh %1977
       %8372 = OpExtInst %17 %1 Exp %8371
               OpStore %21 %8372
               OpStore %21 %8370
               OpBranch %8376
       %8376 = OpLabel
               OpSelectionMerge %8383 None
               OpBranchConditional %7701 %8382 %8383
       %8382 = OpLabel
               OpBranch %8514
       %8383 = OpLabel
       %8387 = OpLoad %17 %21
       %8388 = OpLoad %17 %21
               OpStore %21 %2009
       %8391 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %8394 None
               OpBranchConditional %8391 %8392 %8394
       %8392 = OpLabel
               OpStore %21 %8388
               OpBranch %8394
       %8394 = OpLabel
               OpStore %21 %2020
               OpStore %21 %8387
       %8398 = OpLoad %17 %21
               OpStore %21 %2030
               OpStore %21 %8398
       %8404 = OpLoad %17 %21
       %8407 = OpLoad %17 %21
               OpStore %21 %2056
               OpStore %21 %8407
               OpStore %21 %2085
       %8413 = OpLoad %17 %21
               OpStore %21 %2094
               OpStore %21 %8413
               OpStore %21 %8404
       %8419 = OpLoad %17 %21
               OpStore %21 %2103
               OpStore %21 %8419
               OpBranch %8425
       %8425 = OpLabel
       %9942 = OpPhi %6 %9459 %7959 %8005 %8394
       %8430 = OpCompositeExtract %6 %7352 1
       %8431 = OpFOrdLessThan %35 %8430 %34
       %8444 = OpLogicalOr %35 %8431 %40
               OpSelectionMerge %8509 None
               OpBranchConditional %8444 %8445 %8509
       %8445 = OpLabel
               OpSelectionMerge %8466 None
               OpBranchConditional %2920 %8449 %8466
       %8449 = OpLabel
       %8451 = OpLoad %17 %21
               OpStore %21 %2272
       %8452 = OpLoad %17 %21
               OpStore %21 %2277
               OpStore %21 %8452
               OpSelectionMerge %8464 None
               OpBranchConditional %4346 %8462 %8464
       %8462 = OpLabel
               OpStore %21 %8451
               OpBranch %8464
       %8464 = OpLabel
               OpBranch %8514
       %8466 = OpLabel
       %8468 = OpFNegate %6 %9942
               OpSelectionMerge %8475 None
               OpBranchConditional %7701 %8474 %8475
       %8474 = OpLabel
               OpBranch %8514
       %8475 = OpLabel
               OpSelectionMerge %8487 None
               OpBranchConditional %7701 %8481 %8487
       %8481 = OpLabel
               OpStore %21 %10005
               OpBranch %8487
       %8487 = OpLabel
       %8488 = OpLoad %17 %21
               OpStore %21 %2338
               OpSelectionMerge %8496 None
               OpBranchConditional %4346 %8494 %8496
       %8494 = OpLabel
               OpStore %21 %8488
               OpBranch %8496
       %8496 = OpLabel
       %8498 = OpLoad %17 %21
       %8499 = OpLoad %17 %21
       %8500 = OpLoad %17 %21
       %8501 = OpExtInst %17 %1 FClamp %8498 %8499 %8500
               OpStore %21 %2359
               OpStore %21 %8501
       %8505 = OpLoad %17 %21
               OpStore %21 %2368
               OpStore %21 %8505
               OpBranch %8509
       %8509 = OpLabel
       %9967 = OpPhi %6 %9942 %8425 %8468 %8496
               OpBranch %8514
       %8514 = OpLabel
       %9971 = OpPhi %6 %43 %7643 %43 %7644 %34 %7664 %43 %7695 %43 %7702 %43 %7739 %43 %7745 %43 %7908 %43 %7927 %43 %7949 %43 %7971 %43 %7977 %43 %8017 %43 %8116 %43 %8200 %43 %8201 %43 %8202 %43 %8211 %43 %8311 %43 %8341 %43 %8348 %43 %8382 %43 %8464 %43 %8474 %9967 %8509
       %7357 = OpCompositeConstruct %7 %7331 %9971
               OpBranch %7358
       %7358 = OpLabel
       %9972 = OpPhi %7 %2409 %7194 %2409 %7251 %7357 %8514
       %3261 = OpLoad %17 %21
               OpStore %21 %3265
               OpStore %21 %3261
       %3270 = OpLoad %17 %21
               OpStore %21 %3274
               OpStore %21 %3270
       %3279 = OpLoad %17 %21
       %3296 = OpLoad %17 %21
       %3312 = OpLoad %17 %21
       %3328 = OpExtInst %17 %1 FClamp %3279 %3296 %3312
               OpSelectionMerge %3333 None
               OpBranchConditional %3141 %3332 %3333
       %3332 = OpLabel
               OpStore %21 %3338
               OpBranch %3333
       %3333 = OpLabel
               OpStore %21 %3343
       %3344 = OpAccessChain %768 %105 %107
       %3345 = OpLoad %7 %3344
       %3348 = OpExtInst %7 %1 FMin %3345 %3345
       %3349 = OpCompositeExtract %6 %3348 0
       %3352 = OpFOrdLessThan %35 %3349 %4345
               OpSelectionMerge %3354 None
               OpBranchConditional %3352 %3353 %3354
       %3353 = OpLabel
               OpBranch %3355
       %3355 = OpLabel
               OpStore %21 %3328
               OpLoopMerge %3357 %3355 None
               OpBranchConditional %2920 %3355 %3357
       %3357 = OpLabel
       %3364 = OpLoad %17 %21
       %3373 = OpExtInst %17 %1 Asinh %3372
       %3374 = OpFMod %17 %3367 %3373
               OpStore %21 %3374
               OpSelectionMerge %3381 None
               OpBranchConditional %4346 %3380 %3381
       %3380 = OpLabel
               OpStore %21 %3364
               OpBranch %3381
       %3381 = OpLabel
               OpBranch %3354
       %3354 = OpLabel
       %3421 = OpLoad %17 %21
       %3431 = OpFOrdGreaterThan %35 %4342 %4345
       %3443 = OpLogicalNot %35 %3431
       %3444 = OpLogicalNot %35 %3443
       %3445 = OpLogicalNot %35 %3444
       %3446 = OpLogicalNot %35 %3445
               OpSelectionMerge %3448 None
               OpBranchConditional %3446 %3447 %3448
       %3447 = OpLabel
               OpBranch %4287
       %3448 = OpLabel
       %3457 = OpExtInst %17 %1 Tanh %3456
               OpStore %21 %3457
               OpSelectionMerge %3462 None
               OpBranchConditional %3252 %3461 %3462
       %3461 = OpLabel
       %3478 = OpExtInst %17 %1 FMin %3421 %3421
               OpStore %21 %3478
               OpBranch %3462
       %3462 = OpLabel
       %3492 = OpExtInst %17 %1 FMin %3204 %3204
       %3493 = OpCompositeExtract %6 %3492 1
       %3494 = OpFOrdLessThan %35 %3493 %34
       %3495 = OpLogicalOr %35 %3494 %40
               OpSelectionMerge %3499 None
               OpBranchConditional %3495 %3498 %3499
       %3498 = OpLabel
       %3514 = OpCompositeConstruct %254 %3431 %40 %40 %69
       %3515 = OpSelect %17 %3514 %3508 %3503
               OpStore %21 %3515
               OpBranch %3499
       %3499 = OpLabel
       %3518 = OpFSub %7 %8787 %9259
       %3520 = OpFAdd %7 %3518 %9972
               OpSelectionMerge %3525 None
               OpBranchConditional %2920 %3524 %3525
       %3524 = OpLabel
               OpBranch %4287
       %3525 = OpLabel
       %3530 = OpCompositeExtract %6 %3345 1
       %3531 = OpCompositeConstruct %7 %3530 %34
       %3532 = OpCompositeConstruct %7 %34 %3530
       %3533 = OpCompositeConstruct %926 %3531 %3532
       %3536 = OpVectorTimesScalar %7 %3520 %3535
       %3537 = OpMatrixTimesVector %7 %3533 %3536
       %3538 = OpExtInst %7 %1 Floor %3537
       %3540 = OpFMul %7 %3538 %10027
       %3548 = OpLoad %17 %21
       %3553 = OpExtInst %17 %1 Atanh %3552
       %3554 = OpExtInst %17 %1 Floor %3553
               OpStore %21 %3554
               OpStore %21 %3548
       %3565 = OpExtInst %6 %1 FMin %4342 %4342
       %3568 = OpFOrdGreaterThan %35 %3565 %4345
               OpSelectionMerge %3570 None
               OpBranchConditional %3568 %3569 %3570
       %3569 = OpLabel
               OpBranch %4287
       %3570 = OpLabel
       %3583 = OpLoad %17 %21
               OpStore %21 %3588
               OpStore %21 %3583
       %3596 = OpLoad %3593 %3595
       %3598 = OpImageSampleImplicitLod %17 %3596 %3540
       %3600 = OpCompositeExtract %6 %3598 0
       %3601 = OpCompositeExtract %6 %3598 1
       %3602 = OpCompositeExtract %6 %3598 2
       %3603 = OpCompositeConstruct %79 %3600 %3601 %3602
       %3701 = OpExtInst %79 %1 FMax %3603 %3603
       %3702 = OpCompositeExtract %6 %3701 1
       %3713 = OpCompositeConstruct %79 %3615 %3702 %575
       %3772 = OpExtInst %79 %1 FClamp %3713 %3713 %3713
       %3775 = OpCompositeExtract %6 %3772 1
       %3777 = OpCompositeConstruct %79 %3600 %3775 %3602
       %3778 = OpExtInst %79 %1 FClamp %3603 %3603 %3777
       %3806 = OpExtInst %6 %1 FMin %3602 %3602
       %3822 = OpCompositeConstruct %79 %3600 %3601 %3806
       %3823 = OpExtInst %79 %1 FMin %3778 %3822
       %3824 = OpCompositeExtract %6 %3823 0
       %3825 = OpCompositeExtract %6 %3823 1
       %3826 = OpCompositeExtract %6 %3823 2
       %3827 = OpCompositeConstruct %17 %3824 %3825 %3826 %43
               OpStore %21 %3827
               OpSelectionMerge %3836 None
               OpBranchConditional %3141 %3835 %3836
       %3835 = OpLabel
       %3838 = OpLoad %17 %21
               OpStore %21 %3843
               OpStore %21 %3838
               OpBranch %4287
       %3836 = OpLabel
       %3851 = OpLogicalNot %35 %3141
       %3852 = OpLogicalNot %35 %3851
       %3853 = OpLogicalAnd %35 %3852 %69
               OpSelectionMerge %3855 None
               OpBranchConditional %3853 %3854 %3855
       %3854 = OpLabel
               OpSelectionMerge %3862 None
               OpBranchConditional %3431 %3861 %3862
       %3861 = OpLabel
               OpBranch %4287
       %3862 = OpLabel
               OpSelectionMerge %3868 None
               OpBranchConditional %3141 %3867 %3868
       %3867 = OpLabel
       %3870 = OpLoad %17 %21
               OpStore %21 %3874
               OpStore %21 %3870
               OpStore %21 %3882
       %3884 = OpLoad %17 %21
               OpStore %21 %3887
               OpStore %21 %3884
               OpBranch %3868
       %3868 = OpLabel
       %3892 = OpLoad %17 %21
               OpStore %21 %3897
               OpStore %21 %3892
       %3905 = OpLoad %17 %21
               OpSelectionMerge %3910 None
               OpBranchConditional %2920 %3909 %3910
       %3909 = OpLabel
               OpBranch %4287
       %3910 = OpLabel
       %3913 = OpLoad %17 %21
               OpStore %21 %1748
               OpSelectionMerge %3918 None
               OpBranchConditional %3252 %3917 %3918
       %3917 = OpLabel
               OpStore %21 %3913
               OpBranch %3918
       %3918 = OpLabel
               OpStore %21 %3923
       %3925 = OpLoad %17 %21
               OpStore %21 %3927
               OpSelectionMerge %3934 None
               OpBranchConditional %4346 %3933 %3934
       %3933 = OpLabel
               OpStore %21 %3925
               OpBranch %3934
       %3934 = OpLabel
       %3937 = OpLoad %17 %21
               OpStore %21 %9999
               OpStore %21 %3937
       %3955 = OpLoad %17 %21
               OpStore %21 %3960
               OpStore %21 %3955
       %3965 = OpLoad %17 %21
               OpStore %21 %3970
               OpSelectionMerge %3989 None
               OpBranchConditional %3252 %3988 %3989
       %3988 = OpLabel
               OpStore %21 %3965
               OpBranch %3989
       %3989 = OpLabel
               OpSelectionMerge %3995 None
               OpBranchConditional %3141 %3994 %3995
       %3994 = OpLabel
       %3997 = OpLoad %17 %21
               OpStore %21 %4002
       %4005 = OpFOrdGreaterThanEqual %35 %3140 %34
               OpSelectionMerge %4007 None
               OpBranchConditional %4005 %4006 %4007
       %4006 = OpLabel
               OpStore %21 %3997
               OpBranch %4007
       %4007 = OpLabel
               OpBranch %4287
       %3995 = OpLabel
       %4011 = OpLoad %17 %21
               OpStore %21 %4016
               OpSelectionMerge %4021 None
               OpBranchConditional %3252 %4020 %4021
       %4020 = OpLabel
               OpStore %21 %4011
               OpBranch %4021
       %4021 = OpLabel
               OpSelectionMerge %4027 None
               OpBranchConditional %2920 %4026 %4027
       %4026 = OpLabel
               OpBranch %4287
       %4027 = OpLabel
               OpSelectionMerge %4054 None
               OpBranchConditional %2920 %4053 %4054
       %4053 = OpLabel
               OpBranch %4287
       %4054 = OpLabel
               OpSelectionMerge %4060 None
               OpBranchConditional %3141 %4059 %4060
       %4059 = OpLabel
               OpBranch %4287
       %4060 = OpLabel
       %4063 = OpLoad %17 %21
               OpStore %21 %4067
       %4072 = OpExtInst %17 %1 FMax %4063 %4063
               OpStore %21 %4072
       %4074 = OpLoad %17 %21
               OpStore %21 %4077
               OpStore %21 %4074
       %4087 = OpLoad %17 %21
               OpSelectionMerge %4092 None
               OpBranchConditional %2920 %4091 %4092
       %4091 = OpLabel
               OpBranch %4287
       %4092 = OpLabel
               OpStore %21 %4098
               OpSelectionMerge %4109 None
               OpBranchConditional %2920 %4108 %4109
       %4108 = OpLabel
               OpBranch %4287
       %4109 = OpLabel
               OpSelectionMerge %4117 None
               OpBranchConditional %4346 %4116 %4117
       %4116 = OpLabel
               OpStore %21 %4087
               OpSelectionMerge %4125 None
               OpBranchConditional %3431 %4124 %4125
       %4124 = OpLabel
               OpStore %21 %10008
               OpBranch %4125
       %4125 = OpLabel
               OpSelectionMerge %4150 None
               OpBranchConditional %3141 %4149 %4150
       %4149 = OpLabel
               OpBranch %4287
       %4150 = OpLabel
               OpBranch %4117
       %4117 = OpLabel
               OpStore %21 %3905
               OpSelectionMerge %4173 None
               OpBranchConditional %3431 %4172 %4173
       %4172 = OpLabel
               OpBranch %4287
       %4173 = OpLabel
       %4185 = OpExtInst %17 %1 Ldexp %4179 %4184
               OpStore %21 %4185
               OpSelectionMerge %4193 None
               OpBranchConditional %2920 %4192 %4193
       %4192 = OpLabel
               OpBranch %4287
       %4193 = OpLabel
               OpBranch %3855
       %3855 = OpLabel
       %4196 = OpLoad %17 %21
               OpStore %21 %9997
               OpBranch %4229
       %4229 = OpLabel
       %9973 = OpPhi %106 %107 %3855 %4286 %4232
       %4235 = OpINotEqual %35 %9973 %725
               OpLoopMerge %4231 %4232 None
               OpBranchConditional %4235 %4230 %4231
       %4230 = OpLabel
               OpStore %21 %4196
               OpBranch %4252
       %4252 = OpLabel
               OpLoopMerge %4254 %4255 None
               OpBranch %4257
       %4257 = OpLabel
               OpSelectionMerge %4276 None
               OpBranchConditional %3431 %4275 %4276
       %4275 = OpLabel
               OpKill
       %4276 = OpLabel
               OpBranch %4255
       %4255 = OpLabel
               OpBranchConditional %3431 %4252 %4254
       %4254 = OpLabel
               OpBranch %4232
       %4232 = OpLabel
       %4286 = OpIAdd %106 %9973 %725
               OpBranch %4229
       %4231 = OpLabel
               OpBranch %4287
       %4287 = OpLabel
               OpReturn
               OpFunctionEnd
END

# uniforms for variant

# tex
SAMPLER variant_tex

# injectionSwitch
BUFFER variant_injectionSwitch DATA_TYPE vec2<float> STD140 DATA
 0.0 1.0
END

BUFFER variant_framebuffer FORMAT B8G8R8A8_UNORM

PIPELINE graphics variant_pipeline
  ATTACH variant_vertex_shader
  ATTACH variant_fragment_shader
  FRAMEBUFFER_SIZE 256 256
  BIND BUFFER variant_framebuffer AS color LOCATION 0
  BIND BUFFER default_texture AS combined_image_sampler SAMPLER variant_tex DESCRIPTOR_SET 0 BINDING 0
  BIND BUFFER variant_injectionSwitch AS push_constant
END
CLEAR_COLOR variant_pipeline 0 0 0 255

CLEAR variant_pipeline
RUN variant_pipeline DRAW_RECT POS 0 0 SIZE 256 256

EXPECT reference_framebuffer EQ_HISTOGRAM_EMD_BUFFER variant_framebuffer TOLERANCE 0.005
